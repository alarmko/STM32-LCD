
NEXTION_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f8  080089f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080089f8  080089f8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089f8  080089f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000024  08008a24  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001834  08008a24  00021834  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f038  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c1c  00000000  00000000  0003f084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00018f94  00000000  00000000  00042ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0005bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003748  00000000  00000000  0005c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e937  00000000  00000000  0005fe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c12a  00000000  00000000  0006e7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004966c  00000000  00000000  0008a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d3f65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002420  00000000  00000000  000d3fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007fbc 	.word	0x08007fbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08007fbc 	.word	0x08007fbc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_d2uiz>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2200      	movs	r2, #0
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <__aeabi_d2uiz+0x38>)
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
 800023a:	f001 fa19 	bl	8001670 <__aeabi_dcmpge>
 800023e:	2800      	cmp	r0, #0
 8000240:	d104      	bne.n	800024c <__aeabi_d2uiz+0x1c>
 8000242:	0020      	movs	r0, r4
 8000244:	0029      	movs	r1, r5
 8000246:	f001 f979 	bl	800153c <__aeabi_d2iz>
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <__aeabi_d2uiz+0x38>)
 800024e:	2200      	movs	r2, #0
 8000250:	0020      	movs	r0, r4
 8000252:	0029      	movs	r1, r5
 8000254:	f000 fde0 	bl	8000e18 <__aeabi_dsub>
 8000258:	f001 f970 	bl	800153c <__aeabi_d2iz>
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	061b      	lsls	r3, r3, #24
 8000260:	469c      	mov	ip, r3
 8000262:	4460      	add	r0, ip
 8000264:	e7f1      	b.n	800024a <__aeabi_d2uiz+0x1a>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	41e00000 	.word	0x41e00000

0800026c <__aeabi_dadd>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	464f      	mov	r7, r9
 8000270:	46d6      	mov	lr, sl
 8000272:	4646      	mov	r6, r8
 8000274:	000d      	movs	r5, r1
 8000276:	0001      	movs	r1, r0
 8000278:	0018      	movs	r0, r3
 800027a:	b5c0      	push	{r6, r7, lr}
 800027c:	0017      	movs	r7, r2
 800027e:	032b      	lsls	r3, r5, #12
 8000280:	0a5a      	lsrs	r2, r3, #9
 8000282:	0f4b      	lsrs	r3, r1, #29
 8000284:	4313      	orrs	r3, r2
 8000286:	00ca      	lsls	r2, r1, #3
 8000288:	4691      	mov	r9, r2
 800028a:	0302      	lsls	r2, r0, #12
 800028c:	006e      	lsls	r6, r5, #1
 800028e:	0041      	lsls	r1, r0, #1
 8000290:	0a52      	lsrs	r2, r2, #9
 8000292:	0fec      	lsrs	r4, r5, #31
 8000294:	0f7d      	lsrs	r5, r7, #29
 8000296:	4315      	orrs	r5, r2
 8000298:	0d76      	lsrs	r6, r6, #21
 800029a:	0d49      	lsrs	r1, r1, #21
 800029c:	0fc0      	lsrs	r0, r0, #31
 800029e:	4682      	mov	sl, r0
 80002a0:	46ac      	mov	ip, r5
 80002a2:	00ff      	lsls	r7, r7, #3
 80002a4:	1a72      	subs	r2, r6, r1
 80002a6:	4284      	cmp	r4, r0
 80002a8:	d100      	bne.n	80002ac <__aeabi_dadd+0x40>
 80002aa:	e098      	b.n	80003de <__aeabi_dadd+0x172>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	dc00      	bgt.n	80002b2 <__aeabi_dadd+0x46>
 80002b0:	e081      	b.n	80003b6 <__aeabi_dadd+0x14a>
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dadd+0x4c>
 80002b6:	e0b6      	b.n	8000426 <__aeabi_dadd+0x1ba>
 80002b8:	49c9      	ldr	r1, [pc, #804]	; (80005e0 <__aeabi_dadd+0x374>)
 80002ba:	428e      	cmp	r6, r1
 80002bc:	d100      	bne.n	80002c0 <__aeabi_dadd+0x54>
 80002be:	e172      	b.n	80005a6 <__aeabi_dadd+0x33a>
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	0028      	movs	r0, r5
 80002c4:	0409      	lsls	r1, r1, #16
 80002c6:	4308      	orrs	r0, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	2a38      	cmp	r2, #56	; 0x38
 80002cc:	dd00      	ble.n	80002d0 <__aeabi_dadd+0x64>
 80002ce:	e15e      	b.n	800058e <__aeabi_dadd+0x322>
 80002d0:	2a1f      	cmp	r2, #31
 80002d2:	dd00      	ble.n	80002d6 <__aeabi_dadd+0x6a>
 80002d4:	e1ee      	b.n	80006b4 <__aeabi_dadd+0x448>
 80002d6:	2020      	movs	r0, #32
 80002d8:	0039      	movs	r1, r7
 80002da:	4665      	mov	r5, ip
 80002dc:	1a80      	subs	r0, r0, r2
 80002de:	4087      	lsls	r7, r0
 80002e0:	40d1      	lsrs	r1, r2
 80002e2:	4085      	lsls	r5, r0
 80002e4:	430d      	orrs	r5, r1
 80002e6:	0039      	movs	r1, r7
 80002e8:	1e4f      	subs	r7, r1, #1
 80002ea:	41b9      	sbcs	r1, r7
 80002ec:	4667      	mov	r7, ip
 80002ee:	40d7      	lsrs	r7, r2
 80002f0:	4329      	orrs	r1, r5
 80002f2:	1bdb      	subs	r3, r3, r7
 80002f4:	464a      	mov	r2, r9
 80002f6:	1a55      	subs	r5, r2, r1
 80002f8:	45a9      	cmp	r9, r5
 80002fa:	4189      	sbcs	r1, r1
 80002fc:	4249      	negs	r1, r1
 80002fe:	1a5b      	subs	r3, r3, r1
 8000300:	4698      	mov	r8, r3
 8000302:	4643      	mov	r3, r8
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	d400      	bmi.n	800030a <__aeabi_dadd+0x9e>
 8000308:	e0cc      	b.n	80004a4 <__aeabi_dadd+0x238>
 800030a:	4643      	mov	r3, r8
 800030c:	025b      	lsls	r3, r3, #9
 800030e:	0a5b      	lsrs	r3, r3, #9
 8000310:	4698      	mov	r8, r3
 8000312:	4643      	mov	r3, r8
 8000314:	2b00      	cmp	r3, #0
 8000316:	d100      	bne.n	800031a <__aeabi_dadd+0xae>
 8000318:	e12c      	b.n	8000574 <__aeabi_dadd+0x308>
 800031a:	4640      	mov	r0, r8
 800031c:	f001 f9b2 	bl	8001684 <__clzsi2>
 8000320:	0001      	movs	r1, r0
 8000322:	3908      	subs	r1, #8
 8000324:	2220      	movs	r2, #32
 8000326:	0028      	movs	r0, r5
 8000328:	4643      	mov	r3, r8
 800032a:	1a52      	subs	r2, r2, r1
 800032c:	408b      	lsls	r3, r1
 800032e:	40d0      	lsrs	r0, r2
 8000330:	408d      	lsls	r5, r1
 8000332:	4303      	orrs	r3, r0
 8000334:	428e      	cmp	r6, r1
 8000336:	dd00      	ble.n	800033a <__aeabi_dadd+0xce>
 8000338:	e117      	b.n	800056a <__aeabi_dadd+0x2fe>
 800033a:	1b8e      	subs	r6, r1, r6
 800033c:	1c72      	adds	r2, r6, #1
 800033e:	2a1f      	cmp	r2, #31
 8000340:	dd00      	ble.n	8000344 <__aeabi_dadd+0xd8>
 8000342:	e1a7      	b.n	8000694 <__aeabi_dadd+0x428>
 8000344:	2120      	movs	r1, #32
 8000346:	0018      	movs	r0, r3
 8000348:	002e      	movs	r6, r5
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	408d      	lsls	r5, r1
 800034e:	4088      	lsls	r0, r1
 8000350:	40d6      	lsrs	r6, r2
 8000352:	40d3      	lsrs	r3, r2
 8000354:	1e69      	subs	r1, r5, #1
 8000356:	418d      	sbcs	r5, r1
 8000358:	4330      	orrs	r0, r6
 800035a:	4698      	mov	r8, r3
 800035c:	2600      	movs	r6, #0
 800035e:	4305      	orrs	r5, r0
 8000360:	076b      	lsls	r3, r5, #29
 8000362:	d009      	beq.n	8000378 <__aeabi_dadd+0x10c>
 8000364:	230f      	movs	r3, #15
 8000366:	402b      	ands	r3, r5
 8000368:	2b04      	cmp	r3, #4
 800036a:	d005      	beq.n	8000378 <__aeabi_dadd+0x10c>
 800036c:	1d2b      	adds	r3, r5, #4
 800036e:	42ab      	cmp	r3, r5
 8000370:	41ad      	sbcs	r5, r5
 8000372:	426d      	negs	r5, r5
 8000374:	44a8      	add	r8, r5
 8000376:	001d      	movs	r5, r3
 8000378:	4643      	mov	r3, r8
 800037a:	021b      	lsls	r3, r3, #8
 800037c:	d400      	bmi.n	8000380 <__aeabi_dadd+0x114>
 800037e:	e094      	b.n	80004aa <__aeabi_dadd+0x23e>
 8000380:	4b97      	ldr	r3, [pc, #604]	; (80005e0 <__aeabi_dadd+0x374>)
 8000382:	1c72      	adds	r2, r6, #1
 8000384:	429a      	cmp	r2, r3
 8000386:	d100      	bne.n	800038a <__aeabi_dadd+0x11e>
 8000388:	e09d      	b.n	80004c6 <__aeabi_dadd+0x25a>
 800038a:	4641      	mov	r1, r8
 800038c:	4b95      	ldr	r3, [pc, #596]	; (80005e4 <__aeabi_dadd+0x378>)
 800038e:	08ed      	lsrs	r5, r5, #3
 8000390:	4019      	ands	r1, r3
 8000392:	000b      	movs	r3, r1
 8000394:	0552      	lsls	r2, r2, #21
 8000396:	0749      	lsls	r1, r1, #29
 8000398:	025b      	lsls	r3, r3, #9
 800039a:	4329      	orrs	r1, r5
 800039c:	0b1b      	lsrs	r3, r3, #12
 800039e:	0d52      	lsrs	r2, r2, #21
 80003a0:	0512      	lsls	r2, r2, #20
 80003a2:	4313      	orrs	r3, r2
 80003a4:	07e4      	lsls	r4, r4, #31
 80003a6:	4323      	orrs	r3, r4
 80003a8:	0008      	movs	r0, r1
 80003aa:	0019      	movs	r1, r3
 80003ac:	bce0      	pop	{r5, r6, r7}
 80003ae:	46ba      	mov	sl, r7
 80003b0:	46b1      	mov	r9, r6
 80003b2:	46a8      	mov	r8, r5
 80003b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d043      	beq.n	8000442 <__aeabi_dadd+0x1d6>
 80003ba:	1b8a      	subs	r2, r1, r6
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d000      	beq.n	80003c2 <__aeabi_dadd+0x156>
 80003c0:	e12a      	b.n	8000618 <__aeabi_dadd+0x3ac>
 80003c2:	464c      	mov	r4, r9
 80003c4:	431c      	orrs	r4, r3
 80003c6:	d100      	bne.n	80003ca <__aeabi_dadd+0x15e>
 80003c8:	e1d1      	b.n	800076e <__aeabi_dadd+0x502>
 80003ca:	1e54      	subs	r4, r2, #1
 80003cc:	2a01      	cmp	r2, #1
 80003ce:	d100      	bne.n	80003d2 <__aeabi_dadd+0x166>
 80003d0:	e21f      	b.n	8000812 <__aeabi_dadd+0x5a6>
 80003d2:	4d83      	ldr	r5, [pc, #524]	; (80005e0 <__aeabi_dadd+0x374>)
 80003d4:	42aa      	cmp	r2, r5
 80003d6:	d100      	bne.n	80003da <__aeabi_dadd+0x16e>
 80003d8:	e272      	b.n	80008c0 <__aeabi_dadd+0x654>
 80003da:	0022      	movs	r2, r4
 80003dc:	e123      	b.n	8000626 <__aeabi_dadd+0x3ba>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	dc00      	bgt.n	80003e4 <__aeabi_dadd+0x178>
 80003e2:	e098      	b.n	8000516 <__aeabi_dadd+0x2aa>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d042      	beq.n	800046e <__aeabi_dadd+0x202>
 80003e8:	497d      	ldr	r1, [pc, #500]	; (80005e0 <__aeabi_dadd+0x374>)
 80003ea:	428e      	cmp	r6, r1
 80003ec:	d100      	bne.n	80003f0 <__aeabi_dadd+0x184>
 80003ee:	e0da      	b.n	80005a6 <__aeabi_dadd+0x33a>
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	0028      	movs	r0, r5
 80003f4:	0409      	lsls	r1, r1, #16
 80003f6:	4308      	orrs	r0, r1
 80003f8:	4684      	mov	ip, r0
 80003fa:	2a38      	cmp	r2, #56	; 0x38
 80003fc:	dd00      	ble.n	8000400 <__aeabi_dadd+0x194>
 80003fe:	e129      	b.n	8000654 <__aeabi_dadd+0x3e8>
 8000400:	2a1f      	cmp	r2, #31
 8000402:	dc00      	bgt.n	8000406 <__aeabi_dadd+0x19a>
 8000404:	e187      	b.n	8000716 <__aeabi_dadd+0x4aa>
 8000406:	0011      	movs	r1, r2
 8000408:	4665      	mov	r5, ip
 800040a:	3920      	subs	r1, #32
 800040c:	40cd      	lsrs	r5, r1
 800040e:	2a20      	cmp	r2, #32
 8000410:	d004      	beq.n	800041c <__aeabi_dadd+0x1b0>
 8000412:	2040      	movs	r0, #64	; 0x40
 8000414:	4661      	mov	r1, ip
 8000416:	1a82      	subs	r2, r0, r2
 8000418:	4091      	lsls	r1, r2
 800041a:	430f      	orrs	r7, r1
 800041c:	0039      	movs	r1, r7
 800041e:	1e4f      	subs	r7, r1, #1
 8000420:	41b9      	sbcs	r1, r7
 8000422:	430d      	orrs	r5, r1
 8000424:	e11b      	b.n	800065e <__aeabi_dadd+0x3f2>
 8000426:	0029      	movs	r1, r5
 8000428:	4339      	orrs	r1, r7
 800042a:	d100      	bne.n	800042e <__aeabi_dadd+0x1c2>
 800042c:	e0b5      	b.n	800059a <__aeabi_dadd+0x32e>
 800042e:	1e51      	subs	r1, r2, #1
 8000430:	2a01      	cmp	r2, #1
 8000432:	d100      	bne.n	8000436 <__aeabi_dadd+0x1ca>
 8000434:	e1ab      	b.n	800078e <__aeabi_dadd+0x522>
 8000436:	486a      	ldr	r0, [pc, #424]	; (80005e0 <__aeabi_dadd+0x374>)
 8000438:	4282      	cmp	r2, r0
 800043a:	d100      	bne.n	800043e <__aeabi_dadd+0x1d2>
 800043c:	e1b2      	b.n	80007a4 <__aeabi_dadd+0x538>
 800043e:	000a      	movs	r2, r1
 8000440:	e743      	b.n	80002ca <__aeabi_dadd+0x5e>
 8000442:	4969      	ldr	r1, [pc, #420]	; (80005e8 <__aeabi_dadd+0x37c>)
 8000444:	1c75      	adds	r5, r6, #1
 8000446:	420d      	tst	r5, r1
 8000448:	d000      	beq.n	800044c <__aeabi_dadd+0x1e0>
 800044a:	e0cf      	b.n	80005ec <__aeabi_dadd+0x380>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d000      	beq.n	8000452 <__aeabi_dadd+0x1e6>
 8000450:	e193      	b.n	800077a <__aeabi_dadd+0x50e>
 8000452:	4649      	mov	r1, r9
 8000454:	4319      	orrs	r1, r3
 8000456:	d100      	bne.n	800045a <__aeabi_dadd+0x1ee>
 8000458:	e1d1      	b.n	80007fe <__aeabi_dadd+0x592>
 800045a:	4661      	mov	r1, ip
 800045c:	4339      	orrs	r1, r7
 800045e:	d000      	beq.n	8000462 <__aeabi_dadd+0x1f6>
 8000460:	e1e3      	b.n	800082a <__aeabi_dadd+0x5be>
 8000462:	4649      	mov	r1, r9
 8000464:	0758      	lsls	r0, r3, #29
 8000466:	08c9      	lsrs	r1, r1, #3
 8000468:	4301      	orrs	r1, r0
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	e026      	b.n	80004bc <__aeabi_dadd+0x250>
 800046e:	0029      	movs	r1, r5
 8000470:	4339      	orrs	r1, r7
 8000472:	d100      	bne.n	8000476 <__aeabi_dadd+0x20a>
 8000474:	e091      	b.n	800059a <__aeabi_dadd+0x32e>
 8000476:	1e51      	subs	r1, r2, #1
 8000478:	2a01      	cmp	r2, #1
 800047a:	d005      	beq.n	8000488 <__aeabi_dadd+0x21c>
 800047c:	4858      	ldr	r0, [pc, #352]	; (80005e0 <__aeabi_dadd+0x374>)
 800047e:	4282      	cmp	r2, r0
 8000480:	d100      	bne.n	8000484 <__aeabi_dadd+0x218>
 8000482:	e18f      	b.n	80007a4 <__aeabi_dadd+0x538>
 8000484:	000a      	movs	r2, r1
 8000486:	e7b8      	b.n	80003fa <__aeabi_dadd+0x18e>
 8000488:	003d      	movs	r5, r7
 800048a:	444d      	add	r5, r9
 800048c:	454d      	cmp	r5, r9
 800048e:	4189      	sbcs	r1, r1
 8000490:	4463      	add	r3, ip
 8000492:	4698      	mov	r8, r3
 8000494:	4249      	negs	r1, r1
 8000496:	4488      	add	r8, r1
 8000498:	4643      	mov	r3, r8
 800049a:	2602      	movs	r6, #2
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	d500      	bpl.n	80004a2 <__aeabi_dadd+0x236>
 80004a0:	e0eb      	b.n	800067a <__aeabi_dadd+0x40e>
 80004a2:	3e01      	subs	r6, #1
 80004a4:	076b      	lsls	r3, r5, #29
 80004a6:	d000      	beq.n	80004aa <__aeabi_dadd+0x23e>
 80004a8:	e75c      	b.n	8000364 <__aeabi_dadd+0xf8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	08e9      	lsrs	r1, r5, #3
 80004ae:	075a      	lsls	r2, r3, #29
 80004b0:	4311      	orrs	r1, r2
 80004b2:	0032      	movs	r2, r6
 80004b4:	08db      	lsrs	r3, r3, #3
 80004b6:	484a      	ldr	r0, [pc, #296]	; (80005e0 <__aeabi_dadd+0x374>)
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d021      	beq.n	8000500 <__aeabi_dadd+0x294>
 80004bc:	031b      	lsls	r3, r3, #12
 80004be:	0552      	lsls	r2, r2, #21
 80004c0:	0b1b      	lsrs	r3, r3, #12
 80004c2:	0d52      	lsrs	r2, r2, #21
 80004c4:	e76c      	b.n	80003a0 <__aeabi_dadd+0x134>
 80004c6:	2300      	movs	r3, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	e769      	b.n	80003a0 <__aeabi_dadd+0x134>
 80004cc:	002a      	movs	r2, r5
 80004ce:	433a      	orrs	r2, r7
 80004d0:	d069      	beq.n	80005a6 <__aeabi_dadd+0x33a>
 80004d2:	464a      	mov	r2, r9
 80004d4:	0758      	lsls	r0, r3, #29
 80004d6:	08d1      	lsrs	r1, r2, #3
 80004d8:	08da      	lsrs	r2, r3, #3
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	031b      	lsls	r3, r3, #12
 80004de:	4308      	orrs	r0, r1
 80004e0:	421a      	tst	r2, r3
 80004e2:	d007      	beq.n	80004f4 <__aeabi_dadd+0x288>
 80004e4:	0029      	movs	r1, r5
 80004e6:	08ed      	lsrs	r5, r5, #3
 80004e8:	421d      	tst	r5, r3
 80004ea:	d103      	bne.n	80004f4 <__aeabi_dadd+0x288>
 80004ec:	002a      	movs	r2, r5
 80004ee:	08ff      	lsrs	r7, r7, #3
 80004f0:	0748      	lsls	r0, r1, #29
 80004f2:	4338      	orrs	r0, r7
 80004f4:	0f43      	lsrs	r3, r0, #29
 80004f6:	00c1      	lsls	r1, r0, #3
 80004f8:	075b      	lsls	r3, r3, #29
 80004fa:	08c9      	lsrs	r1, r1, #3
 80004fc:	4319      	orrs	r1, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	000a      	movs	r2, r1
 8000502:	431a      	orrs	r2, r3
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x29c>
 8000506:	e213      	b.n	8000930 <__aeabi_dadd+0x6c4>
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	0312      	lsls	r2, r2, #12
 800050c:	4313      	orrs	r3, r2
 800050e:	031b      	lsls	r3, r3, #12
 8000510:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <__aeabi_dadd+0x374>)
 8000512:	0b1b      	lsrs	r3, r3, #12
 8000514:	e744      	b.n	80003a0 <__aeabi_dadd+0x134>
 8000516:	2a00      	cmp	r2, #0
 8000518:	d04b      	beq.n	80005b2 <__aeabi_dadd+0x346>
 800051a:	1b8a      	subs	r2, r1, r6
 800051c:	2e00      	cmp	r6, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_dadd+0x2b6>
 8000520:	e0e7      	b.n	80006f2 <__aeabi_dadd+0x486>
 8000522:	482f      	ldr	r0, [pc, #188]	; (80005e0 <__aeabi_dadd+0x374>)
 8000524:	4281      	cmp	r1, r0
 8000526:	d100      	bne.n	800052a <__aeabi_dadd+0x2be>
 8000528:	e195      	b.n	8000856 <__aeabi_dadd+0x5ea>
 800052a:	2080      	movs	r0, #128	; 0x80
 800052c:	0400      	lsls	r0, r0, #16
 800052e:	4303      	orrs	r3, r0
 8000530:	2a38      	cmp	r2, #56	; 0x38
 8000532:	dd00      	ble.n	8000536 <__aeabi_dadd+0x2ca>
 8000534:	e143      	b.n	80007be <__aeabi_dadd+0x552>
 8000536:	2a1f      	cmp	r2, #31
 8000538:	dd00      	ble.n	800053c <__aeabi_dadd+0x2d0>
 800053a:	e1db      	b.n	80008f4 <__aeabi_dadd+0x688>
 800053c:	2020      	movs	r0, #32
 800053e:	001d      	movs	r5, r3
 8000540:	464e      	mov	r6, r9
 8000542:	1a80      	subs	r0, r0, r2
 8000544:	4085      	lsls	r5, r0
 8000546:	40d6      	lsrs	r6, r2
 8000548:	4335      	orrs	r5, r6
 800054a:	464e      	mov	r6, r9
 800054c:	4086      	lsls	r6, r0
 800054e:	0030      	movs	r0, r6
 8000550:	40d3      	lsrs	r3, r2
 8000552:	1e46      	subs	r6, r0, #1
 8000554:	41b0      	sbcs	r0, r6
 8000556:	449c      	add	ip, r3
 8000558:	4305      	orrs	r5, r0
 800055a:	19ed      	adds	r5, r5, r7
 800055c:	42bd      	cmp	r5, r7
 800055e:	419b      	sbcs	r3, r3
 8000560:	425b      	negs	r3, r3
 8000562:	4463      	add	r3, ip
 8000564:	4698      	mov	r8, r3
 8000566:	000e      	movs	r6, r1
 8000568:	e07f      	b.n	800066a <__aeabi_dadd+0x3fe>
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <__aeabi_dadd+0x378>)
 800056c:	1a76      	subs	r6, r6, r1
 800056e:	4013      	ands	r3, r2
 8000570:	4698      	mov	r8, r3
 8000572:	e6f5      	b.n	8000360 <__aeabi_dadd+0xf4>
 8000574:	0028      	movs	r0, r5
 8000576:	f001 f885 	bl	8001684 <__clzsi2>
 800057a:	0001      	movs	r1, r0
 800057c:	3118      	adds	r1, #24
 800057e:	291f      	cmp	r1, #31
 8000580:	dc00      	bgt.n	8000584 <__aeabi_dadd+0x318>
 8000582:	e6cf      	b.n	8000324 <__aeabi_dadd+0xb8>
 8000584:	002b      	movs	r3, r5
 8000586:	3808      	subs	r0, #8
 8000588:	4083      	lsls	r3, r0
 800058a:	2500      	movs	r5, #0
 800058c:	e6d2      	b.n	8000334 <__aeabi_dadd+0xc8>
 800058e:	4662      	mov	r2, ip
 8000590:	433a      	orrs	r2, r7
 8000592:	0011      	movs	r1, r2
 8000594:	1e4f      	subs	r7, r1, #1
 8000596:	41b9      	sbcs	r1, r7
 8000598:	e6ac      	b.n	80002f4 <__aeabi_dadd+0x88>
 800059a:	4649      	mov	r1, r9
 800059c:	0758      	lsls	r0, r3, #29
 800059e:	08c9      	lsrs	r1, r1, #3
 80005a0:	4301      	orrs	r1, r0
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	e787      	b.n	80004b6 <__aeabi_dadd+0x24a>
 80005a6:	4649      	mov	r1, r9
 80005a8:	075a      	lsls	r2, r3, #29
 80005aa:	08c9      	lsrs	r1, r1, #3
 80005ac:	4311      	orrs	r1, r2
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	e7a6      	b.n	8000500 <__aeabi_dadd+0x294>
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <__aeabi_dadd+0x37c>)
 80005b4:	1c70      	adds	r0, r6, #1
 80005b6:	4208      	tst	r0, r1
 80005b8:	d000      	beq.n	80005bc <__aeabi_dadd+0x350>
 80005ba:	e0bb      	b.n	8000734 <__aeabi_dadd+0x4c8>
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_dadd+0x356>
 80005c0:	e114      	b.n	80007ec <__aeabi_dadd+0x580>
 80005c2:	4649      	mov	r1, r9
 80005c4:	4319      	orrs	r1, r3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x35e>
 80005c8:	e175      	b.n	80008b6 <__aeabi_dadd+0x64a>
 80005ca:	0029      	movs	r1, r5
 80005cc:	4339      	orrs	r1, r7
 80005ce:	d000      	beq.n	80005d2 <__aeabi_dadd+0x366>
 80005d0:	e17e      	b.n	80008d0 <__aeabi_dadd+0x664>
 80005d2:	4649      	mov	r1, r9
 80005d4:	0758      	lsls	r0, r3, #29
 80005d6:	08c9      	lsrs	r1, r1, #3
 80005d8:	4301      	orrs	r1, r0
 80005da:	08db      	lsrs	r3, r3, #3
 80005dc:	e76e      	b.n	80004bc <__aeabi_dadd+0x250>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	000007ff 	.word	0x000007ff
 80005e4:	ff7fffff 	.word	0xff7fffff
 80005e8:	000007fe 	.word	0x000007fe
 80005ec:	4649      	mov	r1, r9
 80005ee:	1bcd      	subs	r5, r1, r7
 80005f0:	4661      	mov	r1, ip
 80005f2:	1a58      	subs	r0, r3, r1
 80005f4:	45a9      	cmp	r9, r5
 80005f6:	4189      	sbcs	r1, r1
 80005f8:	4249      	negs	r1, r1
 80005fa:	4688      	mov	r8, r1
 80005fc:	0001      	movs	r1, r0
 80005fe:	4640      	mov	r0, r8
 8000600:	1a09      	subs	r1, r1, r0
 8000602:	4688      	mov	r8, r1
 8000604:	0209      	lsls	r1, r1, #8
 8000606:	d500      	bpl.n	800060a <__aeabi_dadd+0x39e>
 8000608:	e0a6      	b.n	8000758 <__aeabi_dadd+0x4ec>
 800060a:	4641      	mov	r1, r8
 800060c:	4329      	orrs	r1, r5
 800060e:	d000      	beq.n	8000612 <__aeabi_dadd+0x3a6>
 8000610:	e67f      	b.n	8000312 <__aeabi_dadd+0xa6>
 8000612:	2300      	movs	r3, #0
 8000614:	2400      	movs	r4, #0
 8000616:	e751      	b.n	80004bc <__aeabi_dadd+0x250>
 8000618:	4cc7      	ldr	r4, [pc, #796]	; (8000938 <__aeabi_dadd+0x6cc>)
 800061a:	42a1      	cmp	r1, r4
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x3b4>
 800061e:	e0c7      	b.n	80007b0 <__aeabi_dadd+0x544>
 8000620:	2480      	movs	r4, #128	; 0x80
 8000622:	0424      	lsls	r4, r4, #16
 8000624:	4323      	orrs	r3, r4
 8000626:	2a38      	cmp	r2, #56	; 0x38
 8000628:	dc54      	bgt.n	80006d4 <__aeabi_dadd+0x468>
 800062a:	2a1f      	cmp	r2, #31
 800062c:	dd00      	ble.n	8000630 <__aeabi_dadd+0x3c4>
 800062e:	e0cc      	b.n	80007ca <__aeabi_dadd+0x55e>
 8000630:	2420      	movs	r4, #32
 8000632:	4648      	mov	r0, r9
 8000634:	1aa4      	subs	r4, r4, r2
 8000636:	001d      	movs	r5, r3
 8000638:	464e      	mov	r6, r9
 800063a:	40a0      	lsls	r0, r4
 800063c:	40d6      	lsrs	r6, r2
 800063e:	40a5      	lsls	r5, r4
 8000640:	0004      	movs	r4, r0
 8000642:	40d3      	lsrs	r3, r2
 8000644:	4662      	mov	r2, ip
 8000646:	4335      	orrs	r5, r6
 8000648:	1e66      	subs	r6, r4, #1
 800064a:	41b4      	sbcs	r4, r6
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	469c      	mov	ip, r3
 8000650:	4325      	orrs	r5, r4
 8000652:	e044      	b.n	80006de <__aeabi_dadd+0x472>
 8000654:	4662      	mov	r2, ip
 8000656:	433a      	orrs	r2, r7
 8000658:	0015      	movs	r5, r2
 800065a:	1e6f      	subs	r7, r5, #1
 800065c:	41bd      	sbcs	r5, r7
 800065e:	444d      	add	r5, r9
 8000660:	454d      	cmp	r5, r9
 8000662:	4189      	sbcs	r1, r1
 8000664:	4249      	negs	r1, r1
 8000666:	4688      	mov	r8, r1
 8000668:	4498      	add	r8, r3
 800066a:	4643      	mov	r3, r8
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	d400      	bmi.n	8000672 <__aeabi_dadd+0x406>
 8000670:	e718      	b.n	80004a4 <__aeabi_dadd+0x238>
 8000672:	4bb1      	ldr	r3, [pc, #708]	; (8000938 <__aeabi_dadd+0x6cc>)
 8000674:	3601      	adds	r6, #1
 8000676:	429e      	cmp	r6, r3
 8000678:	d049      	beq.n	800070e <__aeabi_dadd+0x4a2>
 800067a:	4642      	mov	r2, r8
 800067c:	4baf      	ldr	r3, [pc, #700]	; (800093c <__aeabi_dadd+0x6d0>)
 800067e:	2101      	movs	r1, #1
 8000680:	401a      	ands	r2, r3
 8000682:	0013      	movs	r3, r2
 8000684:	086a      	lsrs	r2, r5, #1
 8000686:	400d      	ands	r5, r1
 8000688:	4315      	orrs	r5, r2
 800068a:	07d9      	lsls	r1, r3, #31
 800068c:	085b      	lsrs	r3, r3, #1
 800068e:	4698      	mov	r8, r3
 8000690:	430d      	orrs	r5, r1
 8000692:	e665      	b.n	8000360 <__aeabi_dadd+0xf4>
 8000694:	0018      	movs	r0, r3
 8000696:	3e1f      	subs	r6, #31
 8000698:	40f0      	lsrs	r0, r6
 800069a:	2a20      	cmp	r2, #32
 800069c:	d003      	beq.n	80006a6 <__aeabi_dadd+0x43a>
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	1a8a      	subs	r2, r1, r2
 80006a2:	4093      	lsls	r3, r2
 80006a4:	431d      	orrs	r5, r3
 80006a6:	1e69      	subs	r1, r5, #1
 80006a8:	418d      	sbcs	r5, r1
 80006aa:	2300      	movs	r3, #0
 80006ac:	2600      	movs	r6, #0
 80006ae:	4698      	mov	r8, r3
 80006b0:	4305      	orrs	r5, r0
 80006b2:	e6f7      	b.n	80004a4 <__aeabi_dadd+0x238>
 80006b4:	0011      	movs	r1, r2
 80006b6:	4665      	mov	r5, ip
 80006b8:	3920      	subs	r1, #32
 80006ba:	40cd      	lsrs	r5, r1
 80006bc:	2a20      	cmp	r2, #32
 80006be:	d004      	beq.n	80006ca <__aeabi_dadd+0x45e>
 80006c0:	2040      	movs	r0, #64	; 0x40
 80006c2:	4661      	mov	r1, ip
 80006c4:	1a82      	subs	r2, r0, r2
 80006c6:	4091      	lsls	r1, r2
 80006c8:	430f      	orrs	r7, r1
 80006ca:	0039      	movs	r1, r7
 80006cc:	1e4f      	subs	r7, r1, #1
 80006ce:	41b9      	sbcs	r1, r7
 80006d0:	4329      	orrs	r1, r5
 80006d2:	e60f      	b.n	80002f4 <__aeabi_dadd+0x88>
 80006d4:	464a      	mov	r2, r9
 80006d6:	4313      	orrs	r3, r2
 80006d8:	001d      	movs	r5, r3
 80006da:	1e6b      	subs	r3, r5, #1
 80006dc:	419d      	sbcs	r5, r3
 80006de:	1b7d      	subs	r5, r7, r5
 80006e0:	42af      	cmp	r7, r5
 80006e2:	419b      	sbcs	r3, r3
 80006e4:	4662      	mov	r2, ip
 80006e6:	425b      	negs	r3, r3
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4698      	mov	r8, r3
 80006ec:	4654      	mov	r4, sl
 80006ee:	000e      	movs	r6, r1
 80006f0:	e607      	b.n	8000302 <__aeabi_dadd+0x96>
 80006f2:	4648      	mov	r0, r9
 80006f4:	4318      	orrs	r0, r3
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x48e>
 80006f8:	e0b3      	b.n	8000862 <__aeabi_dadd+0x5f6>
 80006fa:	1e50      	subs	r0, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x496>
 8000700:	e10d      	b.n	800091e <__aeabi_dadd+0x6b2>
 8000702:	4d8d      	ldr	r5, [pc, #564]	; (8000938 <__aeabi_dadd+0x6cc>)
 8000704:	42aa      	cmp	r2, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x49e>
 8000708:	e0a5      	b.n	8000856 <__aeabi_dadd+0x5ea>
 800070a:	0002      	movs	r2, r0
 800070c:	e710      	b.n	8000530 <__aeabi_dadd+0x2c4>
 800070e:	0032      	movs	r2, r6
 8000710:	2300      	movs	r3, #0
 8000712:	2100      	movs	r1, #0
 8000714:	e644      	b.n	80003a0 <__aeabi_dadd+0x134>
 8000716:	2120      	movs	r1, #32
 8000718:	0038      	movs	r0, r7
 800071a:	1a89      	subs	r1, r1, r2
 800071c:	4665      	mov	r5, ip
 800071e:	408f      	lsls	r7, r1
 8000720:	408d      	lsls	r5, r1
 8000722:	40d0      	lsrs	r0, r2
 8000724:	1e79      	subs	r1, r7, #1
 8000726:	418f      	sbcs	r7, r1
 8000728:	4305      	orrs	r5, r0
 800072a:	433d      	orrs	r5, r7
 800072c:	4667      	mov	r7, ip
 800072e:	40d7      	lsrs	r7, r2
 8000730:	19db      	adds	r3, r3, r7
 8000732:	e794      	b.n	800065e <__aeabi_dadd+0x3f2>
 8000734:	4a80      	ldr	r2, [pc, #512]	; (8000938 <__aeabi_dadd+0x6cc>)
 8000736:	4290      	cmp	r0, r2
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x4d0>
 800073a:	e0ec      	b.n	8000916 <__aeabi_dadd+0x6aa>
 800073c:	0039      	movs	r1, r7
 800073e:	4449      	add	r1, r9
 8000740:	4549      	cmp	r1, r9
 8000742:	4192      	sbcs	r2, r2
 8000744:	4463      	add	r3, ip
 8000746:	4252      	negs	r2, r2
 8000748:	189b      	adds	r3, r3, r2
 800074a:	07dd      	lsls	r5, r3, #31
 800074c:	0849      	lsrs	r1, r1, #1
 800074e:	085b      	lsrs	r3, r3, #1
 8000750:	4698      	mov	r8, r3
 8000752:	0006      	movs	r6, r0
 8000754:	430d      	orrs	r5, r1
 8000756:	e6a5      	b.n	80004a4 <__aeabi_dadd+0x238>
 8000758:	464a      	mov	r2, r9
 800075a:	1abd      	subs	r5, r7, r2
 800075c:	42af      	cmp	r7, r5
 800075e:	4189      	sbcs	r1, r1
 8000760:	4662      	mov	r2, ip
 8000762:	4249      	negs	r1, r1
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	1a5b      	subs	r3, r3, r1
 8000768:	4698      	mov	r8, r3
 800076a:	4654      	mov	r4, sl
 800076c:	e5d1      	b.n	8000312 <__aeabi_dadd+0xa6>
 800076e:	076c      	lsls	r4, r5, #29
 8000770:	08f9      	lsrs	r1, r7, #3
 8000772:	4321      	orrs	r1, r4
 8000774:	08eb      	lsrs	r3, r5, #3
 8000776:	0004      	movs	r4, r0
 8000778:	e69d      	b.n	80004b6 <__aeabi_dadd+0x24a>
 800077a:	464a      	mov	r2, r9
 800077c:	431a      	orrs	r2, r3
 800077e:	d175      	bne.n	800086c <__aeabi_dadd+0x600>
 8000780:	4661      	mov	r1, ip
 8000782:	4339      	orrs	r1, r7
 8000784:	d114      	bne.n	80007b0 <__aeabi_dadd+0x544>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	2400      	movs	r4, #0
 800078a:	031b      	lsls	r3, r3, #12
 800078c:	e6bc      	b.n	8000508 <__aeabi_dadd+0x29c>
 800078e:	464a      	mov	r2, r9
 8000790:	1bd5      	subs	r5, r2, r7
 8000792:	45a9      	cmp	r9, r5
 8000794:	4189      	sbcs	r1, r1
 8000796:	4662      	mov	r2, ip
 8000798:	4249      	negs	r1, r1
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	4698      	mov	r8, r3
 80007a0:	2601      	movs	r6, #1
 80007a2:	e5ae      	b.n	8000302 <__aeabi_dadd+0x96>
 80007a4:	464a      	mov	r2, r9
 80007a6:	08d1      	lsrs	r1, r2, #3
 80007a8:	075a      	lsls	r2, r3, #29
 80007aa:	4311      	orrs	r1, r2
 80007ac:	08db      	lsrs	r3, r3, #3
 80007ae:	e6a7      	b.n	8000500 <__aeabi_dadd+0x294>
 80007b0:	4663      	mov	r3, ip
 80007b2:	08f9      	lsrs	r1, r7, #3
 80007b4:	075a      	lsls	r2, r3, #29
 80007b6:	4654      	mov	r4, sl
 80007b8:	4311      	orrs	r1, r2
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	e6a0      	b.n	8000500 <__aeabi_dadd+0x294>
 80007be:	464a      	mov	r2, r9
 80007c0:	4313      	orrs	r3, r2
 80007c2:	001d      	movs	r5, r3
 80007c4:	1e6b      	subs	r3, r5, #1
 80007c6:	419d      	sbcs	r5, r3
 80007c8:	e6c7      	b.n	800055a <__aeabi_dadd+0x2ee>
 80007ca:	0014      	movs	r4, r2
 80007cc:	001e      	movs	r6, r3
 80007ce:	3c20      	subs	r4, #32
 80007d0:	40e6      	lsrs	r6, r4
 80007d2:	2a20      	cmp	r2, #32
 80007d4:	d005      	beq.n	80007e2 <__aeabi_dadd+0x576>
 80007d6:	2440      	movs	r4, #64	; 0x40
 80007d8:	1aa2      	subs	r2, r4, r2
 80007da:	4093      	lsls	r3, r2
 80007dc:	464a      	mov	r2, r9
 80007de:	431a      	orrs	r2, r3
 80007e0:	4691      	mov	r9, r2
 80007e2:	464d      	mov	r5, r9
 80007e4:	1e6b      	subs	r3, r5, #1
 80007e6:	419d      	sbcs	r5, r3
 80007e8:	4335      	orrs	r5, r6
 80007ea:	e778      	b.n	80006de <__aeabi_dadd+0x472>
 80007ec:	464a      	mov	r2, r9
 80007ee:	431a      	orrs	r2, r3
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x588>
 80007f2:	e66b      	b.n	80004cc <__aeabi_dadd+0x260>
 80007f4:	076b      	lsls	r3, r5, #29
 80007f6:	08f9      	lsrs	r1, r7, #3
 80007f8:	4319      	orrs	r1, r3
 80007fa:	08eb      	lsrs	r3, r5, #3
 80007fc:	e680      	b.n	8000500 <__aeabi_dadd+0x294>
 80007fe:	4661      	mov	r1, ip
 8000800:	4339      	orrs	r1, r7
 8000802:	d054      	beq.n	80008ae <__aeabi_dadd+0x642>
 8000804:	4663      	mov	r3, ip
 8000806:	08f9      	lsrs	r1, r7, #3
 8000808:	075c      	lsls	r4, r3, #29
 800080a:	4321      	orrs	r1, r4
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	0004      	movs	r4, r0
 8000810:	e654      	b.n	80004bc <__aeabi_dadd+0x250>
 8000812:	464a      	mov	r2, r9
 8000814:	1abd      	subs	r5, r7, r2
 8000816:	42af      	cmp	r7, r5
 8000818:	4189      	sbcs	r1, r1
 800081a:	4662      	mov	r2, ip
 800081c:	4249      	negs	r1, r1
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	1a5b      	subs	r3, r3, r1
 8000822:	4698      	mov	r8, r3
 8000824:	0004      	movs	r4, r0
 8000826:	2601      	movs	r6, #1
 8000828:	e56b      	b.n	8000302 <__aeabi_dadd+0x96>
 800082a:	464a      	mov	r2, r9
 800082c:	1bd5      	subs	r5, r2, r7
 800082e:	45a9      	cmp	r9, r5
 8000830:	4189      	sbcs	r1, r1
 8000832:	4662      	mov	r2, ip
 8000834:	4249      	negs	r1, r1
 8000836:	1a9a      	subs	r2, r3, r2
 8000838:	1a52      	subs	r2, r2, r1
 800083a:	4690      	mov	r8, r2
 800083c:	0212      	lsls	r2, r2, #8
 800083e:	d532      	bpl.n	80008a6 <__aeabi_dadd+0x63a>
 8000840:	464a      	mov	r2, r9
 8000842:	1abd      	subs	r5, r7, r2
 8000844:	42af      	cmp	r7, r5
 8000846:	4189      	sbcs	r1, r1
 8000848:	4662      	mov	r2, ip
 800084a:	4249      	negs	r1, r1
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	1a5b      	subs	r3, r3, r1
 8000850:	4698      	mov	r8, r3
 8000852:	0004      	movs	r4, r0
 8000854:	e584      	b.n	8000360 <__aeabi_dadd+0xf4>
 8000856:	4663      	mov	r3, ip
 8000858:	08f9      	lsrs	r1, r7, #3
 800085a:	075a      	lsls	r2, r3, #29
 800085c:	4311      	orrs	r1, r2
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x294>
 8000862:	08f9      	lsrs	r1, r7, #3
 8000864:	0768      	lsls	r0, r5, #29
 8000866:	4301      	orrs	r1, r0
 8000868:	08eb      	lsrs	r3, r5, #3
 800086a:	e624      	b.n	80004b6 <__aeabi_dadd+0x24a>
 800086c:	4662      	mov	r2, ip
 800086e:	433a      	orrs	r2, r7
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x608>
 8000872:	e698      	b.n	80005a6 <__aeabi_dadd+0x33a>
 8000874:	464a      	mov	r2, r9
 8000876:	08d1      	lsrs	r1, r2, #3
 8000878:	075a      	lsls	r2, r3, #29
 800087a:	4311      	orrs	r1, r2
 800087c:	08da      	lsrs	r2, r3, #3
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	031b      	lsls	r3, r3, #12
 8000882:	421a      	tst	r2, r3
 8000884:	d008      	beq.n	8000898 <__aeabi_dadd+0x62c>
 8000886:	4660      	mov	r0, ip
 8000888:	08c5      	lsrs	r5, r0, #3
 800088a:	421d      	tst	r5, r3
 800088c:	d104      	bne.n	8000898 <__aeabi_dadd+0x62c>
 800088e:	4654      	mov	r4, sl
 8000890:	002a      	movs	r2, r5
 8000892:	08f9      	lsrs	r1, r7, #3
 8000894:	0743      	lsls	r3, r0, #29
 8000896:	4319      	orrs	r1, r3
 8000898:	0f4b      	lsrs	r3, r1, #29
 800089a:	00c9      	lsls	r1, r1, #3
 800089c:	075b      	lsls	r3, r3, #29
 800089e:	08c9      	lsrs	r1, r1, #3
 80008a0:	4319      	orrs	r1, r3
 80008a2:	0013      	movs	r3, r2
 80008a4:	e62c      	b.n	8000500 <__aeabi_dadd+0x294>
 80008a6:	4641      	mov	r1, r8
 80008a8:	4329      	orrs	r1, r5
 80008aa:	d000      	beq.n	80008ae <__aeabi_dadd+0x642>
 80008ac:	e5fa      	b.n	80004a4 <__aeabi_dadd+0x238>
 80008ae:	2300      	movs	r3, #0
 80008b0:	000a      	movs	r2, r1
 80008b2:	2400      	movs	r4, #0
 80008b4:	e602      	b.n	80004bc <__aeabi_dadd+0x250>
 80008b6:	076b      	lsls	r3, r5, #29
 80008b8:	08f9      	lsrs	r1, r7, #3
 80008ba:	4319      	orrs	r1, r3
 80008bc:	08eb      	lsrs	r3, r5, #3
 80008be:	e5fd      	b.n	80004bc <__aeabi_dadd+0x250>
 80008c0:	4663      	mov	r3, ip
 80008c2:	08f9      	lsrs	r1, r7, #3
 80008c4:	075b      	lsls	r3, r3, #29
 80008c6:	4319      	orrs	r1, r3
 80008c8:	4663      	mov	r3, ip
 80008ca:	0004      	movs	r4, r0
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	e617      	b.n	8000500 <__aeabi_dadd+0x294>
 80008d0:	003d      	movs	r5, r7
 80008d2:	444d      	add	r5, r9
 80008d4:	4463      	add	r3, ip
 80008d6:	454d      	cmp	r5, r9
 80008d8:	4189      	sbcs	r1, r1
 80008da:	4698      	mov	r8, r3
 80008dc:	4249      	negs	r1, r1
 80008de:	4488      	add	r8, r1
 80008e0:	4643      	mov	r3, r8
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_dadd+0x67c>
 80008e6:	e5dd      	b.n	80004a4 <__aeabi_dadd+0x238>
 80008e8:	4642      	mov	r2, r8
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <__aeabi_dadd+0x6d0>)
 80008ec:	2601      	movs	r6, #1
 80008ee:	401a      	ands	r2, r3
 80008f0:	4690      	mov	r8, r2
 80008f2:	e5d7      	b.n	80004a4 <__aeabi_dadd+0x238>
 80008f4:	0010      	movs	r0, r2
 80008f6:	001e      	movs	r6, r3
 80008f8:	3820      	subs	r0, #32
 80008fa:	40c6      	lsrs	r6, r0
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d005      	beq.n	800090c <__aeabi_dadd+0x6a0>
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	1a82      	subs	r2, r0, r2
 8000904:	4093      	lsls	r3, r2
 8000906:	464a      	mov	r2, r9
 8000908:	431a      	orrs	r2, r3
 800090a:	4691      	mov	r9, r2
 800090c:	464d      	mov	r5, r9
 800090e:	1e6b      	subs	r3, r5, #1
 8000910:	419d      	sbcs	r5, r3
 8000912:	4335      	orrs	r5, r6
 8000914:	e621      	b.n	800055a <__aeabi_dadd+0x2ee>
 8000916:	0002      	movs	r2, r0
 8000918:	2300      	movs	r3, #0
 800091a:	2100      	movs	r1, #0
 800091c:	e540      	b.n	80003a0 <__aeabi_dadd+0x134>
 800091e:	464a      	mov	r2, r9
 8000920:	19d5      	adds	r5, r2, r7
 8000922:	42bd      	cmp	r5, r7
 8000924:	4189      	sbcs	r1, r1
 8000926:	4463      	add	r3, ip
 8000928:	4698      	mov	r8, r3
 800092a:	4249      	negs	r1, r1
 800092c:	4488      	add	r8, r1
 800092e:	e5b3      	b.n	8000498 <__aeabi_dadd+0x22c>
 8000930:	2100      	movs	r1, #0
 8000932:	4a01      	ldr	r2, [pc, #4]	; (8000938 <__aeabi_dadd+0x6cc>)
 8000934:	000b      	movs	r3, r1
 8000936:	e533      	b.n	80003a0 <__aeabi_dadd+0x134>
 8000938:	000007ff 	.word	0x000007ff
 800093c:	ff7fffff 	.word	0xff7fffff

08000940 <__aeabi_dmul>:
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000942:	4657      	mov	r7, sl
 8000944:	464e      	mov	r6, r9
 8000946:	4645      	mov	r5, r8
 8000948:	46de      	mov	lr, fp
 800094a:	b5e0      	push	{r5, r6, r7, lr}
 800094c:	4698      	mov	r8, r3
 800094e:	030c      	lsls	r4, r1, #12
 8000950:	004b      	lsls	r3, r1, #1
 8000952:	0006      	movs	r6, r0
 8000954:	4692      	mov	sl, r2
 8000956:	b087      	sub	sp, #28
 8000958:	0b24      	lsrs	r4, r4, #12
 800095a:	0d5b      	lsrs	r3, r3, #21
 800095c:	0fcf      	lsrs	r7, r1, #31
 800095e:	2b00      	cmp	r3, #0
 8000960:	d06c      	beq.n	8000a3c <__aeabi_dmul+0xfc>
 8000962:	4add      	ldr	r2, [pc, #884]	; (8000cd8 <__aeabi_dmul+0x398>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d100      	bne.n	800096a <__aeabi_dmul+0x2a>
 8000968:	e086      	b.n	8000a78 <__aeabi_dmul+0x138>
 800096a:	0f42      	lsrs	r2, r0, #29
 800096c:	00e4      	lsls	r4, r4, #3
 800096e:	4314      	orrs	r4, r2
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0412      	lsls	r2, r2, #16
 8000974:	4314      	orrs	r4, r2
 8000976:	4ad9      	ldr	r2, [pc, #868]	; (8000cdc <__aeabi_dmul+0x39c>)
 8000978:	00c5      	lsls	r5, r0, #3
 800097a:	4694      	mov	ip, r2
 800097c:	4463      	add	r3, ip
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	4699      	mov	r9, r3
 8000984:	469b      	mov	fp, r3
 8000986:	4643      	mov	r3, r8
 8000988:	4642      	mov	r2, r8
 800098a:	031e      	lsls	r6, r3, #12
 800098c:	0fd2      	lsrs	r2, r2, #31
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4650      	mov	r0, sl
 8000992:	4690      	mov	r8, r2
 8000994:	0b36      	lsrs	r6, r6, #12
 8000996:	0d5b      	lsrs	r3, r3, #21
 8000998:	d100      	bne.n	800099c <__aeabi_dmul+0x5c>
 800099a:	e078      	b.n	8000a8e <__aeabi_dmul+0x14e>
 800099c:	4ace      	ldr	r2, [pc, #824]	; (8000cd8 <__aeabi_dmul+0x398>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d01d      	beq.n	80009de <__aeabi_dmul+0x9e>
 80009a2:	49ce      	ldr	r1, [pc, #824]	; (8000cdc <__aeabi_dmul+0x39c>)
 80009a4:	0f42      	lsrs	r2, r0, #29
 80009a6:	468c      	mov	ip, r1
 80009a8:	9900      	ldr	r1, [sp, #0]
 80009aa:	4463      	add	r3, ip
 80009ac:	00f6      	lsls	r6, r6, #3
 80009ae:	468c      	mov	ip, r1
 80009b0:	4316      	orrs	r6, r2
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	449c      	add	ip, r3
 80009b6:	0412      	lsls	r2, r2, #16
 80009b8:	4663      	mov	r3, ip
 80009ba:	4316      	orrs	r6, r2
 80009bc:	00c2      	lsls	r2, r0, #3
 80009be:	2000      	movs	r0, #0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	9900      	ldr	r1, [sp, #0]
 80009c4:	4643      	mov	r3, r8
 80009c6:	3101      	adds	r1, #1
 80009c8:	468c      	mov	ip, r1
 80009ca:	4649      	mov	r1, r9
 80009cc:	407b      	eors	r3, r7
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	290f      	cmp	r1, #15
 80009d2:	d900      	bls.n	80009d6 <__aeabi_dmul+0x96>
 80009d4:	e07e      	b.n	8000ad4 <__aeabi_dmul+0x194>
 80009d6:	4bc2      	ldr	r3, [pc, #776]	; (8000ce0 <__aeabi_dmul+0x3a0>)
 80009d8:	0089      	lsls	r1, r1, #2
 80009da:	5859      	ldr	r1, [r3, r1]
 80009dc:	468f      	mov	pc, r1
 80009de:	4652      	mov	r2, sl
 80009e0:	9b00      	ldr	r3, [sp, #0]
 80009e2:	4332      	orrs	r2, r6
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dmul+0xa8>
 80009e6:	e156      	b.n	8000c96 <__aeabi_dmul+0x356>
 80009e8:	49bb      	ldr	r1, [pc, #748]	; (8000cd8 <__aeabi_dmul+0x398>)
 80009ea:	2600      	movs	r6, #0
 80009ec:	468c      	mov	ip, r1
 80009ee:	4463      	add	r3, ip
 80009f0:	4649      	mov	r1, r9
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2302      	movs	r3, #2
 80009f6:	4319      	orrs	r1, r3
 80009f8:	4689      	mov	r9, r1
 80009fa:	2002      	movs	r0, #2
 80009fc:	e7e1      	b.n	80009c2 <__aeabi_dmul+0x82>
 80009fe:	4643      	mov	r3, r8
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	0034      	movs	r4, r6
 8000a04:	0015      	movs	r5, r2
 8000a06:	4683      	mov	fp, r0
 8000a08:	465b      	mov	r3, fp
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d05e      	beq.n	8000acc <__aeabi_dmul+0x18c>
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dmul+0xd4>
 8000a12:	e1f3      	b.n	8000dfc <__aeabi_dmul+0x4bc>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d000      	beq.n	8000a1a <__aeabi_dmul+0xda>
 8000a18:	e118      	b.n	8000c4c <__aeabi_dmul+0x30c>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	2500      	movs	r5, #0
 8000a20:	9b01      	ldr	r3, [sp, #4]
 8000a22:	0512      	lsls	r2, r2, #20
 8000a24:	4322      	orrs	r2, r4
 8000a26:	07db      	lsls	r3, r3, #31
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	0028      	movs	r0, r5
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	b007      	add	sp, #28
 8000a30:	bcf0      	pop	{r4, r5, r6, r7}
 8000a32:	46bb      	mov	fp, r7
 8000a34:	46b2      	mov	sl, r6
 8000a36:	46a9      	mov	r9, r5
 8000a38:	46a0      	mov	r8, r4
 8000a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3c:	0025      	movs	r5, r4
 8000a3e:	4305      	orrs	r5, r0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dmul+0x104>
 8000a42:	e141      	b.n	8000cc8 <__aeabi_dmul+0x388>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dmul+0x10a>
 8000a48:	e1ad      	b.n	8000da6 <__aeabi_dmul+0x466>
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f000 fe1a 	bl	8001684 <__clzsi2>
 8000a50:	0001      	movs	r1, r0
 8000a52:	0002      	movs	r2, r0
 8000a54:	390b      	subs	r1, #11
 8000a56:	231d      	movs	r3, #29
 8000a58:	0010      	movs	r0, r2
 8000a5a:	1a5b      	subs	r3, r3, r1
 8000a5c:	0031      	movs	r1, r6
 8000a5e:	0035      	movs	r5, r6
 8000a60:	3808      	subs	r0, #8
 8000a62:	4084      	lsls	r4, r0
 8000a64:	40d9      	lsrs	r1, r3
 8000a66:	4085      	lsls	r5, r0
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	489e      	ldr	r0, [pc, #632]	; (8000ce4 <__aeabi_dmul+0x3a4>)
 8000a6c:	1a83      	subs	r3, r0, r2
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	4699      	mov	r9, r3
 8000a74:	469b      	mov	fp, r3
 8000a76:	e786      	b.n	8000986 <__aeabi_dmul+0x46>
 8000a78:	0005      	movs	r5, r0
 8000a7a:	4325      	orrs	r5, r4
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_dmul+0x140>
 8000a7e:	e11c      	b.n	8000cba <__aeabi_dmul+0x37a>
 8000a80:	2208      	movs	r2, #8
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	2400      	movs	r4, #0
 8000a88:	4691      	mov	r9, r2
 8000a8a:	469b      	mov	fp, r3
 8000a8c:	e77b      	b.n	8000986 <__aeabi_dmul+0x46>
 8000a8e:	4652      	mov	r2, sl
 8000a90:	4332      	orrs	r2, r6
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dmul+0x156>
 8000a94:	e10a      	b.n	8000cac <__aeabi_dmul+0x36c>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dmul+0x15c>
 8000a9a:	e176      	b.n	8000d8a <__aeabi_dmul+0x44a>
 8000a9c:	0030      	movs	r0, r6
 8000a9e:	f000 fdf1 	bl	8001684 <__clzsi2>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	3a0b      	subs	r2, #11
 8000aa6:	231d      	movs	r3, #29
 8000aa8:	0001      	movs	r1, r0
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	4652      	mov	r2, sl
 8000aae:	3908      	subs	r1, #8
 8000ab0:	40da      	lsrs	r2, r3
 8000ab2:	408e      	lsls	r6, r1
 8000ab4:	4316      	orrs	r6, r2
 8000ab6:	4652      	mov	r2, sl
 8000ab8:	408a      	lsls	r2, r1
 8000aba:	9b00      	ldr	r3, [sp, #0]
 8000abc:	4989      	ldr	r1, [pc, #548]	; (8000ce4 <__aeabi_dmul+0x3a4>)
 8000abe:	1a18      	subs	r0, r3, r0
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4463      	add	r3, ip
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	e77a      	b.n	80009c2 <__aeabi_dmul+0x82>
 8000acc:	2400      	movs	r4, #0
 8000ace:	2500      	movs	r5, #0
 8000ad0:	4a81      	ldr	r2, [pc, #516]	; (8000cd8 <__aeabi_dmul+0x398>)
 8000ad2:	e7a5      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000ad4:	0c2f      	lsrs	r7, r5, #16
 8000ad6:	042d      	lsls	r5, r5, #16
 8000ad8:	0c2d      	lsrs	r5, r5, #16
 8000ada:	002b      	movs	r3, r5
 8000adc:	0c11      	lsrs	r1, r2, #16
 8000ade:	0412      	lsls	r2, r2, #16
 8000ae0:	0c12      	lsrs	r2, r2, #16
 8000ae2:	4353      	muls	r3, r2
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	0028      	movs	r0, r5
 8000aea:	437b      	muls	r3, r7
 8000aec:	4699      	mov	r9, r3
 8000aee:	4348      	muls	r0, r1
 8000af0:	4448      	add	r0, r9
 8000af2:	4683      	mov	fp, r0
 8000af4:	4640      	mov	r0, r8
 8000af6:	000b      	movs	r3, r1
 8000af8:	0c00      	lsrs	r0, r0, #16
 8000afa:	4682      	mov	sl, r0
 8000afc:	4658      	mov	r0, fp
 8000afe:	437b      	muls	r3, r7
 8000b00:	4450      	add	r0, sl
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	4581      	cmp	r9, r0
 8000b06:	d906      	bls.n	8000b16 <__aeabi_dmul+0x1d6>
 8000b08:	469a      	mov	sl, r3
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	025b      	lsls	r3, r3, #9
 8000b0e:	4699      	mov	r9, r3
 8000b10:	44ca      	add	sl, r9
 8000b12:	4653      	mov	r3, sl
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	0c03      	lsrs	r3, r0, #16
 8000b18:	469b      	mov	fp, r3
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	0400      	lsls	r0, r0, #16
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	4698      	mov	r8, r3
 8000b24:	0003      	movs	r3, r0
 8000b26:	4443      	add	r3, r8
 8000b28:	9304      	str	r3, [sp, #16]
 8000b2a:	0c33      	lsrs	r3, r6, #16
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	002b      	movs	r3, r5
 8000b30:	0436      	lsls	r6, r6, #16
 8000b32:	0c36      	lsrs	r6, r6, #16
 8000b34:	4373      	muls	r3, r6
 8000b36:	4698      	mov	r8, r3
 8000b38:	0033      	movs	r3, r6
 8000b3a:	437b      	muls	r3, r7
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	464b      	mov	r3, r9
 8000b40:	435d      	muls	r5, r3
 8000b42:	435f      	muls	r7, r3
 8000b44:	4643      	mov	r3, r8
 8000b46:	4455      	add	r5, sl
 8000b48:	0c18      	lsrs	r0, r3, #16
 8000b4a:	1940      	adds	r0, r0, r5
 8000b4c:	4582      	cmp	sl, r0
 8000b4e:	d903      	bls.n	8000b58 <__aeabi_dmul+0x218>
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	025b      	lsls	r3, r3, #9
 8000b54:	469a      	mov	sl, r3
 8000b56:	4457      	add	r7, sl
 8000b58:	0c05      	lsrs	r5, r0, #16
 8000b5a:	19eb      	adds	r3, r5, r7
 8000b5c:	9305      	str	r3, [sp, #20]
 8000b5e:	4643      	mov	r3, r8
 8000b60:	041d      	lsls	r5, r3, #16
 8000b62:	0c2d      	lsrs	r5, r5, #16
 8000b64:	0400      	lsls	r0, r0, #16
 8000b66:	1940      	adds	r0, r0, r5
 8000b68:	0c25      	lsrs	r5, r4, #16
 8000b6a:	0424      	lsls	r4, r4, #16
 8000b6c:	0c24      	lsrs	r4, r4, #16
 8000b6e:	0027      	movs	r7, r4
 8000b70:	4357      	muls	r7, r2
 8000b72:	436a      	muls	r2, r5
 8000b74:	4690      	mov	r8, r2
 8000b76:	002a      	movs	r2, r5
 8000b78:	0c3b      	lsrs	r3, r7, #16
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	434a      	muls	r2, r1
 8000b7e:	4361      	muls	r1, r4
 8000b80:	4441      	add	r1, r8
 8000b82:	4451      	add	r1, sl
 8000b84:	4483      	add	fp, r0
 8000b86:	4588      	cmp	r8, r1
 8000b88:	d903      	bls.n	8000b92 <__aeabi_dmul+0x252>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	4698      	mov	r8, r3
 8000b90:	4442      	add	r2, r8
 8000b92:	043f      	lsls	r7, r7, #16
 8000b94:	0c0b      	lsrs	r3, r1, #16
 8000b96:	0c3f      	lsrs	r7, r7, #16
 8000b98:	0409      	lsls	r1, r1, #16
 8000b9a:	19c9      	adds	r1, r1, r7
 8000b9c:	0027      	movs	r7, r4
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	4377      	muls	r7, r6
 8000ba4:	435c      	muls	r4, r3
 8000ba6:	436e      	muls	r6, r5
 8000ba8:	435d      	muls	r5, r3
 8000baa:	0c3b      	lsrs	r3, r7, #16
 8000bac:	4699      	mov	r9, r3
 8000bae:	19a4      	adds	r4, r4, r6
 8000bb0:	444c      	add	r4, r9
 8000bb2:	4442      	add	r2, r8
 8000bb4:	9503      	str	r5, [sp, #12]
 8000bb6:	42a6      	cmp	r6, r4
 8000bb8:	d904      	bls.n	8000bc4 <__aeabi_dmul+0x284>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	4445      	add	r5, r8
 8000bc2:	9503      	str	r5, [sp, #12]
 8000bc4:	9b02      	ldr	r3, [sp, #8]
 8000bc6:	043f      	lsls	r7, r7, #16
 8000bc8:	445b      	add	r3, fp
 8000bca:	001e      	movs	r6, r3
 8000bcc:	4283      	cmp	r3, r0
 8000bce:	4180      	sbcs	r0, r0
 8000bd0:	0423      	lsls	r3, r4, #16
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	9b05      	ldr	r3, [sp, #20]
 8000bd6:	0c3f      	lsrs	r7, r7, #16
 8000bd8:	4447      	add	r7, r8
 8000bda:	4698      	mov	r8, r3
 8000bdc:	1876      	adds	r6, r6, r1
 8000bde:	428e      	cmp	r6, r1
 8000be0:	4189      	sbcs	r1, r1
 8000be2:	4447      	add	r7, r8
 8000be4:	4240      	negs	r0, r0
 8000be6:	183d      	adds	r5, r7, r0
 8000be8:	46a8      	mov	r8, r5
 8000bea:	4693      	mov	fp, r2
 8000bec:	4249      	negs	r1, r1
 8000bee:	468a      	mov	sl, r1
 8000bf0:	44c3      	add	fp, r8
 8000bf2:	429f      	cmp	r7, r3
 8000bf4:	41bf      	sbcs	r7, r7
 8000bf6:	4580      	cmp	r8, r0
 8000bf8:	4180      	sbcs	r0, r0
 8000bfa:	9b03      	ldr	r3, [sp, #12]
 8000bfc:	44da      	add	sl, fp
 8000bfe:	4698      	mov	r8, r3
 8000c00:	4653      	mov	r3, sl
 8000c02:	4240      	negs	r0, r0
 8000c04:	427f      	negs	r7, r7
 8000c06:	4307      	orrs	r7, r0
 8000c08:	0c24      	lsrs	r4, r4, #16
 8000c0a:	4593      	cmp	fp, r2
 8000c0c:	4192      	sbcs	r2, r2
 8000c0e:	458a      	cmp	sl, r1
 8000c10:	4189      	sbcs	r1, r1
 8000c12:	193f      	adds	r7, r7, r4
 8000c14:	0ddc      	lsrs	r4, r3, #23
 8000c16:	9b04      	ldr	r3, [sp, #16]
 8000c18:	0275      	lsls	r5, r6, #9
 8000c1a:	431d      	orrs	r5, r3
 8000c1c:	1e68      	subs	r0, r5, #1
 8000c1e:	4185      	sbcs	r5, r0
 8000c20:	4653      	mov	r3, sl
 8000c22:	4252      	negs	r2, r2
 8000c24:	4249      	negs	r1, r1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	18bf      	adds	r7, r7, r2
 8000c2a:	4447      	add	r7, r8
 8000c2c:	0df6      	lsrs	r6, r6, #23
 8000c2e:	027f      	lsls	r7, r7, #9
 8000c30:	4335      	orrs	r5, r6
 8000c32:	025a      	lsls	r2, r3, #9
 8000c34:	433c      	orrs	r4, r7
 8000c36:	4315      	orrs	r5, r2
 8000c38:	01fb      	lsls	r3, r7, #7
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_dmul+0x2fe>
 8000c3c:	e0c1      	b.n	8000dc2 <__aeabi_dmul+0x482>
 8000c3e:	2101      	movs	r1, #1
 8000c40:	086a      	lsrs	r2, r5, #1
 8000c42:	400d      	ands	r5, r1
 8000c44:	4315      	orrs	r5, r2
 8000c46:	07e2      	lsls	r2, r4, #31
 8000c48:	4315      	orrs	r5, r2
 8000c4a:	0864      	lsrs	r4, r4, #1
 8000c4c:	4926      	ldr	r1, [pc, #152]	; (8000ce8 <__aeabi_dmul+0x3a8>)
 8000c4e:	4461      	add	r1, ip
 8000c50:	2900      	cmp	r1, #0
 8000c52:	dd56      	ble.n	8000d02 <__aeabi_dmul+0x3c2>
 8000c54:	076b      	lsls	r3, r5, #29
 8000c56:	d009      	beq.n	8000c6c <__aeabi_dmul+0x32c>
 8000c58:	220f      	movs	r2, #15
 8000c5a:	402a      	ands	r2, r5
 8000c5c:	2a04      	cmp	r2, #4
 8000c5e:	d005      	beq.n	8000c6c <__aeabi_dmul+0x32c>
 8000c60:	1d2a      	adds	r2, r5, #4
 8000c62:	42aa      	cmp	r2, r5
 8000c64:	41ad      	sbcs	r5, r5
 8000c66:	426d      	negs	r5, r5
 8000c68:	1964      	adds	r4, r4, r5
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	01e3      	lsls	r3, r4, #7
 8000c6e:	d504      	bpl.n	8000c7a <__aeabi_dmul+0x33a>
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <__aeabi_dmul+0x3ac>)
 8000c74:	00c9      	lsls	r1, r1, #3
 8000c76:	4014      	ands	r4, r2
 8000c78:	4461      	add	r1, ip
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <__aeabi_dmul+0x3b0>)
 8000c7c:	4291      	cmp	r1, r2
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_dmul+0x342>
 8000c80:	e724      	b.n	8000acc <__aeabi_dmul+0x18c>
 8000c82:	0762      	lsls	r2, r4, #29
 8000c84:	08ed      	lsrs	r5, r5, #3
 8000c86:	0264      	lsls	r4, r4, #9
 8000c88:	0549      	lsls	r1, r1, #21
 8000c8a:	4315      	orrs	r5, r2
 8000c8c:	0b24      	lsrs	r4, r4, #12
 8000c8e:	0d4a      	lsrs	r2, r1, #21
 8000c90:	e6c6      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000c92:	9701      	str	r7, [sp, #4]
 8000c94:	e6b8      	b.n	8000a08 <__aeabi_dmul+0xc8>
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <__aeabi_dmul+0x398>)
 8000c98:	2003      	movs	r0, #3
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	4691      	mov	r9, r2
 8000ca8:	4652      	mov	r2, sl
 8000caa:	e68a      	b.n	80009c2 <__aeabi_dmul+0x82>
 8000cac:	4649      	mov	r1, r9
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	4689      	mov	r9, r1
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	e683      	b.n	80009c2 <__aeabi_dmul+0x82>
 8000cba:	220c      	movs	r2, #12
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	0005      	movs	r5, r0
 8000cc2:	4691      	mov	r9, r2
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	e65e      	b.n	8000986 <__aeabi_dmul+0x46>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	4699      	mov	r9, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	469b      	mov	fp, r3
 8000cd6:	e656      	b.n	8000986 <__aeabi_dmul+0x46>
 8000cd8:	000007ff 	.word	0x000007ff
 8000cdc:	fffffc01 	.word	0xfffffc01
 8000ce0:	08007fd4 	.word	0x08007fd4
 8000ce4:	fffffc0d 	.word	0xfffffc0d
 8000ce8:	000003ff 	.word	0x000003ff
 8000cec:	feffffff 	.word	0xfeffffff
 8000cf0:	000007fe 	.word	0x000007fe
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2480      	movs	r4, #128	; 0x80
 8000cf8:	2500      	movs	r5, #0
 8000cfa:	4a44      	ldr	r2, [pc, #272]	; (8000e0c <__aeabi_dmul+0x4cc>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	0324      	lsls	r4, r4, #12
 8000d00:	e68e      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000d02:	2001      	movs	r0, #1
 8000d04:	1a40      	subs	r0, r0, r1
 8000d06:	2838      	cmp	r0, #56	; 0x38
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_dmul+0x3cc>
 8000d0a:	e686      	b.n	8000a1a <__aeabi_dmul+0xda>
 8000d0c:	281f      	cmp	r0, #31
 8000d0e:	dd5b      	ble.n	8000dc8 <__aeabi_dmul+0x488>
 8000d10:	221f      	movs	r2, #31
 8000d12:	0023      	movs	r3, r4
 8000d14:	4252      	negs	r2, r2
 8000d16:	1a51      	subs	r1, r2, r1
 8000d18:	40cb      	lsrs	r3, r1
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	2820      	cmp	r0, #32
 8000d1e:	d003      	beq.n	8000d28 <__aeabi_dmul+0x3e8>
 8000d20:	4a3b      	ldr	r2, [pc, #236]	; (8000e10 <__aeabi_dmul+0x4d0>)
 8000d22:	4462      	add	r2, ip
 8000d24:	4094      	lsls	r4, r2
 8000d26:	4325      	orrs	r5, r4
 8000d28:	1e6a      	subs	r2, r5, #1
 8000d2a:	4195      	sbcs	r5, r2
 8000d2c:	002a      	movs	r2, r5
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	2107      	movs	r1, #7
 8000d32:	000d      	movs	r5, r1
 8000d34:	2400      	movs	r4, #0
 8000d36:	4015      	ands	r5, r2
 8000d38:	4211      	tst	r1, r2
 8000d3a:	d05b      	beq.n	8000df4 <__aeabi_dmul+0x4b4>
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	2400      	movs	r4, #0
 8000d40:	4011      	ands	r1, r2
 8000d42:	2904      	cmp	r1, #4
 8000d44:	d053      	beq.n	8000dee <__aeabi_dmul+0x4ae>
 8000d46:	1d11      	adds	r1, r2, #4
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	4192      	sbcs	r2, r2
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	18a4      	adds	r4, r4, r2
 8000d50:	000a      	movs	r2, r1
 8000d52:	0223      	lsls	r3, r4, #8
 8000d54:	d54b      	bpl.n	8000dee <__aeabi_dmul+0x4ae>
 8000d56:	2201      	movs	r2, #1
 8000d58:	2400      	movs	r4, #0
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	e660      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	031b      	lsls	r3, r3, #12
 8000d62:	421c      	tst	r4, r3
 8000d64:	d009      	beq.n	8000d7a <__aeabi_dmul+0x43a>
 8000d66:	421e      	tst	r6, r3
 8000d68:	d107      	bne.n	8000d7a <__aeabi_dmul+0x43a>
 8000d6a:	4333      	orrs	r3, r6
 8000d6c:	031c      	lsls	r4, r3, #12
 8000d6e:	4643      	mov	r3, r8
 8000d70:	0015      	movs	r5, r2
 8000d72:	0b24      	lsrs	r4, r4, #12
 8000d74:	4a25      	ldr	r2, [pc, #148]	; (8000e0c <__aeabi_dmul+0x4cc>)
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	e652      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	0312      	lsls	r2, r2, #12
 8000d7e:	4314      	orrs	r4, r2
 8000d80:	0324      	lsls	r4, r4, #12
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <__aeabi_dmul+0x4cc>)
 8000d84:	0b24      	lsrs	r4, r4, #12
 8000d86:	9701      	str	r7, [sp, #4]
 8000d88:	e64a      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000d8a:	f000 fc7b 	bl	8001684 <__clzsi2>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	001a      	movs	r2, r3
 8000d92:	3215      	adds	r2, #21
 8000d94:	3020      	adds	r0, #32
 8000d96:	2a1c      	cmp	r2, #28
 8000d98:	dc00      	bgt.n	8000d9c <__aeabi_dmul+0x45c>
 8000d9a:	e684      	b.n	8000aa6 <__aeabi_dmul+0x166>
 8000d9c:	4656      	mov	r6, sl
 8000d9e:	3b08      	subs	r3, #8
 8000da0:	2200      	movs	r2, #0
 8000da2:	409e      	lsls	r6, r3
 8000da4:	e689      	b.n	8000aba <__aeabi_dmul+0x17a>
 8000da6:	f000 fc6d 	bl	8001684 <__clzsi2>
 8000daa:	0001      	movs	r1, r0
 8000dac:	0002      	movs	r2, r0
 8000dae:	3115      	adds	r1, #21
 8000db0:	3220      	adds	r2, #32
 8000db2:	291c      	cmp	r1, #28
 8000db4:	dc00      	bgt.n	8000db8 <__aeabi_dmul+0x478>
 8000db6:	e64e      	b.n	8000a56 <__aeabi_dmul+0x116>
 8000db8:	0034      	movs	r4, r6
 8000dba:	3808      	subs	r0, #8
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	4084      	lsls	r4, r0
 8000dc0:	e653      	b.n	8000a6a <__aeabi_dmul+0x12a>
 8000dc2:	9b00      	ldr	r3, [sp, #0]
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	e741      	b.n	8000c4c <__aeabi_dmul+0x30c>
 8000dc8:	4912      	ldr	r1, [pc, #72]	; (8000e14 <__aeabi_dmul+0x4d4>)
 8000dca:	0022      	movs	r2, r4
 8000dcc:	4461      	add	r1, ip
 8000dce:	002e      	movs	r6, r5
 8000dd0:	408d      	lsls	r5, r1
 8000dd2:	408a      	lsls	r2, r1
 8000dd4:	40c6      	lsrs	r6, r0
 8000dd6:	1e69      	subs	r1, r5, #1
 8000dd8:	418d      	sbcs	r5, r1
 8000dda:	4332      	orrs	r2, r6
 8000ddc:	432a      	orrs	r2, r5
 8000dde:	40c4      	lsrs	r4, r0
 8000de0:	0753      	lsls	r3, r2, #29
 8000de2:	d0b6      	beq.n	8000d52 <__aeabi_dmul+0x412>
 8000de4:	210f      	movs	r1, #15
 8000de6:	4011      	ands	r1, r2
 8000de8:	2904      	cmp	r1, #4
 8000dea:	d1ac      	bne.n	8000d46 <__aeabi_dmul+0x406>
 8000dec:	e7b1      	b.n	8000d52 <__aeabi_dmul+0x412>
 8000dee:	0765      	lsls	r5, r4, #29
 8000df0:	0264      	lsls	r4, r4, #9
 8000df2:	0b24      	lsrs	r4, r4, #12
 8000df4:	08d2      	lsrs	r2, r2, #3
 8000df6:	4315      	orrs	r5, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e611      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0312      	lsls	r2, r2, #12
 8000e00:	4314      	orrs	r4, r2
 8000e02:	0324      	lsls	r4, r4, #12
 8000e04:	4a01      	ldr	r2, [pc, #4]	; (8000e0c <__aeabi_dmul+0x4cc>)
 8000e06:	0b24      	lsrs	r4, r4, #12
 8000e08:	e60a      	b.n	8000a20 <__aeabi_dmul+0xe0>
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	000007ff 	.word	0x000007ff
 8000e10:	0000043e 	.word	0x0000043e
 8000e14:	0000041e 	.word	0x0000041e

08000e18 <__aeabi_dsub>:
 8000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1a:	4657      	mov	r7, sl
 8000e1c:	464e      	mov	r6, r9
 8000e1e:	4645      	mov	r5, r8
 8000e20:	46de      	mov	lr, fp
 8000e22:	0004      	movs	r4, r0
 8000e24:	b5e0      	push	{r5, r6, r7, lr}
 8000e26:	001f      	movs	r7, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	030b      	lsls	r3, r1, #12
 8000e2c:	0f62      	lsrs	r2, r4, #29
 8000e2e:	004e      	lsls	r6, r1, #1
 8000e30:	0fcd      	lsrs	r5, r1, #31
 8000e32:	0a5b      	lsrs	r3, r3, #9
 8000e34:	0339      	lsls	r1, r7, #12
 8000e36:	4313      	orrs	r3, r2
 8000e38:	0a49      	lsrs	r1, r1, #9
 8000e3a:	00e2      	lsls	r2, r4, #3
 8000e3c:	0f44      	lsrs	r4, r0, #29
 8000e3e:	4321      	orrs	r1, r4
 8000e40:	4cc2      	ldr	r4, [pc, #776]	; (800114c <__aeabi_dsub+0x334>)
 8000e42:	4691      	mov	r9, r2
 8000e44:	4692      	mov	sl, r2
 8000e46:	00c0      	lsls	r0, r0, #3
 8000e48:	007a      	lsls	r2, r7, #1
 8000e4a:	4680      	mov	r8, r0
 8000e4c:	0d76      	lsrs	r6, r6, #21
 8000e4e:	0d52      	lsrs	r2, r2, #21
 8000e50:	0fff      	lsrs	r7, r7, #31
 8000e52:	42a2      	cmp	r2, r4
 8000e54:	d100      	bne.n	8000e58 <__aeabi_dsub+0x40>
 8000e56:	e0b4      	b.n	8000fc2 <__aeabi_dsub+0x1aa>
 8000e58:	2401      	movs	r4, #1
 8000e5a:	4067      	eors	r7, r4
 8000e5c:	46bb      	mov	fp, r7
 8000e5e:	42bd      	cmp	r5, r7
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dsub+0x4c>
 8000e62:	e088      	b.n	8000f76 <__aeabi_dsub+0x15e>
 8000e64:	1ab4      	subs	r4, r6, r2
 8000e66:	46a4      	mov	ip, r4
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_dsub+0x56>
 8000e6c:	e0b2      	b.n	8000fd4 <__aeabi_dsub+0x1bc>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dsub+0x5c>
 8000e72:	e0c5      	b.n	8001000 <__aeabi_dsub+0x1e8>
 8000e74:	4ab5      	ldr	r2, [pc, #724]	; (800114c <__aeabi_dsub+0x334>)
 8000e76:	4296      	cmp	r6, r2
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dsub+0x64>
 8000e7a:	e28b      	b.n	8001394 <__aeabi_dsub+0x57c>
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0412      	lsls	r2, r2, #16
 8000e80:	4311      	orrs	r1, r2
 8000e82:	4662      	mov	r2, ip
 8000e84:	2a38      	cmp	r2, #56	; 0x38
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_dsub+0x72>
 8000e88:	e1a1      	b.n	80011ce <__aeabi_dsub+0x3b6>
 8000e8a:	2a1f      	cmp	r2, #31
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_dsub+0x78>
 8000e8e:	e216      	b.n	80012be <__aeabi_dsub+0x4a6>
 8000e90:	2720      	movs	r7, #32
 8000e92:	000c      	movs	r4, r1
 8000e94:	1abf      	subs	r7, r7, r2
 8000e96:	40bc      	lsls	r4, r7
 8000e98:	0002      	movs	r2, r0
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	4664      	mov	r4, ip
 8000e9e:	40b8      	lsls	r0, r7
 8000ea0:	40e2      	lsrs	r2, r4
 8000ea2:	4644      	mov	r4, r8
 8000ea4:	4314      	orrs	r4, r2
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1e50      	subs	r0, r2, #1
 8000eaa:	4182      	sbcs	r2, r0
 8000eac:	4660      	mov	r0, ip
 8000eae:	40c1      	lsrs	r1, r0
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	1a5b      	subs	r3, r3, r1
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	1a8c      	subs	r4, r1, r2
 8000eb8:	45a1      	cmp	r9, r4
 8000eba:	4192      	sbcs	r2, r2
 8000ebc:	4252      	negs	r2, r2
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	d400      	bmi.n	8000eca <__aeabi_dsub+0xb2>
 8000ec8:	e117      	b.n	80010fa <__aeabi_dsub+0x2e2>
 8000eca:	4643      	mov	r3, r8
 8000ecc:	025b      	lsls	r3, r3, #9
 8000ece:	0a5b      	lsrs	r3, r3, #9
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dsub+0xc2>
 8000ed8:	e16c      	b.n	80011b4 <__aeabi_dsub+0x39c>
 8000eda:	4640      	mov	r0, r8
 8000edc:	f000 fbd2 	bl	8001684 <__clzsi2>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	3a08      	subs	r2, #8
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	4643      	mov	r3, r8
 8000eea:	1a89      	subs	r1, r1, r2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	40c8      	lsrs	r0, r1
 8000ef0:	4094      	lsls	r4, r2
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	4296      	cmp	r6, r2
 8000ef6:	dd00      	ble.n	8000efa <__aeabi_dsub+0xe2>
 8000ef8:	e157      	b.n	80011aa <__aeabi_dsub+0x392>
 8000efa:	1b96      	subs	r6, r2, r6
 8000efc:	1c71      	adds	r1, r6, #1
 8000efe:	291f      	cmp	r1, #31
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_dsub+0xec>
 8000f02:	e1cb      	b.n	800129c <__aeabi_dsub+0x484>
 8000f04:	2220      	movs	r2, #32
 8000f06:	0018      	movs	r0, r3
 8000f08:	0026      	movs	r6, r4
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	4090      	lsls	r0, r2
 8000f10:	40ce      	lsrs	r6, r1
 8000f12:	40cb      	lsrs	r3, r1
 8000f14:	1e62      	subs	r2, r4, #1
 8000f16:	4194      	sbcs	r4, r2
 8000f18:	4330      	orrs	r0, r6
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	2600      	movs	r6, #0
 8000f1e:	4304      	orrs	r4, r0
 8000f20:	0763      	lsls	r3, r4, #29
 8000f22:	d009      	beq.n	8000f38 <__aeabi_dsub+0x120>
 8000f24:	230f      	movs	r3, #15
 8000f26:	4023      	ands	r3, r4
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d005      	beq.n	8000f38 <__aeabi_dsub+0x120>
 8000f2c:	1d23      	adds	r3, r4, #4
 8000f2e:	42a3      	cmp	r3, r4
 8000f30:	41a4      	sbcs	r4, r4
 8000f32:	4264      	negs	r4, r4
 8000f34:	44a0      	add	r8, r4
 8000f36:	001c      	movs	r4, r3
 8000f38:	4643      	mov	r3, r8
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	d400      	bmi.n	8000f40 <__aeabi_dsub+0x128>
 8000f3e:	e0df      	b.n	8001100 <__aeabi_dsub+0x2e8>
 8000f40:	4b82      	ldr	r3, [pc, #520]	; (800114c <__aeabi_dsub+0x334>)
 8000f42:	3601      	adds	r6, #1
 8000f44:	429e      	cmp	r6, r3
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dsub+0x132>
 8000f48:	e0fb      	b.n	8001142 <__aeabi_dsub+0x32a>
 8000f4a:	4642      	mov	r2, r8
 8000f4c:	4b80      	ldr	r3, [pc, #512]	; (8001150 <__aeabi_dsub+0x338>)
 8000f4e:	08e4      	lsrs	r4, r4, #3
 8000f50:	401a      	ands	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	0571      	lsls	r1, r6, #21
 8000f56:	0752      	lsls	r2, r2, #29
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	4322      	orrs	r2, r4
 8000f5c:	0b1b      	lsrs	r3, r3, #12
 8000f5e:	0d49      	lsrs	r1, r1, #21
 8000f60:	0509      	lsls	r1, r1, #20
 8000f62:	07ed      	lsls	r5, r5, #31
 8000f64:	4319      	orrs	r1, r3
 8000f66:	4329      	orrs	r1, r5
 8000f68:	0010      	movs	r0, r2
 8000f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f6c:	46bb      	mov	fp, r7
 8000f6e:	46b2      	mov	sl, r6
 8000f70:	46a9      	mov	r9, r5
 8000f72:	46a0      	mov	r8, r4
 8000f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f76:	1ab4      	subs	r4, r6, r2
 8000f78:	46a4      	mov	ip, r4
 8000f7a:	2c00      	cmp	r4, #0
 8000f7c:	dd58      	ble.n	8001030 <__aeabi_dsub+0x218>
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dsub+0x16c>
 8000f82:	e09e      	b.n	80010c2 <__aeabi_dsub+0x2aa>
 8000f84:	4a71      	ldr	r2, [pc, #452]	; (800114c <__aeabi_dsub+0x334>)
 8000f86:	4296      	cmp	r6, r2
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dsub+0x174>
 8000f8a:	e13b      	b.n	8001204 <__aeabi_dsub+0x3ec>
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	4311      	orrs	r1, r2
 8000f92:	4662      	mov	r2, ip
 8000f94:	2a38      	cmp	r2, #56	; 0x38
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_dsub+0x182>
 8000f98:	e0c1      	b.n	800111e <__aeabi_dsub+0x306>
 8000f9a:	2a1f      	cmp	r2, #31
 8000f9c:	dc00      	bgt.n	8000fa0 <__aeabi_dsub+0x188>
 8000f9e:	e1bb      	b.n	8001318 <__aeabi_dsub+0x500>
 8000fa0:	000c      	movs	r4, r1
 8000fa2:	3a20      	subs	r2, #32
 8000fa4:	40d4      	lsrs	r4, r2
 8000fa6:	0022      	movs	r2, r4
 8000fa8:	4664      	mov	r4, ip
 8000faa:	2c20      	cmp	r4, #32
 8000fac:	d004      	beq.n	8000fb8 <__aeabi_dsub+0x1a0>
 8000fae:	2740      	movs	r7, #64	; 0x40
 8000fb0:	1b3f      	subs	r7, r7, r4
 8000fb2:	40b9      	lsls	r1, r7
 8000fb4:	4308      	orrs	r0, r1
 8000fb6:	4680      	mov	r8, r0
 8000fb8:	4644      	mov	r4, r8
 8000fba:	1e61      	subs	r1, r4, #1
 8000fbc:	418c      	sbcs	r4, r1
 8000fbe:	4314      	orrs	r4, r2
 8000fc0:	e0b1      	b.n	8001126 <__aeabi_dsub+0x30e>
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	4304      	orrs	r4, r0
 8000fc6:	d02a      	beq.n	800101e <__aeabi_dsub+0x206>
 8000fc8:	46bb      	mov	fp, r7
 8000fca:	42bd      	cmp	r5, r7
 8000fcc:	d02d      	beq.n	800102a <__aeabi_dsub+0x212>
 8000fce:	4c61      	ldr	r4, [pc, #388]	; (8001154 <__aeabi_dsub+0x33c>)
 8000fd0:	46a4      	mov	ip, r4
 8000fd2:	44b4      	add	ip, r6
 8000fd4:	4664      	mov	r4, ip
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d05c      	beq.n	8001094 <__aeabi_dsub+0x27c>
 8000fda:	1b94      	subs	r4, r2, r6
 8000fdc:	46a4      	mov	ip, r4
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_dsub+0x1cc>
 8000fe2:	e115      	b.n	8001210 <__aeabi_dsub+0x3f8>
 8000fe4:	464d      	mov	r5, r9
 8000fe6:	431d      	orrs	r5, r3
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dsub+0x1d4>
 8000fea:	e1c3      	b.n	8001374 <__aeabi_dsub+0x55c>
 8000fec:	1e65      	subs	r5, r4, #1
 8000fee:	2c01      	cmp	r4, #1
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dsub+0x1dc>
 8000ff2:	e20c      	b.n	800140e <__aeabi_dsub+0x5f6>
 8000ff4:	4e55      	ldr	r6, [pc, #340]	; (800114c <__aeabi_dsub+0x334>)
 8000ff6:	42b4      	cmp	r4, r6
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dsub+0x1e4>
 8000ffa:	e1f8      	b.n	80013ee <__aeabi_dsub+0x5d6>
 8000ffc:	46ac      	mov	ip, r5
 8000ffe:	e10e      	b.n	800121e <__aeabi_dsub+0x406>
 8001000:	000a      	movs	r2, r1
 8001002:	4302      	orrs	r2, r0
 8001004:	d100      	bne.n	8001008 <__aeabi_dsub+0x1f0>
 8001006:	e136      	b.n	8001276 <__aeabi_dsub+0x45e>
 8001008:	0022      	movs	r2, r4
 800100a:	3a01      	subs	r2, #1
 800100c:	2c01      	cmp	r4, #1
 800100e:	d100      	bne.n	8001012 <__aeabi_dsub+0x1fa>
 8001010:	e1c6      	b.n	80013a0 <__aeabi_dsub+0x588>
 8001012:	4c4e      	ldr	r4, [pc, #312]	; (800114c <__aeabi_dsub+0x334>)
 8001014:	45a4      	cmp	ip, r4
 8001016:	d100      	bne.n	800101a <__aeabi_dsub+0x202>
 8001018:	e0f4      	b.n	8001204 <__aeabi_dsub+0x3ec>
 800101a:	4694      	mov	ip, r2
 800101c:	e731      	b.n	8000e82 <__aeabi_dsub+0x6a>
 800101e:	2401      	movs	r4, #1
 8001020:	4067      	eors	r7, r4
 8001022:	46bb      	mov	fp, r7
 8001024:	42bd      	cmp	r5, r7
 8001026:	d000      	beq.n	800102a <__aeabi_dsub+0x212>
 8001028:	e71c      	b.n	8000e64 <__aeabi_dsub+0x4c>
 800102a:	4c4a      	ldr	r4, [pc, #296]	; (8001154 <__aeabi_dsub+0x33c>)
 800102c:	46a4      	mov	ip, r4
 800102e:	44b4      	add	ip, r6
 8001030:	4664      	mov	r4, ip
 8001032:	2c00      	cmp	r4, #0
 8001034:	d100      	bne.n	8001038 <__aeabi_dsub+0x220>
 8001036:	e0cf      	b.n	80011d8 <__aeabi_dsub+0x3c0>
 8001038:	1b94      	subs	r4, r2, r6
 800103a:	46a4      	mov	ip, r4
 800103c:	2e00      	cmp	r6, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dsub+0x22a>
 8001040:	e15c      	b.n	80012fc <__aeabi_dsub+0x4e4>
 8001042:	4e42      	ldr	r6, [pc, #264]	; (800114c <__aeabi_dsub+0x334>)
 8001044:	42b2      	cmp	r2, r6
 8001046:	d100      	bne.n	800104a <__aeabi_dsub+0x232>
 8001048:	e1ec      	b.n	8001424 <__aeabi_dsub+0x60c>
 800104a:	2680      	movs	r6, #128	; 0x80
 800104c:	0436      	lsls	r6, r6, #16
 800104e:	4333      	orrs	r3, r6
 8001050:	4664      	mov	r4, ip
 8001052:	2c38      	cmp	r4, #56	; 0x38
 8001054:	dd00      	ble.n	8001058 <__aeabi_dsub+0x240>
 8001056:	e1b3      	b.n	80013c0 <__aeabi_dsub+0x5a8>
 8001058:	2c1f      	cmp	r4, #31
 800105a:	dd00      	ble.n	800105e <__aeabi_dsub+0x246>
 800105c:	e238      	b.n	80014d0 <__aeabi_dsub+0x6b8>
 800105e:	2620      	movs	r6, #32
 8001060:	1b36      	subs	r6, r6, r4
 8001062:	001c      	movs	r4, r3
 8001064:	40b4      	lsls	r4, r6
 8001066:	464f      	mov	r7, r9
 8001068:	46a0      	mov	r8, r4
 800106a:	4664      	mov	r4, ip
 800106c:	40e7      	lsrs	r7, r4
 800106e:	4644      	mov	r4, r8
 8001070:	433c      	orrs	r4, r7
 8001072:	464f      	mov	r7, r9
 8001074:	40b7      	lsls	r7, r6
 8001076:	003e      	movs	r6, r7
 8001078:	1e77      	subs	r7, r6, #1
 800107a:	41be      	sbcs	r6, r7
 800107c:	4334      	orrs	r4, r6
 800107e:	4666      	mov	r6, ip
 8001080:	40f3      	lsrs	r3, r6
 8001082:	18c9      	adds	r1, r1, r3
 8001084:	1824      	adds	r4, r4, r0
 8001086:	4284      	cmp	r4, r0
 8001088:	419b      	sbcs	r3, r3
 800108a:	425b      	negs	r3, r3
 800108c:	4698      	mov	r8, r3
 800108e:	0016      	movs	r6, r2
 8001090:	4488      	add	r8, r1
 8001092:	e04e      	b.n	8001132 <__aeabi_dsub+0x31a>
 8001094:	4a30      	ldr	r2, [pc, #192]	; (8001158 <__aeabi_dsub+0x340>)
 8001096:	1c74      	adds	r4, r6, #1
 8001098:	4214      	tst	r4, r2
 800109a:	d000      	beq.n	800109e <__aeabi_dsub+0x286>
 800109c:	e0d6      	b.n	800124c <__aeabi_dsub+0x434>
 800109e:	464a      	mov	r2, r9
 80010a0:	431a      	orrs	r2, r3
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dsub+0x290>
 80010a6:	e15b      	b.n	8001360 <__aeabi_dsub+0x548>
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dsub+0x296>
 80010ac:	e1a5      	b.n	80013fa <__aeabi_dsub+0x5e2>
 80010ae:	000a      	movs	r2, r1
 80010b0:	4302      	orrs	r2, r0
 80010b2:	d000      	beq.n	80010b6 <__aeabi_dsub+0x29e>
 80010b4:	e1bb      	b.n	800142e <__aeabi_dsub+0x616>
 80010b6:	464a      	mov	r2, r9
 80010b8:	0759      	lsls	r1, r3, #29
 80010ba:	08d2      	lsrs	r2, r2, #3
 80010bc:	430a      	orrs	r2, r1
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	e027      	b.n	8001112 <__aeabi_dsub+0x2fa>
 80010c2:	000a      	movs	r2, r1
 80010c4:	4302      	orrs	r2, r0
 80010c6:	d100      	bne.n	80010ca <__aeabi_dsub+0x2b2>
 80010c8:	e174      	b.n	80013b4 <__aeabi_dsub+0x59c>
 80010ca:	0022      	movs	r2, r4
 80010cc:	3a01      	subs	r2, #1
 80010ce:	2c01      	cmp	r4, #1
 80010d0:	d005      	beq.n	80010de <__aeabi_dsub+0x2c6>
 80010d2:	4c1e      	ldr	r4, [pc, #120]	; (800114c <__aeabi_dsub+0x334>)
 80010d4:	45a4      	cmp	ip, r4
 80010d6:	d100      	bne.n	80010da <__aeabi_dsub+0x2c2>
 80010d8:	e094      	b.n	8001204 <__aeabi_dsub+0x3ec>
 80010da:	4694      	mov	ip, r2
 80010dc:	e759      	b.n	8000f92 <__aeabi_dsub+0x17a>
 80010de:	4448      	add	r0, r9
 80010e0:	4548      	cmp	r0, r9
 80010e2:	4192      	sbcs	r2, r2
 80010e4:	185b      	adds	r3, r3, r1
 80010e6:	4698      	mov	r8, r3
 80010e8:	0004      	movs	r4, r0
 80010ea:	4252      	negs	r2, r2
 80010ec:	4490      	add	r8, r2
 80010ee:	4643      	mov	r3, r8
 80010f0:	2602      	movs	r6, #2
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	d500      	bpl.n	80010f8 <__aeabi_dsub+0x2e0>
 80010f6:	e0c4      	b.n	8001282 <__aeabi_dsub+0x46a>
 80010f8:	3e01      	subs	r6, #1
 80010fa:	0763      	lsls	r3, r4, #29
 80010fc:	d000      	beq.n	8001100 <__aeabi_dsub+0x2e8>
 80010fe:	e711      	b.n	8000f24 <__aeabi_dsub+0x10c>
 8001100:	4643      	mov	r3, r8
 8001102:	46b4      	mov	ip, r6
 8001104:	0759      	lsls	r1, r3, #29
 8001106:	08e2      	lsrs	r2, r4, #3
 8001108:	430a      	orrs	r2, r1
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	490f      	ldr	r1, [pc, #60]	; (800114c <__aeabi_dsub+0x334>)
 800110e:	458c      	cmp	ip, r1
 8001110:	d040      	beq.n	8001194 <__aeabi_dsub+0x37c>
 8001112:	4661      	mov	r1, ip
 8001114:	031b      	lsls	r3, r3, #12
 8001116:	0549      	lsls	r1, r1, #21
 8001118:	0b1b      	lsrs	r3, r3, #12
 800111a:	0d49      	lsrs	r1, r1, #21
 800111c:	e720      	b.n	8000f60 <__aeabi_dsub+0x148>
 800111e:	4301      	orrs	r1, r0
 8001120:	000c      	movs	r4, r1
 8001122:	1e61      	subs	r1, r4, #1
 8001124:	418c      	sbcs	r4, r1
 8001126:	444c      	add	r4, r9
 8001128:	454c      	cmp	r4, r9
 800112a:	4192      	sbcs	r2, r2
 800112c:	4252      	negs	r2, r2
 800112e:	4690      	mov	r8, r2
 8001130:	4498      	add	r8, r3
 8001132:	4643      	mov	r3, r8
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	d5e0      	bpl.n	80010fa <__aeabi_dsub+0x2e2>
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__aeabi_dsub+0x334>)
 800113a:	3601      	adds	r6, #1
 800113c:	429e      	cmp	r6, r3
 800113e:	d000      	beq.n	8001142 <__aeabi_dsub+0x32a>
 8001140:	e09f      	b.n	8001282 <__aeabi_dsub+0x46a>
 8001142:	0031      	movs	r1, r6
 8001144:	2300      	movs	r3, #0
 8001146:	2200      	movs	r2, #0
 8001148:	e70a      	b.n	8000f60 <__aeabi_dsub+0x148>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff
 8001150:	ff7fffff 	.word	0xff7fffff
 8001154:	fffff801 	.word	0xfffff801
 8001158:	000007fe 	.word	0x000007fe
 800115c:	2a00      	cmp	r2, #0
 800115e:	d100      	bne.n	8001162 <__aeabi_dsub+0x34a>
 8001160:	e160      	b.n	8001424 <__aeabi_dsub+0x60c>
 8001162:	000a      	movs	r2, r1
 8001164:	4302      	orrs	r2, r0
 8001166:	d04d      	beq.n	8001204 <__aeabi_dsub+0x3ec>
 8001168:	464a      	mov	r2, r9
 800116a:	075c      	lsls	r4, r3, #29
 800116c:	08d2      	lsrs	r2, r2, #3
 800116e:	4322      	orrs	r2, r4
 8001170:	2480      	movs	r4, #128	; 0x80
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	4223      	tst	r3, r4
 8001178:	d007      	beq.n	800118a <__aeabi_dsub+0x372>
 800117a:	08ce      	lsrs	r6, r1, #3
 800117c:	4226      	tst	r6, r4
 800117e:	d104      	bne.n	800118a <__aeabi_dsub+0x372>
 8001180:	465d      	mov	r5, fp
 8001182:	0033      	movs	r3, r6
 8001184:	08c2      	lsrs	r2, r0, #3
 8001186:	0749      	lsls	r1, r1, #29
 8001188:	430a      	orrs	r2, r1
 800118a:	0f51      	lsrs	r1, r2, #29
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	08d2      	lsrs	r2, r2, #3
 8001190:	0749      	lsls	r1, r1, #29
 8001192:	430a      	orrs	r2, r1
 8001194:	0011      	movs	r1, r2
 8001196:	4319      	orrs	r1, r3
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x384>
 800119a:	e1c8      	b.n	800152e <__aeabi_dsub+0x716>
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	0309      	lsls	r1, r1, #12
 80011a0:	430b      	orrs	r3, r1
 80011a2:	031b      	lsls	r3, r3, #12
 80011a4:	49d5      	ldr	r1, [pc, #852]	; (80014fc <__aeabi_dsub+0x6e4>)
 80011a6:	0b1b      	lsrs	r3, r3, #12
 80011a8:	e6da      	b.n	8000f60 <__aeabi_dsub+0x148>
 80011aa:	49d5      	ldr	r1, [pc, #852]	; (8001500 <__aeabi_dsub+0x6e8>)
 80011ac:	1ab6      	subs	r6, r6, r2
 80011ae:	400b      	ands	r3, r1
 80011b0:	4698      	mov	r8, r3
 80011b2:	e6b5      	b.n	8000f20 <__aeabi_dsub+0x108>
 80011b4:	0020      	movs	r0, r4
 80011b6:	f000 fa65 	bl	8001684 <__clzsi2>
 80011ba:	0002      	movs	r2, r0
 80011bc:	3218      	adds	r2, #24
 80011be:	2a1f      	cmp	r2, #31
 80011c0:	dc00      	bgt.n	80011c4 <__aeabi_dsub+0x3ac>
 80011c2:	e68f      	b.n	8000ee4 <__aeabi_dsub+0xcc>
 80011c4:	0023      	movs	r3, r4
 80011c6:	3808      	subs	r0, #8
 80011c8:	4083      	lsls	r3, r0
 80011ca:	2400      	movs	r4, #0
 80011cc:	e692      	b.n	8000ef4 <__aeabi_dsub+0xdc>
 80011ce:	4308      	orrs	r0, r1
 80011d0:	0002      	movs	r2, r0
 80011d2:	1e50      	subs	r0, r2, #1
 80011d4:	4182      	sbcs	r2, r0
 80011d6:	e66d      	b.n	8000eb4 <__aeabi_dsub+0x9c>
 80011d8:	4cca      	ldr	r4, [pc, #808]	; (8001504 <__aeabi_dsub+0x6ec>)
 80011da:	1c72      	adds	r2, r6, #1
 80011dc:	4222      	tst	r2, r4
 80011de:	d000      	beq.n	80011e2 <__aeabi_dsub+0x3ca>
 80011e0:	e0ad      	b.n	800133e <__aeabi_dsub+0x526>
 80011e2:	464a      	mov	r2, r9
 80011e4:	431a      	orrs	r2, r3
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	d1b8      	bne.n	800115c <__aeabi_dsub+0x344>
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dsub+0x3d8>
 80011ee:	e158      	b.n	80014a2 <__aeabi_dsub+0x68a>
 80011f0:	000a      	movs	r2, r1
 80011f2:	4302      	orrs	r2, r0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_dsub+0x3e0>
 80011f6:	e159      	b.n	80014ac <__aeabi_dsub+0x694>
 80011f8:	464a      	mov	r2, r9
 80011fa:	0759      	lsls	r1, r3, #29
 80011fc:	08d2      	lsrs	r2, r2, #3
 80011fe:	430a      	orrs	r2, r1
 8001200:	08db      	lsrs	r3, r3, #3
 8001202:	e786      	b.n	8001112 <__aeabi_dsub+0x2fa>
 8001204:	464a      	mov	r2, r9
 8001206:	0759      	lsls	r1, r3, #29
 8001208:	08d2      	lsrs	r2, r2, #3
 800120a:	430a      	orrs	r2, r1
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	e7c1      	b.n	8001194 <__aeabi_dsub+0x37c>
 8001210:	4dba      	ldr	r5, [pc, #744]	; (80014fc <__aeabi_dsub+0x6e4>)
 8001212:	42aa      	cmp	r2, r5
 8001214:	d100      	bne.n	8001218 <__aeabi_dsub+0x400>
 8001216:	e11e      	b.n	8001456 <__aeabi_dsub+0x63e>
 8001218:	2580      	movs	r5, #128	; 0x80
 800121a:	042d      	lsls	r5, r5, #16
 800121c:	432b      	orrs	r3, r5
 800121e:	4664      	mov	r4, ip
 8001220:	2c38      	cmp	r4, #56	; 0x38
 8001222:	dc5d      	bgt.n	80012e0 <__aeabi_dsub+0x4c8>
 8001224:	2c1f      	cmp	r4, #31
 8001226:	dd00      	ble.n	800122a <__aeabi_dsub+0x412>
 8001228:	e0d0      	b.n	80013cc <__aeabi_dsub+0x5b4>
 800122a:	2520      	movs	r5, #32
 800122c:	4667      	mov	r7, ip
 800122e:	1b2d      	subs	r5, r5, r4
 8001230:	464e      	mov	r6, r9
 8001232:	001c      	movs	r4, r3
 8001234:	40fe      	lsrs	r6, r7
 8001236:	40ac      	lsls	r4, r5
 8001238:	4334      	orrs	r4, r6
 800123a:	464e      	mov	r6, r9
 800123c:	40ae      	lsls	r6, r5
 800123e:	0035      	movs	r5, r6
 8001240:	40fb      	lsrs	r3, r7
 8001242:	1e6e      	subs	r6, r5, #1
 8001244:	41b5      	sbcs	r5, r6
 8001246:	1ac9      	subs	r1, r1, r3
 8001248:	432c      	orrs	r4, r5
 800124a:	e04e      	b.n	80012ea <__aeabi_dsub+0x4d2>
 800124c:	464a      	mov	r2, r9
 800124e:	1a14      	subs	r4, r2, r0
 8001250:	45a1      	cmp	r9, r4
 8001252:	4192      	sbcs	r2, r2
 8001254:	4252      	negs	r2, r2
 8001256:	4690      	mov	r8, r2
 8001258:	1a5f      	subs	r7, r3, r1
 800125a:	003a      	movs	r2, r7
 800125c:	4647      	mov	r7, r8
 800125e:	1bd2      	subs	r2, r2, r7
 8001260:	4690      	mov	r8, r2
 8001262:	0212      	lsls	r2, r2, #8
 8001264:	d500      	bpl.n	8001268 <__aeabi_dsub+0x450>
 8001266:	e08b      	b.n	8001380 <__aeabi_dsub+0x568>
 8001268:	4642      	mov	r2, r8
 800126a:	4322      	orrs	r2, r4
 800126c:	d000      	beq.n	8001270 <__aeabi_dsub+0x458>
 800126e:	e630      	b.n	8000ed2 <__aeabi_dsub+0xba>
 8001270:	2300      	movs	r3, #0
 8001272:	2500      	movs	r5, #0
 8001274:	e74d      	b.n	8001112 <__aeabi_dsub+0x2fa>
 8001276:	464a      	mov	r2, r9
 8001278:	0759      	lsls	r1, r3, #29
 800127a:	08d2      	lsrs	r2, r2, #3
 800127c:	430a      	orrs	r2, r1
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	e744      	b.n	800110c <__aeabi_dsub+0x2f4>
 8001282:	4642      	mov	r2, r8
 8001284:	4b9e      	ldr	r3, [pc, #632]	; (8001500 <__aeabi_dsub+0x6e8>)
 8001286:	0861      	lsrs	r1, r4, #1
 8001288:	401a      	ands	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	2201      	movs	r2, #1
 800128e:	4014      	ands	r4, r2
 8001290:	430c      	orrs	r4, r1
 8001292:	07da      	lsls	r2, r3, #31
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	4698      	mov	r8, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	e641      	b.n	8000f20 <__aeabi_dsub+0x108>
 800129c:	001a      	movs	r2, r3
 800129e:	3e1f      	subs	r6, #31
 80012a0:	40f2      	lsrs	r2, r6
 80012a2:	0016      	movs	r6, r2
 80012a4:	2920      	cmp	r1, #32
 80012a6:	d003      	beq.n	80012b0 <__aeabi_dsub+0x498>
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	1a51      	subs	r1, r2, r1
 80012ac:	408b      	lsls	r3, r1
 80012ae:	431c      	orrs	r4, r3
 80012b0:	1e62      	subs	r2, r4, #1
 80012b2:	4194      	sbcs	r4, r2
 80012b4:	2300      	movs	r3, #0
 80012b6:	4334      	orrs	r4, r6
 80012b8:	4698      	mov	r8, r3
 80012ba:	2600      	movs	r6, #0
 80012bc:	e71d      	b.n	80010fa <__aeabi_dsub+0x2e2>
 80012be:	000c      	movs	r4, r1
 80012c0:	3a20      	subs	r2, #32
 80012c2:	40d4      	lsrs	r4, r2
 80012c4:	0022      	movs	r2, r4
 80012c6:	4664      	mov	r4, ip
 80012c8:	2c20      	cmp	r4, #32
 80012ca:	d004      	beq.n	80012d6 <__aeabi_dsub+0x4be>
 80012cc:	2740      	movs	r7, #64	; 0x40
 80012ce:	1b3f      	subs	r7, r7, r4
 80012d0:	40b9      	lsls	r1, r7
 80012d2:	4308      	orrs	r0, r1
 80012d4:	4680      	mov	r8, r0
 80012d6:	4644      	mov	r4, r8
 80012d8:	1e61      	subs	r1, r4, #1
 80012da:	418c      	sbcs	r4, r1
 80012dc:	4322      	orrs	r2, r4
 80012de:	e5e9      	b.n	8000eb4 <__aeabi_dsub+0x9c>
 80012e0:	464c      	mov	r4, r9
 80012e2:	4323      	orrs	r3, r4
 80012e4:	001c      	movs	r4, r3
 80012e6:	1e63      	subs	r3, r4, #1
 80012e8:	419c      	sbcs	r4, r3
 80012ea:	1b04      	subs	r4, r0, r4
 80012ec:	42a0      	cmp	r0, r4
 80012ee:	419b      	sbcs	r3, r3
 80012f0:	425b      	negs	r3, r3
 80012f2:	1acb      	subs	r3, r1, r3
 80012f4:	4698      	mov	r8, r3
 80012f6:	465d      	mov	r5, fp
 80012f8:	0016      	movs	r6, r2
 80012fa:	e5e2      	b.n	8000ec2 <__aeabi_dsub+0xaa>
 80012fc:	464e      	mov	r6, r9
 80012fe:	431e      	orrs	r6, r3
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x4ec>
 8001302:	e0ae      	b.n	8001462 <__aeabi_dsub+0x64a>
 8001304:	1e66      	subs	r6, r4, #1
 8001306:	2c01      	cmp	r4, #1
 8001308:	d100      	bne.n	800130c <__aeabi_dsub+0x4f4>
 800130a:	e0fd      	b.n	8001508 <__aeabi_dsub+0x6f0>
 800130c:	4f7b      	ldr	r7, [pc, #492]	; (80014fc <__aeabi_dsub+0x6e4>)
 800130e:	42bc      	cmp	r4, r7
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0x4fc>
 8001312:	e107      	b.n	8001524 <__aeabi_dsub+0x70c>
 8001314:	46b4      	mov	ip, r6
 8001316:	e69b      	b.n	8001050 <__aeabi_dsub+0x238>
 8001318:	4664      	mov	r4, ip
 800131a:	2220      	movs	r2, #32
 800131c:	1b12      	subs	r2, r2, r4
 800131e:	000c      	movs	r4, r1
 8001320:	4094      	lsls	r4, r2
 8001322:	0007      	movs	r7, r0
 8001324:	4090      	lsls	r0, r2
 8001326:	46a0      	mov	r8, r4
 8001328:	4664      	mov	r4, ip
 800132a:	1e42      	subs	r2, r0, #1
 800132c:	4190      	sbcs	r0, r2
 800132e:	4662      	mov	r2, ip
 8001330:	40e7      	lsrs	r7, r4
 8001332:	4644      	mov	r4, r8
 8001334:	40d1      	lsrs	r1, r2
 8001336:	433c      	orrs	r4, r7
 8001338:	4304      	orrs	r4, r0
 800133a:	185b      	adds	r3, r3, r1
 800133c:	e6f3      	b.n	8001126 <__aeabi_dsub+0x30e>
 800133e:	4c6f      	ldr	r4, [pc, #444]	; (80014fc <__aeabi_dsub+0x6e4>)
 8001340:	42a2      	cmp	r2, r4
 8001342:	d100      	bne.n	8001346 <__aeabi_dsub+0x52e>
 8001344:	e0d5      	b.n	80014f2 <__aeabi_dsub+0x6da>
 8001346:	4448      	add	r0, r9
 8001348:	185b      	adds	r3, r3, r1
 800134a:	4548      	cmp	r0, r9
 800134c:	4189      	sbcs	r1, r1
 800134e:	4249      	negs	r1, r1
 8001350:	185b      	adds	r3, r3, r1
 8001352:	07dc      	lsls	r4, r3, #31
 8001354:	0840      	lsrs	r0, r0, #1
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	4698      	mov	r8, r3
 800135a:	0016      	movs	r6, r2
 800135c:	4304      	orrs	r4, r0
 800135e:	e6cc      	b.n	80010fa <__aeabi_dsub+0x2e2>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d000      	beq.n	8001366 <__aeabi_dsub+0x54e>
 8001364:	e082      	b.n	800146c <__aeabi_dsub+0x654>
 8001366:	000a      	movs	r2, r1
 8001368:	4302      	orrs	r2, r0
 800136a:	d140      	bne.n	80013ee <__aeabi_dsub+0x5d6>
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	2500      	movs	r5, #0
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	e713      	b.n	800119c <__aeabi_dsub+0x384>
 8001374:	074b      	lsls	r3, r1, #29
 8001376:	08c2      	lsrs	r2, r0, #3
 8001378:	431a      	orrs	r2, r3
 800137a:	465d      	mov	r5, fp
 800137c:	08cb      	lsrs	r3, r1, #3
 800137e:	e6c5      	b.n	800110c <__aeabi_dsub+0x2f4>
 8001380:	464a      	mov	r2, r9
 8001382:	1a84      	subs	r4, r0, r2
 8001384:	42a0      	cmp	r0, r4
 8001386:	4192      	sbcs	r2, r2
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	4252      	negs	r2, r2
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	4698      	mov	r8, r3
 8001390:	465d      	mov	r5, fp
 8001392:	e59e      	b.n	8000ed2 <__aeabi_dsub+0xba>
 8001394:	464a      	mov	r2, r9
 8001396:	0759      	lsls	r1, r3, #29
 8001398:	08d2      	lsrs	r2, r2, #3
 800139a:	430a      	orrs	r2, r1
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	e6f9      	b.n	8001194 <__aeabi_dsub+0x37c>
 80013a0:	464a      	mov	r2, r9
 80013a2:	1a14      	subs	r4, r2, r0
 80013a4:	45a1      	cmp	r9, r4
 80013a6:	4192      	sbcs	r2, r2
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	4252      	negs	r2, r2
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	4698      	mov	r8, r3
 80013b0:	2601      	movs	r6, #1
 80013b2:	e586      	b.n	8000ec2 <__aeabi_dsub+0xaa>
 80013b4:	464a      	mov	r2, r9
 80013b6:	0759      	lsls	r1, r3, #29
 80013b8:	08d2      	lsrs	r2, r2, #3
 80013ba:	430a      	orrs	r2, r1
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	e6a5      	b.n	800110c <__aeabi_dsub+0x2f4>
 80013c0:	464c      	mov	r4, r9
 80013c2:	4323      	orrs	r3, r4
 80013c4:	001c      	movs	r4, r3
 80013c6:	1e63      	subs	r3, r4, #1
 80013c8:	419c      	sbcs	r4, r3
 80013ca:	e65b      	b.n	8001084 <__aeabi_dsub+0x26c>
 80013cc:	4665      	mov	r5, ip
 80013ce:	001e      	movs	r6, r3
 80013d0:	3d20      	subs	r5, #32
 80013d2:	40ee      	lsrs	r6, r5
 80013d4:	2c20      	cmp	r4, #32
 80013d6:	d005      	beq.n	80013e4 <__aeabi_dsub+0x5cc>
 80013d8:	2540      	movs	r5, #64	; 0x40
 80013da:	1b2d      	subs	r5, r5, r4
 80013dc:	40ab      	lsls	r3, r5
 80013de:	464c      	mov	r4, r9
 80013e0:	431c      	orrs	r4, r3
 80013e2:	46a2      	mov	sl, r4
 80013e4:	4654      	mov	r4, sl
 80013e6:	1e63      	subs	r3, r4, #1
 80013e8:	419c      	sbcs	r4, r3
 80013ea:	4334      	orrs	r4, r6
 80013ec:	e77d      	b.n	80012ea <__aeabi_dsub+0x4d2>
 80013ee:	074b      	lsls	r3, r1, #29
 80013f0:	08c2      	lsrs	r2, r0, #3
 80013f2:	431a      	orrs	r2, r3
 80013f4:	465d      	mov	r5, fp
 80013f6:	08cb      	lsrs	r3, r1, #3
 80013f8:	e6cc      	b.n	8001194 <__aeabi_dsub+0x37c>
 80013fa:	000a      	movs	r2, r1
 80013fc:	4302      	orrs	r2, r0
 80013fe:	d100      	bne.n	8001402 <__aeabi_dsub+0x5ea>
 8001400:	e736      	b.n	8001270 <__aeabi_dsub+0x458>
 8001402:	074b      	lsls	r3, r1, #29
 8001404:	08c2      	lsrs	r2, r0, #3
 8001406:	431a      	orrs	r2, r3
 8001408:	465d      	mov	r5, fp
 800140a:	08cb      	lsrs	r3, r1, #3
 800140c:	e681      	b.n	8001112 <__aeabi_dsub+0x2fa>
 800140e:	464a      	mov	r2, r9
 8001410:	1a84      	subs	r4, r0, r2
 8001412:	42a0      	cmp	r0, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	4252      	negs	r2, r2
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	4698      	mov	r8, r3
 800141e:	465d      	mov	r5, fp
 8001420:	2601      	movs	r6, #1
 8001422:	e54e      	b.n	8000ec2 <__aeabi_dsub+0xaa>
 8001424:	074b      	lsls	r3, r1, #29
 8001426:	08c2      	lsrs	r2, r0, #3
 8001428:	431a      	orrs	r2, r3
 800142a:	08cb      	lsrs	r3, r1, #3
 800142c:	e6b2      	b.n	8001194 <__aeabi_dsub+0x37c>
 800142e:	464a      	mov	r2, r9
 8001430:	1a14      	subs	r4, r2, r0
 8001432:	45a1      	cmp	r9, r4
 8001434:	4192      	sbcs	r2, r2
 8001436:	1a5f      	subs	r7, r3, r1
 8001438:	4252      	negs	r2, r2
 800143a:	1aba      	subs	r2, r7, r2
 800143c:	4690      	mov	r8, r2
 800143e:	0212      	lsls	r2, r2, #8
 8001440:	d56b      	bpl.n	800151a <__aeabi_dsub+0x702>
 8001442:	464a      	mov	r2, r9
 8001444:	1a84      	subs	r4, r0, r2
 8001446:	42a0      	cmp	r0, r4
 8001448:	4192      	sbcs	r2, r2
 800144a:	1acb      	subs	r3, r1, r3
 800144c:	4252      	negs	r2, r2
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	4698      	mov	r8, r3
 8001452:	465d      	mov	r5, fp
 8001454:	e564      	b.n	8000f20 <__aeabi_dsub+0x108>
 8001456:	074b      	lsls	r3, r1, #29
 8001458:	08c2      	lsrs	r2, r0, #3
 800145a:	431a      	orrs	r2, r3
 800145c:	465d      	mov	r5, fp
 800145e:	08cb      	lsrs	r3, r1, #3
 8001460:	e698      	b.n	8001194 <__aeabi_dsub+0x37c>
 8001462:	074b      	lsls	r3, r1, #29
 8001464:	08c2      	lsrs	r2, r0, #3
 8001466:	431a      	orrs	r2, r3
 8001468:	08cb      	lsrs	r3, r1, #3
 800146a:	e64f      	b.n	800110c <__aeabi_dsub+0x2f4>
 800146c:	000a      	movs	r2, r1
 800146e:	4302      	orrs	r2, r0
 8001470:	d090      	beq.n	8001394 <__aeabi_dsub+0x57c>
 8001472:	464a      	mov	r2, r9
 8001474:	075c      	lsls	r4, r3, #29
 8001476:	08d2      	lsrs	r2, r2, #3
 8001478:	4314      	orrs	r4, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	0312      	lsls	r2, r2, #12
 8001480:	4213      	tst	r3, r2
 8001482:	d008      	beq.n	8001496 <__aeabi_dsub+0x67e>
 8001484:	08ce      	lsrs	r6, r1, #3
 8001486:	4216      	tst	r6, r2
 8001488:	d105      	bne.n	8001496 <__aeabi_dsub+0x67e>
 800148a:	08c0      	lsrs	r0, r0, #3
 800148c:	0749      	lsls	r1, r1, #29
 800148e:	4308      	orrs	r0, r1
 8001490:	0004      	movs	r4, r0
 8001492:	465d      	mov	r5, fp
 8001494:	0033      	movs	r3, r6
 8001496:	0f61      	lsrs	r1, r4, #29
 8001498:	00e2      	lsls	r2, r4, #3
 800149a:	0749      	lsls	r1, r1, #29
 800149c:	08d2      	lsrs	r2, r2, #3
 800149e:	430a      	orrs	r2, r1
 80014a0:	e678      	b.n	8001194 <__aeabi_dsub+0x37c>
 80014a2:	074b      	lsls	r3, r1, #29
 80014a4:	08c2      	lsrs	r2, r0, #3
 80014a6:	431a      	orrs	r2, r3
 80014a8:	08cb      	lsrs	r3, r1, #3
 80014aa:	e632      	b.n	8001112 <__aeabi_dsub+0x2fa>
 80014ac:	4448      	add	r0, r9
 80014ae:	185b      	adds	r3, r3, r1
 80014b0:	4548      	cmp	r0, r9
 80014b2:	4192      	sbcs	r2, r2
 80014b4:	4698      	mov	r8, r3
 80014b6:	4252      	negs	r2, r2
 80014b8:	4490      	add	r8, r2
 80014ba:	4643      	mov	r3, r8
 80014bc:	0004      	movs	r4, r0
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	d400      	bmi.n	80014c4 <__aeabi_dsub+0x6ac>
 80014c2:	e61a      	b.n	80010fa <__aeabi_dsub+0x2e2>
 80014c4:	4642      	mov	r2, r8
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <__aeabi_dsub+0x6e8>)
 80014c8:	2601      	movs	r6, #1
 80014ca:	401a      	ands	r2, r3
 80014cc:	4690      	mov	r8, r2
 80014ce:	e614      	b.n	80010fa <__aeabi_dsub+0x2e2>
 80014d0:	4666      	mov	r6, ip
 80014d2:	001f      	movs	r7, r3
 80014d4:	3e20      	subs	r6, #32
 80014d6:	40f7      	lsrs	r7, r6
 80014d8:	2c20      	cmp	r4, #32
 80014da:	d005      	beq.n	80014e8 <__aeabi_dsub+0x6d0>
 80014dc:	2640      	movs	r6, #64	; 0x40
 80014de:	1b36      	subs	r6, r6, r4
 80014e0:	40b3      	lsls	r3, r6
 80014e2:	464c      	mov	r4, r9
 80014e4:	431c      	orrs	r4, r3
 80014e6:	46a2      	mov	sl, r4
 80014e8:	4654      	mov	r4, sl
 80014ea:	1e63      	subs	r3, r4, #1
 80014ec:	419c      	sbcs	r4, r3
 80014ee:	433c      	orrs	r4, r7
 80014f0:	e5c8      	b.n	8001084 <__aeabi_dsub+0x26c>
 80014f2:	0011      	movs	r1, r2
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	e532      	b.n	8000f60 <__aeabi_dsub+0x148>
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	ff7fffff 	.word	0xff7fffff
 8001504:	000007fe 	.word	0x000007fe
 8001508:	464a      	mov	r2, r9
 800150a:	1814      	adds	r4, r2, r0
 800150c:	4284      	cmp	r4, r0
 800150e:	4192      	sbcs	r2, r2
 8001510:	185b      	adds	r3, r3, r1
 8001512:	4698      	mov	r8, r3
 8001514:	4252      	negs	r2, r2
 8001516:	4490      	add	r8, r2
 8001518:	e5e9      	b.n	80010ee <__aeabi_dsub+0x2d6>
 800151a:	4642      	mov	r2, r8
 800151c:	4322      	orrs	r2, r4
 800151e:	d100      	bne.n	8001522 <__aeabi_dsub+0x70a>
 8001520:	e6a6      	b.n	8001270 <__aeabi_dsub+0x458>
 8001522:	e5ea      	b.n	80010fa <__aeabi_dsub+0x2e2>
 8001524:	074b      	lsls	r3, r1, #29
 8001526:	08c2      	lsrs	r2, r0, #3
 8001528:	431a      	orrs	r2, r3
 800152a:	08cb      	lsrs	r3, r1, #3
 800152c:	e632      	b.n	8001194 <__aeabi_dsub+0x37c>
 800152e:	2200      	movs	r2, #0
 8001530:	4901      	ldr	r1, [pc, #4]	; (8001538 <__aeabi_dsub+0x720>)
 8001532:	0013      	movs	r3, r2
 8001534:	e514      	b.n	8000f60 <__aeabi_dsub+0x148>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	000007ff 	.word	0x000007ff

0800153c <__aeabi_d2iz>:
 800153c:	000a      	movs	r2, r1
 800153e:	b530      	push	{r4, r5, lr}
 8001540:	4c13      	ldr	r4, [pc, #76]	; (8001590 <__aeabi_d2iz+0x54>)
 8001542:	0053      	lsls	r3, r2, #1
 8001544:	0309      	lsls	r1, r1, #12
 8001546:	0005      	movs	r5, r0
 8001548:	0b09      	lsrs	r1, r1, #12
 800154a:	2000      	movs	r0, #0
 800154c:	0d5b      	lsrs	r3, r3, #21
 800154e:	0fd2      	lsrs	r2, r2, #31
 8001550:	42a3      	cmp	r3, r4
 8001552:	dd04      	ble.n	800155e <__aeabi_d2iz+0x22>
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <__aeabi_d2iz+0x58>)
 8001556:	4283      	cmp	r3, r0
 8001558:	dd02      	ble.n	8001560 <__aeabi_d2iz+0x24>
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <__aeabi_d2iz+0x5c>)
 800155c:	18d0      	adds	r0, r2, r3
 800155e:	bd30      	pop	{r4, r5, pc}
 8001560:	2080      	movs	r0, #128	; 0x80
 8001562:	0340      	lsls	r0, r0, #13
 8001564:	4301      	orrs	r1, r0
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <__aeabi_d2iz+0x60>)
 8001568:	1ac0      	subs	r0, r0, r3
 800156a:	281f      	cmp	r0, #31
 800156c:	dd08      	ble.n	8001580 <__aeabi_d2iz+0x44>
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <__aeabi_d2iz+0x64>)
 8001570:	1ac3      	subs	r3, r0, r3
 8001572:	40d9      	lsrs	r1, r3
 8001574:	000b      	movs	r3, r1
 8001576:	4258      	negs	r0, r3
 8001578:	2a00      	cmp	r2, #0
 800157a:	d1f0      	bne.n	800155e <__aeabi_d2iz+0x22>
 800157c:	0018      	movs	r0, r3
 800157e:	e7ee      	b.n	800155e <__aeabi_d2iz+0x22>
 8001580:	4c08      	ldr	r4, [pc, #32]	; (80015a4 <__aeabi_d2iz+0x68>)
 8001582:	40c5      	lsrs	r5, r0
 8001584:	46a4      	mov	ip, r4
 8001586:	4463      	add	r3, ip
 8001588:	4099      	lsls	r1, r3
 800158a:	000b      	movs	r3, r1
 800158c:	432b      	orrs	r3, r5
 800158e:	e7f2      	b.n	8001576 <__aeabi_d2iz+0x3a>
 8001590:	000003fe 	.word	0x000003fe
 8001594:	0000041d 	.word	0x0000041d
 8001598:	7fffffff 	.word	0x7fffffff
 800159c:	00000433 	.word	0x00000433
 80015a0:	00000413 	.word	0x00000413
 80015a4:	fffffbed 	.word	0xfffffbed

080015a8 <__aeabi_i2d>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d016      	beq.n	80015dc <__aeabi_i2d+0x34>
 80015ae:	17c3      	asrs	r3, r0, #31
 80015b0:	18c5      	adds	r5, r0, r3
 80015b2:	405d      	eors	r5, r3
 80015b4:	0fc4      	lsrs	r4, r0, #31
 80015b6:	0028      	movs	r0, r5
 80015b8:	f000 f864 	bl	8001684 <__clzsi2>
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <__aeabi_i2d+0x5c>)
 80015be:	1a12      	subs	r2, r2, r0
 80015c0:	280a      	cmp	r0, #10
 80015c2:	dc16      	bgt.n	80015f2 <__aeabi_i2d+0x4a>
 80015c4:	0003      	movs	r3, r0
 80015c6:	002e      	movs	r6, r5
 80015c8:	3315      	adds	r3, #21
 80015ca:	409e      	lsls	r6, r3
 80015cc:	230b      	movs	r3, #11
 80015ce:	1a18      	subs	r0, r3, r0
 80015d0:	40c5      	lsrs	r5, r0
 80015d2:	0553      	lsls	r3, r2, #21
 80015d4:	032d      	lsls	r5, r5, #12
 80015d6:	0b2d      	lsrs	r5, r5, #12
 80015d8:	0d5b      	lsrs	r3, r3, #21
 80015da:	e003      	b.n	80015e4 <__aeabi_i2d+0x3c>
 80015dc:	2400      	movs	r4, #0
 80015de:	2300      	movs	r3, #0
 80015e0:	2500      	movs	r5, #0
 80015e2:	2600      	movs	r6, #0
 80015e4:	051b      	lsls	r3, r3, #20
 80015e6:	432b      	orrs	r3, r5
 80015e8:	07e4      	lsls	r4, r4, #31
 80015ea:	4323      	orrs	r3, r4
 80015ec:	0030      	movs	r0, r6
 80015ee:	0019      	movs	r1, r3
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
 80015f2:	380b      	subs	r0, #11
 80015f4:	4085      	lsls	r5, r0
 80015f6:	0553      	lsls	r3, r2, #21
 80015f8:	032d      	lsls	r5, r5, #12
 80015fa:	2600      	movs	r6, #0
 80015fc:	0b2d      	lsrs	r5, r5, #12
 80015fe:	0d5b      	lsrs	r3, r3, #21
 8001600:	e7f0      	b.n	80015e4 <__aeabi_i2d+0x3c>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	0000041e 	.word	0x0000041e

08001608 <__aeabi_cdrcmple>:
 8001608:	4684      	mov	ip, r0
 800160a:	1c10      	adds	r0, r2, #0
 800160c:	4662      	mov	r2, ip
 800160e:	468c      	mov	ip, r1
 8001610:	1c19      	adds	r1, r3, #0
 8001612:	4663      	mov	r3, ip
 8001614:	e000      	b.n	8001618 <__aeabi_cdcmpeq>
 8001616:	46c0      	nop			; (mov r8, r8)

08001618 <__aeabi_cdcmpeq>:
 8001618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800161a:	f000 f8ff 	bl	800181c <__ledf2>
 800161e:	2800      	cmp	r0, #0
 8001620:	d401      	bmi.n	8001626 <__aeabi_cdcmpeq+0xe>
 8001622:	2100      	movs	r1, #0
 8001624:	42c8      	cmn	r0, r1
 8001626:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001628 <__aeabi_dcmpeq>:
 8001628:	b510      	push	{r4, lr}
 800162a:	f000 f849 	bl	80016c0 <__eqdf2>
 800162e:	4240      	negs	r0, r0
 8001630:	3001      	adds	r0, #1
 8001632:	bd10      	pop	{r4, pc}

08001634 <__aeabi_dcmplt>:
 8001634:	b510      	push	{r4, lr}
 8001636:	f000 f8f1 	bl	800181c <__ledf2>
 800163a:	2800      	cmp	r0, #0
 800163c:	db01      	blt.n	8001642 <__aeabi_dcmplt+0xe>
 800163e:	2000      	movs	r0, #0
 8001640:	bd10      	pop	{r4, pc}
 8001642:	2001      	movs	r0, #1
 8001644:	bd10      	pop	{r4, pc}
 8001646:	46c0      	nop			; (mov r8, r8)

08001648 <__aeabi_dcmple>:
 8001648:	b510      	push	{r4, lr}
 800164a:	f000 f8e7 	bl	800181c <__ledf2>
 800164e:	2800      	cmp	r0, #0
 8001650:	dd01      	ble.n	8001656 <__aeabi_dcmple+0xe>
 8001652:	2000      	movs	r0, #0
 8001654:	bd10      	pop	{r4, pc}
 8001656:	2001      	movs	r0, #1
 8001658:	bd10      	pop	{r4, pc}
 800165a:	46c0      	nop			; (mov r8, r8)

0800165c <__aeabi_dcmpgt>:
 800165c:	b510      	push	{r4, lr}
 800165e:	f000 f86b 	bl	8001738 <__gedf2>
 8001662:	2800      	cmp	r0, #0
 8001664:	dc01      	bgt.n	800166a <__aeabi_dcmpgt+0xe>
 8001666:	2000      	movs	r0, #0
 8001668:	bd10      	pop	{r4, pc}
 800166a:	2001      	movs	r0, #1
 800166c:	bd10      	pop	{r4, pc}
 800166e:	46c0      	nop			; (mov r8, r8)

08001670 <__aeabi_dcmpge>:
 8001670:	b510      	push	{r4, lr}
 8001672:	f000 f861 	bl	8001738 <__gedf2>
 8001676:	2800      	cmp	r0, #0
 8001678:	da01      	bge.n	800167e <__aeabi_dcmpge+0xe>
 800167a:	2000      	movs	r0, #0
 800167c:	bd10      	pop	{r4, pc}
 800167e:	2001      	movs	r0, #1
 8001680:	bd10      	pop	{r4, pc}
 8001682:	46c0      	nop			; (mov r8, r8)

08001684 <__clzsi2>:
 8001684:	211c      	movs	r1, #28
 8001686:	2301      	movs	r3, #1
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	4298      	cmp	r0, r3
 800168c:	d301      	bcc.n	8001692 <__clzsi2+0xe>
 800168e:	0c00      	lsrs	r0, r0, #16
 8001690:	3910      	subs	r1, #16
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	4298      	cmp	r0, r3
 8001696:	d301      	bcc.n	800169c <__clzsi2+0x18>
 8001698:	0a00      	lsrs	r0, r0, #8
 800169a:	3908      	subs	r1, #8
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	4298      	cmp	r0, r3
 80016a0:	d301      	bcc.n	80016a6 <__clzsi2+0x22>
 80016a2:	0900      	lsrs	r0, r0, #4
 80016a4:	3904      	subs	r1, #4
 80016a6:	a202      	add	r2, pc, #8	; (adr r2, 80016b0 <__clzsi2+0x2c>)
 80016a8:	5c10      	ldrb	r0, [r2, r0]
 80016aa:	1840      	adds	r0, r0, r1
 80016ac:	4770      	bx	lr
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	02020304 	.word	0x02020304
 80016b4:	01010101 	.word	0x01010101
	...

080016c0 <__eqdf2>:
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	464f      	mov	r7, r9
 80016c4:	4646      	mov	r6, r8
 80016c6:	46d6      	mov	lr, sl
 80016c8:	4694      	mov	ip, r2
 80016ca:	4691      	mov	r9, r2
 80016cc:	031a      	lsls	r2, r3, #12
 80016ce:	0b12      	lsrs	r2, r2, #12
 80016d0:	4d18      	ldr	r5, [pc, #96]	; (8001734 <__eqdf2+0x74>)
 80016d2:	b5c0      	push	{r6, r7, lr}
 80016d4:	004c      	lsls	r4, r1, #1
 80016d6:	030f      	lsls	r7, r1, #12
 80016d8:	4692      	mov	sl, r2
 80016da:	005a      	lsls	r2, r3, #1
 80016dc:	0006      	movs	r6, r0
 80016de:	4680      	mov	r8, r0
 80016e0:	0b3f      	lsrs	r7, r7, #12
 80016e2:	2001      	movs	r0, #1
 80016e4:	0d64      	lsrs	r4, r4, #21
 80016e6:	0fc9      	lsrs	r1, r1, #31
 80016e8:	0d52      	lsrs	r2, r2, #21
 80016ea:	0fdb      	lsrs	r3, r3, #31
 80016ec:	42ac      	cmp	r4, r5
 80016ee:	d00a      	beq.n	8001706 <__eqdf2+0x46>
 80016f0:	42aa      	cmp	r2, r5
 80016f2:	d003      	beq.n	80016fc <__eqdf2+0x3c>
 80016f4:	4294      	cmp	r4, r2
 80016f6:	d101      	bne.n	80016fc <__eqdf2+0x3c>
 80016f8:	4557      	cmp	r7, sl
 80016fa:	d00d      	beq.n	8001718 <__eqdf2+0x58>
 80016fc:	bce0      	pop	{r5, r6, r7}
 80016fe:	46ba      	mov	sl, r7
 8001700:	46b1      	mov	r9, r6
 8001702:	46a8      	mov	r8, r5
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	003d      	movs	r5, r7
 8001708:	4335      	orrs	r5, r6
 800170a:	d1f7      	bne.n	80016fc <__eqdf2+0x3c>
 800170c:	42a2      	cmp	r2, r4
 800170e:	d1f5      	bne.n	80016fc <__eqdf2+0x3c>
 8001710:	4652      	mov	r2, sl
 8001712:	4665      	mov	r5, ip
 8001714:	432a      	orrs	r2, r5
 8001716:	d1f1      	bne.n	80016fc <__eqdf2+0x3c>
 8001718:	2001      	movs	r0, #1
 800171a:	45c8      	cmp	r8, r9
 800171c:	d1ee      	bne.n	80016fc <__eqdf2+0x3c>
 800171e:	4299      	cmp	r1, r3
 8001720:	d006      	beq.n	8001730 <__eqdf2+0x70>
 8001722:	2c00      	cmp	r4, #0
 8001724:	d1ea      	bne.n	80016fc <__eqdf2+0x3c>
 8001726:	433e      	orrs	r6, r7
 8001728:	0030      	movs	r0, r6
 800172a:	1e46      	subs	r6, r0, #1
 800172c:	41b0      	sbcs	r0, r6
 800172e:	e7e5      	b.n	80016fc <__eqdf2+0x3c>
 8001730:	2000      	movs	r0, #0
 8001732:	e7e3      	b.n	80016fc <__eqdf2+0x3c>
 8001734:	000007ff 	.word	0x000007ff

08001738 <__gedf2>:
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	464e      	mov	r6, r9
 800173c:	4645      	mov	r5, r8
 800173e:	4657      	mov	r7, sl
 8001740:	46de      	mov	lr, fp
 8001742:	0004      	movs	r4, r0
 8001744:	0018      	movs	r0, r3
 8001746:	b5e0      	push	{r5, r6, r7, lr}
 8001748:	0016      	movs	r6, r2
 800174a:	031b      	lsls	r3, r3, #12
 800174c:	0b1b      	lsrs	r3, r3, #12
 800174e:	4d32      	ldr	r5, [pc, #200]	; (8001818 <__gedf2+0xe0>)
 8001750:	030f      	lsls	r7, r1, #12
 8001752:	004a      	lsls	r2, r1, #1
 8001754:	4699      	mov	r9, r3
 8001756:	0043      	lsls	r3, r0, #1
 8001758:	46a4      	mov	ip, r4
 800175a:	46b0      	mov	r8, r6
 800175c:	0b3f      	lsrs	r7, r7, #12
 800175e:	0d52      	lsrs	r2, r2, #21
 8001760:	0fc9      	lsrs	r1, r1, #31
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	0fc0      	lsrs	r0, r0, #31
 8001766:	42aa      	cmp	r2, r5
 8001768:	d029      	beq.n	80017be <__gedf2+0x86>
 800176a:	42ab      	cmp	r3, r5
 800176c:	d018      	beq.n	80017a0 <__gedf2+0x68>
 800176e:	2a00      	cmp	r2, #0
 8001770:	d12a      	bne.n	80017c8 <__gedf2+0x90>
 8001772:	433c      	orrs	r4, r7
 8001774:	46a3      	mov	fp, r4
 8001776:	4265      	negs	r5, r4
 8001778:	4165      	adcs	r5, r4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <__gedf2+0x4c>
 800177e:	464c      	mov	r4, r9
 8001780:	4326      	orrs	r6, r4
 8001782:	d027      	beq.n	80017d4 <__gedf2+0x9c>
 8001784:	2d00      	cmp	r5, #0
 8001786:	d115      	bne.n	80017b4 <__gedf2+0x7c>
 8001788:	4281      	cmp	r1, r0
 800178a:	d028      	beq.n	80017de <__gedf2+0xa6>
 800178c:	2002      	movs	r0, #2
 800178e:	3901      	subs	r1, #1
 8001790:	4008      	ands	r0, r1
 8001792:	3801      	subs	r0, #1
 8001794:	bcf0      	pop	{r4, r5, r6, r7}
 8001796:	46bb      	mov	fp, r7
 8001798:	46b2      	mov	sl, r6
 800179a:	46a9      	mov	r9, r5
 800179c:	46a0      	mov	r8, r4
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a0:	464d      	mov	r5, r9
 80017a2:	432e      	orrs	r6, r5
 80017a4:	d12f      	bne.n	8001806 <__gedf2+0xce>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d1ee      	bne.n	8001788 <__gedf2+0x50>
 80017aa:	433c      	orrs	r4, r7
 80017ac:	4265      	negs	r5, r4
 80017ae:	4165      	adcs	r5, r4
 80017b0:	2d00      	cmp	r5, #0
 80017b2:	d0e9      	beq.n	8001788 <__gedf2+0x50>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d1ed      	bne.n	8001794 <__gedf2+0x5c>
 80017b8:	2001      	movs	r0, #1
 80017ba:	4240      	negs	r0, r0
 80017bc:	e7ea      	b.n	8001794 <__gedf2+0x5c>
 80017be:	003d      	movs	r5, r7
 80017c0:	4325      	orrs	r5, r4
 80017c2:	d120      	bne.n	8001806 <__gedf2+0xce>
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d0eb      	beq.n	80017a0 <__gedf2+0x68>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1dd      	bne.n	8001788 <__gedf2+0x50>
 80017cc:	464c      	mov	r4, r9
 80017ce:	4326      	orrs	r6, r4
 80017d0:	d1da      	bne.n	8001788 <__gedf2+0x50>
 80017d2:	e7db      	b.n	800178c <__gedf2+0x54>
 80017d4:	465b      	mov	r3, fp
 80017d6:	2000      	movs	r0, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0db      	beq.n	8001794 <__gedf2+0x5c>
 80017dc:	e7d6      	b.n	800178c <__gedf2+0x54>
 80017de:	429a      	cmp	r2, r3
 80017e0:	dc0a      	bgt.n	80017f8 <__gedf2+0xc0>
 80017e2:	dbe7      	blt.n	80017b4 <__gedf2+0x7c>
 80017e4:	454f      	cmp	r7, r9
 80017e6:	d8d1      	bhi.n	800178c <__gedf2+0x54>
 80017e8:	d010      	beq.n	800180c <__gedf2+0xd4>
 80017ea:	2000      	movs	r0, #0
 80017ec:	454f      	cmp	r7, r9
 80017ee:	d2d1      	bcs.n	8001794 <__gedf2+0x5c>
 80017f0:	2900      	cmp	r1, #0
 80017f2:	d0e1      	beq.n	80017b8 <__gedf2+0x80>
 80017f4:	0008      	movs	r0, r1
 80017f6:	e7cd      	b.n	8001794 <__gedf2+0x5c>
 80017f8:	4243      	negs	r3, r0
 80017fa:	4158      	adcs	r0, r3
 80017fc:	2302      	movs	r3, #2
 80017fe:	4240      	negs	r0, r0
 8001800:	4018      	ands	r0, r3
 8001802:	3801      	subs	r0, #1
 8001804:	e7c6      	b.n	8001794 <__gedf2+0x5c>
 8001806:	2002      	movs	r0, #2
 8001808:	4240      	negs	r0, r0
 800180a:	e7c3      	b.n	8001794 <__gedf2+0x5c>
 800180c:	45c4      	cmp	ip, r8
 800180e:	d8bd      	bhi.n	800178c <__gedf2+0x54>
 8001810:	2000      	movs	r0, #0
 8001812:	45c4      	cmp	ip, r8
 8001814:	d2be      	bcs.n	8001794 <__gedf2+0x5c>
 8001816:	e7eb      	b.n	80017f0 <__gedf2+0xb8>
 8001818:	000007ff 	.word	0x000007ff

0800181c <__ledf2>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	464e      	mov	r6, r9
 8001820:	4645      	mov	r5, r8
 8001822:	4657      	mov	r7, sl
 8001824:	46de      	mov	lr, fp
 8001826:	0004      	movs	r4, r0
 8001828:	0018      	movs	r0, r3
 800182a:	b5e0      	push	{r5, r6, r7, lr}
 800182c:	0016      	movs	r6, r2
 800182e:	031b      	lsls	r3, r3, #12
 8001830:	0b1b      	lsrs	r3, r3, #12
 8001832:	4d31      	ldr	r5, [pc, #196]	; (80018f8 <__ledf2+0xdc>)
 8001834:	030f      	lsls	r7, r1, #12
 8001836:	004a      	lsls	r2, r1, #1
 8001838:	4699      	mov	r9, r3
 800183a:	0043      	lsls	r3, r0, #1
 800183c:	46a4      	mov	ip, r4
 800183e:	46b0      	mov	r8, r6
 8001840:	0b3f      	lsrs	r7, r7, #12
 8001842:	0d52      	lsrs	r2, r2, #21
 8001844:	0fc9      	lsrs	r1, r1, #31
 8001846:	0d5b      	lsrs	r3, r3, #21
 8001848:	0fc0      	lsrs	r0, r0, #31
 800184a:	42aa      	cmp	r2, r5
 800184c:	d011      	beq.n	8001872 <__ledf2+0x56>
 800184e:	42ab      	cmp	r3, r5
 8001850:	d014      	beq.n	800187c <__ledf2+0x60>
 8001852:	2a00      	cmp	r2, #0
 8001854:	d12f      	bne.n	80018b6 <__ledf2+0x9a>
 8001856:	433c      	orrs	r4, r7
 8001858:	46a3      	mov	fp, r4
 800185a:	4265      	negs	r5, r4
 800185c:	4165      	adcs	r5, r4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d114      	bne.n	800188c <__ledf2+0x70>
 8001862:	464c      	mov	r4, r9
 8001864:	4326      	orrs	r6, r4
 8001866:	d111      	bne.n	800188c <__ledf2+0x70>
 8001868:	465b      	mov	r3, fp
 800186a:	2000      	movs	r0, #0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d017      	beq.n	80018a0 <__ledf2+0x84>
 8001870:	e010      	b.n	8001894 <__ledf2+0x78>
 8001872:	003d      	movs	r5, r7
 8001874:	4325      	orrs	r5, r4
 8001876:	d112      	bne.n	800189e <__ledf2+0x82>
 8001878:	4293      	cmp	r3, r2
 800187a:	d11c      	bne.n	80018b6 <__ledf2+0x9a>
 800187c:	464d      	mov	r5, r9
 800187e:	432e      	orrs	r6, r5
 8001880:	d10d      	bne.n	800189e <__ledf2+0x82>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d104      	bne.n	8001890 <__ledf2+0x74>
 8001886:	433c      	orrs	r4, r7
 8001888:	4265      	negs	r5, r4
 800188a:	4165      	adcs	r5, r4
 800188c:	2d00      	cmp	r5, #0
 800188e:	d10d      	bne.n	80018ac <__ledf2+0x90>
 8001890:	4281      	cmp	r1, r0
 8001892:	d016      	beq.n	80018c2 <__ledf2+0xa6>
 8001894:	2002      	movs	r0, #2
 8001896:	3901      	subs	r1, #1
 8001898:	4008      	ands	r0, r1
 800189a:	3801      	subs	r0, #1
 800189c:	e000      	b.n	80018a0 <__ledf2+0x84>
 800189e:	2002      	movs	r0, #2
 80018a0:	bcf0      	pop	{r4, r5, r6, r7}
 80018a2:	46bb      	mov	fp, r7
 80018a4:	46b2      	mov	sl, r6
 80018a6:	46a9      	mov	r9, r5
 80018a8:	46a0      	mov	r8, r4
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d1f7      	bne.n	80018a0 <__ledf2+0x84>
 80018b0:	2001      	movs	r0, #1
 80018b2:	4240      	negs	r0, r0
 80018b4:	e7f4      	b.n	80018a0 <__ledf2+0x84>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ea      	bne.n	8001890 <__ledf2+0x74>
 80018ba:	464c      	mov	r4, r9
 80018bc:	4326      	orrs	r6, r4
 80018be:	d1e7      	bne.n	8001890 <__ledf2+0x74>
 80018c0:	e7e8      	b.n	8001894 <__ledf2+0x78>
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dd06      	ble.n	80018d4 <__ledf2+0xb8>
 80018c6:	4243      	negs	r3, r0
 80018c8:	4158      	adcs	r0, r3
 80018ca:	2302      	movs	r3, #2
 80018cc:	4240      	negs	r0, r0
 80018ce:	4018      	ands	r0, r3
 80018d0:	3801      	subs	r0, #1
 80018d2:	e7e5      	b.n	80018a0 <__ledf2+0x84>
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbe9      	blt.n	80018ac <__ledf2+0x90>
 80018d8:	454f      	cmp	r7, r9
 80018da:	d8db      	bhi.n	8001894 <__ledf2+0x78>
 80018dc:	d006      	beq.n	80018ec <__ledf2+0xd0>
 80018de:	2000      	movs	r0, #0
 80018e0:	454f      	cmp	r7, r9
 80018e2:	d2dd      	bcs.n	80018a0 <__ledf2+0x84>
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d0e3      	beq.n	80018b0 <__ledf2+0x94>
 80018e8:	0008      	movs	r0, r1
 80018ea:	e7d9      	b.n	80018a0 <__ledf2+0x84>
 80018ec:	45c4      	cmp	ip, r8
 80018ee:	d8d1      	bhi.n	8001894 <__ledf2+0x78>
 80018f0:	2000      	movs	r0, #0
 80018f2:	45c4      	cmp	ip, r8
 80018f4:	d2d4      	bcs.n	80018a0 <__ledf2+0x84>
 80018f6:	e7f5      	b.n	80018e4 <__ledf2+0xc8>
 80018f8:	000007ff 	.word	0x000007ff

080018fc <output_D0_D15_port>:
static inline __attribute__((optimize("Ofast"))) void output_D0_D15_port (uint16_t b){
	output_D0_D7((uint8_t)(b & 0x00ff));
	output_D8_D15((uint8_t)(b>>8));
}
#else
static inline __attribute__((optimize("Ofast"))) void output_D0_D15_port (uint16_t b){GPIOB->ODR = b;}
 80018fc:	4b01      	ldr	r3, [pc, #4]	; (8001904 <output_D0_D15_port+0x8>)
 80018fe:	6158      	str	r0, [r3, #20]
 8001900:	4770      	bx	lr
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	48000400 	.word	0x48000400

08001908 <WritePulse>:
static inline __attribute__((optimize("Ofast"))) void WritePulse (void){
 8001908:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800190a:	2580      	movs	r5, #128	; 0x80
 800190c:	2490      	movs	r4, #144	; 0x90
 800190e:	016d      	lsls	r5, r5, #5
 8001910:	05e4      	lsls	r4, r4, #23
 8001912:	0029      	movs	r1, r5
 8001914:	0020      	movs	r0, r4
 8001916:	2200      	movs	r2, #0
 8001918:	f002 fec8 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800191c:	0029      	movs	r1, r5
 800191e:	2201      	movs	r2, #1
 8001920:	0020      	movs	r0, r4
 8001922:	f002 fec3 	bl	80046ac <HAL_GPIO_WritePin>
}
 8001926:	bd70      	pop	{r4, r5, r6, pc}

08001928 <LCD_ILI9488_init>:
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

//-**************************************************************

void LCD_ILI9488_init(void){
 8001928:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	48fc      	ldr	r0, [pc, #1008]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001930:	f002 febc 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f002 fcad 	bl	8004294 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	48f8      	ldr	r0, [pc, #992]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001940:	f002 feb4 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001944:	2064      	movs	r0, #100	; 0x64
 8001946:	f002 fca5 	bl	8004294 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2140      	movs	r1, #64	; 0x40
 800194e:	48f4      	ldr	r0, [pc, #976]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001950:	f002 feac 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	2090      	movs	r0, #144	; 0x90
 8001958:	2200      	movs	r2, #0
 800195a:	0209      	lsls	r1, r1, #8
 800195c:	05c0      	lsls	r0, r0, #23
 800195e:	f002 fea5 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001962:	20b0      	movs	r0, #176	; 0xb0
 8001964:	f7ff ffca 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001968:	f7ff ffce 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	2090      	movs	r0, #144	; 0x90
 8001970:	2201      	movs	r2, #1
 8001972:	0209      	lsls	r1, r1, #8
 8001974:	05c0      	lsls	r0, r0, #23
 8001976:	f002 fe99 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 800197a:	201e      	movs	r0, #30
 800197c:	f7ff ffbe 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001980:	f7ff ffc2 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	2140      	movs	r1, #64	; 0x40
 8001988:	48e5      	ldr	r0, [pc, #916]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 800198a:	f002 fe8f 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2140      	movs	r1, #64	; 0x40
 8001992:	48e3      	ldr	r0, [pc, #908]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001994:	f002 fe8a 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	2090      	movs	r0, #144	; 0x90
 800199c:	2200      	movs	r2, #0
 800199e:	0209      	lsls	r1, r1, #8
 80019a0:	05c0      	lsls	r0, r0, #23
 80019a2:	f002 fe83 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 80019a6:	20b0      	movs	r0, #176	; 0xb0
 80019a8:	f7ff ffa8 	bl	80018fc <output_D0_D15_port>
WritePulse();
 80019ac:	f7ff ffac 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	2090      	movs	r0, #144	; 0x90
 80019b4:	2201      	movs	r2, #1
 80019b6:	0209      	lsls	r1, r1, #8
 80019b8:	05c0      	lsls	r0, r0, #23
 80019ba:	f002 fe77 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff ff9c 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 80019c4:	f7ff ffa0 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	48d4      	ldr	r0, [pc, #848]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 80019ce:	f002 fe6d 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2140      	movs	r1, #64	; 0x40
 80019d6:	48d2      	ldr	r0, [pc, #840]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 80019d8:	f002 fe68 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	2090      	movs	r0, #144	; 0x90
 80019e0:	2200      	movs	r2, #0
 80019e2:	0209      	lsls	r1, r1, #8
 80019e4:	05c0      	lsls	r0, r0, #23
 80019e6:	f002 fe61 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 80019ea:	20b3      	movs	r0, #179	; 0xb3
 80019ec:	f7ff ff86 	bl	80018fc <output_D0_D15_port>
WritePulse();
 80019f0:	f7ff ff8a 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	2090      	movs	r0, #144	; 0x90
 80019f8:	2201      	movs	r2, #1
 80019fa:	0209      	lsls	r1, r1, #8
 80019fc:	05c0      	lsls	r0, r0, #23
 80019fe:	f002 fe55 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7ff ff7a 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001a08:	f7ff ff7e 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff ff75 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001a12:	f7ff ff79 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff ff70 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001a1c:	f7ff ff74 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001a20:	2010      	movs	r0, #16
 8001a22:	f7ff ff6b 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001a26:	f7ff ff6f 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	48bc      	ldr	r0, [pc, #752]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001a30:	f002 fe3c 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	48b9      	ldr	r0, [pc, #740]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001a3a:	f002 fe37 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	2090      	movs	r0, #144	; 0x90
 8001a42:	2200      	movs	r2, #0
 8001a44:	0209      	lsls	r1, r1, #8
 8001a46:	05c0      	lsls	r0, r0, #23
 8001a48:	f002 fe30 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001a4c:	20b4      	movs	r0, #180	; 0xb4
 8001a4e:	f7ff ff55 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001a52:	f7ff ff59 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	2090      	movs	r0, #144	; 0x90
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	0209      	lsls	r1, r1, #8
 8001a5e:	05c0      	lsls	r0, r0, #23
 8001a60:	f002 fe24 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff ff49 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001a6a:	f7ff ff4d 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2140      	movs	r1, #64	; 0x40
 8001a72:	48ab      	ldr	r0, [pc, #684]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001a74:	f002 fe1a 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	48a8      	ldr	r0, [pc, #672]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001a7e:	f002 fe15 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	2090      	movs	r0, #144	; 0x90
 8001a86:	2200      	movs	r2, #0
 8001a88:	0209      	lsls	r1, r1, #8
 8001a8a:	05c0      	lsls	r0, r0, #23
 8001a8c:	f002 fe0e 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001a90:	20c0      	movs	r0, #192	; 0xc0
 8001a92:	f7ff ff33 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001a96:	f7ff ff37 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	2090      	movs	r0, #144	; 0x90
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	0209      	lsls	r1, r1, #8
 8001aa2:	05c0      	lsls	r0, r0, #23
 8001aa4:	f002 fe02 	bl	80046ac <HAL_GPIO_WritePin>
while(params_q_ty){
 8001aa8:	4c9e      	ldr	r4, [pc, #632]	; (8001d24 <LCD_ILI9488_init+0x3fc>)
 8001aaa:	0025      	movs	r5, r4
 8001aac:	3508      	adds	r5, #8
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001aae:	78a0      	ldrb	r0, [r4, #2]
 8001ab0:	3401      	adds	r4, #1
 8001ab2:	f7ff ff23 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001ab6:	f7ff ff27 	bl	8001908 <WritePulse>
while(params_q_ty){
 8001aba:	42ac      	cmp	r4, r5
 8001abc:	d1f7      	bne.n	8001aae <LCD_ILI9488_init+0x186>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4897      	ldr	r0, [pc, #604]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001ac4:	f002 fdf2 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2140      	movs	r1, #64	; 0x40
 8001acc:	4894      	ldr	r0, [pc, #592]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001ace:	f002 fded 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	2090      	movs	r0, #144	; 0x90
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	0209      	lsls	r1, r1, #8
 8001ada:	05c0      	lsls	r0, r0, #23
 8001adc:	f002 fde6 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001ae0:	20c1      	movs	r0, #193	; 0xc1
 8001ae2:	f7ff ff0b 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001ae6:	f7ff ff0f 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	2090      	movs	r0, #144	; 0x90
 8001aee:	2201      	movs	r2, #1
 8001af0:	0209      	lsls	r1, r1, #8
 8001af2:	05c0      	lsls	r0, r0, #23
 8001af4:	f002 fdda 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001af8:	2008      	movs	r0, #8
 8001afa:	f7ff feff 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001afe:	f7ff ff03 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b02:	2015      	movs	r0, #21
 8001b04:	f7ff fefa 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b08:	f7ff fefe 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b0c:	2008      	movs	r0, #8
 8001b0e:	f7ff fef5 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b12:	f7ff fef9 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b16:	2008      	movs	r0, #8
 8001b18:	f7ff fef0 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b1c:	f7ff fef4 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2140      	movs	r1, #64	; 0x40
 8001b24:	487e      	ldr	r0, [pc, #504]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001b26:	f002 fdc1 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	487c      	ldr	r0, [pc, #496]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001b30:	f002 fdbc 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	2090      	movs	r0, #144	; 0x90
 8001b38:	2200      	movs	r2, #0
 8001b3a:	0209      	lsls	r1, r1, #8
 8001b3c:	05c0      	lsls	r0, r0, #23
 8001b3e:	f002 fdb5 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001b42:	20c4      	movs	r0, #196	; 0xc4
 8001b44:	f7ff feda 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001b48:	f7ff fede 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	2090      	movs	r0, #144	; 0x90
 8001b50:	2201      	movs	r2, #1
 8001b52:	0209      	lsls	r1, r1, #8
 8001b54:	05c0      	lsls	r0, r0, #23
 8001b56:	f002 fda9 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b5a:	2015      	movs	r0, #21
 8001b5c:	f7ff fece 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b60:	f7ff fed2 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f7ff fec9 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b6a:	f7ff fecd 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7ff fec4 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b74:	f7ff fec8 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff febf 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001b7e:	f7ff fec3 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2140      	movs	r1, #64	; 0x40
 8001b86:	4866      	ldr	r0, [pc, #408]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001b88:	f002 fd90 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	4863      	ldr	r0, [pc, #396]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001b92:	f002 fd8b 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	2090      	movs	r0, #144	; 0x90
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	0209      	lsls	r1, r1, #8
 8001b9e:	05c0      	lsls	r0, r0, #23
 8001ba0:	f002 fd84 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001ba4:	20c6      	movs	r0, #198	; 0xc6
 8001ba6:	f7ff fea9 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001baa:	f7ff fead 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	2090      	movs	r0, #144	; 0x90
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	0209      	lsls	r1, r1, #8
 8001bb6:	05c0      	lsls	r0, r0, #23
 8001bb8:	f002 fd78 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f7ff fe9d 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001bc2:	f7ff fea1 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2140      	movs	r1, #64	; 0x40
 8001bca:	4855      	ldr	r0, [pc, #340]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001bcc:	f002 fd6e 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2140      	movs	r1, #64	; 0x40
 8001bd4:	4852      	ldr	r0, [pc, #328]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001bd6:	f002 fd69 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	2090      	movs	r0, #144	; 0x90
 8001bde:	2200      	movs	r2, #0
 8001be0:	0209      	lsls	r1, r1, #8
 8001be2:	05c0      	lsls	r0, r0, #23
 8001be4:	f002 fd62 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001be8:	20c8      	movs	r0, #200	; 0xc8
 8001bea:	f7ff fe87 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001bee:	f7ff fe8b 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	2090      	movs	r0, #144	; 0x90
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	0209      	lsls	r1, r1, #8
 8001bfa:	05c0      	lsls	r0, r0, #23
 8001bfc:	f002 fd56 	bl	80046ac <HAL_GPIO_WritePin>
while(params_q_ty){
 8001c00:	4c49      	ldr	r4, [pc, #292]	; (8001d28 <LCD_ILI9488_init+0x400>)
 8001c02:	1ca5      	adds	r5, r4, #2
 8001c04:	340c      	adds	r4, #12
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001c06:	7828      	ldrb	r0, [r5, #0]
 8001c08:	3501      	adds	r5, #1
 8001c0a:	f7ff fe77 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001c0e:	f7ff fe7b 	bl	8001908 <WritePulse>
while(params_q_ty){
 8001c12:	42ac      	cmp	r4, r5
 8001c14:	d1f7      	bne.n	8001c06 <LCD_ILI9488_init+0x2de>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c16:	2201      	movs	r2, #1
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	4841      	ldr	r0, [pc, #260]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001c1c:	f002 fd46 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	483e      	ldr	r0, [pc, #248]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001c26:	f002 fd41 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	2090      	movs	r0, #144	; 0x90
 8001c2e:	2200      	movs	r2, #0
 8001c30:	0209      	lsls	r1, r1, #8
 8001c32:	05c0      	lsls	r0, r0, #23
 8001c34:	f002 fd3a 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001c38:	2036      	movs	r0, #54	; 0x36
 8001c3a:	f7ff fe5f 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001c3e:	f7ff fe63 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	2090      	movs	r0, #144	; 0x90
 8001c46:	2201      	movs	r2, #1
 8001c48:	0209      	lsls	r1, r1, #8
 8001c4a:	05c0      	lsls	r0, r0, #23
 8001c4c:	f002 fd2e 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001c50:	202a      	movs	r0, #42	; 0x2a
 8001c52:	f7ff fe53 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001c56:	f7ff fe57 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	4830      	ldr	r0, [pc, #192]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001c60:	f002 fd24 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	482d      	ldr	r0, [pc, #180]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001c6a:	f002 fd1f 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	2090      	movs	r0, #144	; 0x90
 8001c72:	2200      	movs	r2, #0
 8001c74:	0209      	lsls	r1, r1, #8
 8001c76:	05c0      	lsls	r0, r0, #23
 8001c78:	f002 fd18 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001c7c:	203a      	movs	r0, #58	; 0x3a
 8001c7e:	f7ff fe3d 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001c82:	f7ff fe41 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	2090      	movs	r0, #144	; 0x90
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	0209      	lsls	r1, r1, #8
 8001c8e:	05c0      	lsls	r0, r0, #23
 8001c90:	f002 fd0c 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001c94:	2055      	movs	r0, #85	; 0x55
 8001c96:	f7ff fe31 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001c9a:	f7ff fe35 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2140      	movs	r1, #64	; 0x40
 8001ca2:	481f      	ldr	r0, [pc, #124]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001ca4:	f002 fd02 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	481c      	ldr	r0, [pc, #112]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001cae:	f002 fcfd 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	2090      	movs	r0, #144	; 0x90
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	0209      	lsls	r1, r1, #8
 8001cba:	05c0      	lsls	r0, r0, #23
 8001cbc:	f002 fcf6 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001cc0:	2038      	movs	r0, #56	; 0x38
 8001cc2:	f7ff fe1b 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001cc6:	f7ff fe1f 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	2090      	movs	r0, #144	; 0x90
 8001cce:	2201      	movs	r2, #1
 8001cd0:	0209      	lsls	r1, r1, #8
 8001cd2:	05c0      	lsls	r0, r0, #23
 8001cd4:	f002 fcea 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	4810      	ldr	r0, [pc, #64]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001cde:	f002 fce5 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <LCD_ILI9488_init+0x3f8>)
 8001ce8:	f002 fce0 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	2090      	movs	r0, #144	; 0x90
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	0209      	lsls	r1, r1, #8
 8001cf4:	05c0      	lsls	r0, r0, #23
 8001cf6:	f002 fcd9 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001cfa:	20d0      	movs	r0, #208	; 0xd0
 8001cfc:	f7ff fdfe 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001d00:	f7ff fe02 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	2090      	movs	r0, #144	; 0x90
 8001d08:	2201      	movs	r2, #1
 8001d0a:	0209      	lsls	r1, r1, #8
 8001d0c:	05c0      	lsls	r0, r0, #23
 8001d0e:	f002 fccd 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d12:	2007      	movs	r0, #7
 8001d14:	f7ff fdf2 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d18:	f7ff fdf6 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d1c:	2007      	movs	r0, #7
 8001d1e:	e005      	b.n	8001d2c <LCD_ILI9488_init+0x404>
 8001d20:	48001400 	.word	0x48001400
 8001d24:	08008020 	.word	0x08008020
 8001d28:	08008014 	.word	0x08008014
 8001d2c:	f7ff fde6 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d30:	f7ff fdea 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d34:	2014      	movs	r0, #20
 8001d36:	f7ff fde1 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d3a:	f7ff fde5 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d3e:	20a2      	movs	r0, #162	; 0xa2
 8001d40:	f7ff fddc 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d44:	f7ff fde0 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2140      	movs	r1, #64	; 0x40
 8001d4c:	4880      	ldr	r0, [pc, #512]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001d4e:	f002 fcad 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	487e      	ldr	r0, [pc, #504]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001d58:	f002 fca8 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	2090      	movs	r0, #144	; 0x90
 8001d60:	2200      	movs	r2, #0
 8001d62:	0209      	lsls	r1, r1, #8
 8001d64:	05c0      	lsls	r0, r0, #23
 8001d66:	f002 fca1 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001d6a:	20d1      	movs	r0, #209	; 0xd1
 8001d6c:	f7ff fdc6 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001d70:	f7ff fdca 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	2090      	movs	r0, #144	; 0x90
 8001d78:	2201      	movs	r2, #1
 8001d7a:	0209      	lsls	r1, r1, #8
 8001d7c:	05c0      	lsls	r0, r0, #23
 8001d7e:	f002 fc95 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d82:	2003      	movs	r0, #3
 8001d84:	f7ff fdba 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d88:	f7ff fdbe 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d8c:	205a      	movs	r0, #90	; 0x5a
 8001d8e:	f7ff fdb5 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d92:	f7ff fdb9 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f7ff fdb0 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001d9c:	f7ff fdb4 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001da0:	2201      	movs	r2, #1
 8001da2:	2140      	movs	r1, #64	; 0x40
 8001da4:	486a      	ldr	r0, [pc, #424]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001da6:	f002 fc81 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	4868      	ldr	r0, [pc, #416]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001db0:	f002 fc7c 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	2090      	movs	r0, #144	; 0x90
 8001db8:	2200      	movs	r2, #0
 8001dba:	0209      	lsls	r1, r1, #8
 8001dbc:	05c0      	lsls	r0, r0, #23
 8001dbe:	f002 fc75 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001dc2:	20d2      	movs	r0, #210	; 0xd2
 8001dc4:	f7ff fd9a 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001dc8:	f7ff fd9e 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	2090      	movs	r0, #144	; 0x90
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	0209      	lsls	r1, r1, #8
 8001dd4:	05c0      	lsls	r0, r0, #23
 8001dd6:	f002 fc69 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f7ff fd8e 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001de0:	f7ff fd92 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001de4:	2004      	movs	r0, #4
 8001de6:	f7ff fd89 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001dea:	f7ff fd8d 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001dee:	2004      	movs	r0, #4
 8001df0:	f7ff fd84 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001df4:	f7ff fd88 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	4854      	ldr	r0, [pc, #336]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001dfe:	f002 fc55 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2140      	movs	r1, #64	; 0x40
 8001e06:	4852      	ldr	r0, [pc, #328]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001e08:	f002 fc50 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	2090      	movs	r0, #144	; 0x90
 8001e10:	2200      	movs	r2, #0
 8001e12:	0209      	lsls	r1, r1, #8
 8001e14:	05c0      	lsls	r0, r0, #23
 8001e16:	f002 fc49 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001e1a:	2011      	movs	r0, #17
 8001e1c:	f7ff fd6e 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001e20:	f7ff fd72 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	2090      	movs	r0, #144	; 0x90
 8001e28:	2201      	movs	r2, #1
 8001e2a:	0209      	lsls	r1, r1, #8
 8001e2c:	05c0      	lsls	r0, r0, #23
 8001e2e:	f002 fc3d 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	4846      	ldr	r0, [pc, #280]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001e38:	f002 fc38 	bl	80046ac <HAL_GPIO_WritePin>
	write_control_seq(Exit_idle_mode);
	write_control_seq(PowerSetting);
	write_control_seq(VCOMsetting2);
	write_control_seq(PowerSettingNormalMode);
	write_control_seq(Soft_reset);
	HAL_Delay(200);
 8001e3c:	20c8      	movs	r0, #200	; 0xc8
 8001e3e:	f002 fa29 	bl	8004294 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2140      	movs	r1, #64	; 0x40
 8001e46:	4842      	ldr	r0, [pc, #264]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001e48:	f002 fc30 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	2090      	movs	r0, #144	; 0x90
 8001e50:	2200      	movs	r2, #0
 8001e52:	0209      	lsls	r1, r1, #8
 8001e54:	05c0      	lsls	r0, r0, #23
 8001e56:	f002 fc29 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001e5a:	202a      	movs	r0, #42	; 0x2a
 8001e5c:	f7ff fd4e 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001e60:	f7ff fd52 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	2090      	movs	r0, #144	; 0x90
 8001e68:	2201      	movs	r2, #1
 8001e6a:	0209      	lsls	r1, r1, #8
 8001e6c:	05c0      	lsls	r0, r0, #23
 8001e6e:	f002 fc1d 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff fd42 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001e78:	f7ff fd46 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fd3d 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001e82:	f7ff fd41 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fd38 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001e8c:	f7ff fd3c 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	f7ff fd33 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001e96:	f7ff fd37 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	482c      	ldr	r0, [pc, #176]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001ea0:	f002 fc04 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2140      	movs	r1, #64	; 0x40
 8001ea8:	4829      	ldr	r0, [pc, #164]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001eaa:	f002 fbff 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	2090      	movs	r0, #144	; 0x90
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	0209      	lsls	r1, r1, #8
 8001eb6:	05c0      	lsls	r0, r0, #23
 8001eb8:	f002 fbf8 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001ebc:	202b      	movs	r0, #43	; 0x2b
 8001ebe:	f7ff fd1d 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001ec2:	f7ff fd21 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	2090      	movs	r0, #144	; 0x90
 8001eca:	2201      	movs	r2, #1
 8001ecc:	0209      	lsls	r1, r1, #8
 8001ece:	05c0      	lsls	r0, r0, #23
 8001ed0:	f002 fbec 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fd11 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001eda:	f7ff fd15 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fd0c 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001ee4:	f7ff fd10 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff fd07 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001eee:	f7ff fd0b 	bl	8001908 <WritePulse>
	output_D0_D15_port((uint16_t)cmd_buf[i]);
 8001ef2:	20e0      	movs	r0, #224	; 0xe0
 8001ef4:	f7ff fd02 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8001ef8:	f7ff fd06 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2140      	movs	r1, #64	; 0x40
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001f02:	f002 fbd3 	bl	80046ac <HAL_GPIO_WritePin>
	write_control_seq(Set_column_addressR);
	write_control_seq(Set_page_addressR);
	HAL_Delay(100);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f002 f9c4 	bl	8004294 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	480f      	ldr	r0, [pc, #60]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001f12:	f002 fbcb 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_RESET);
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	2090      	movs	r0, #144	; 0x90
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	0209      	lsls	r1, r1, #8
 8001f1e:	05c0      	lsls	r0, r0, #23
 8001f20:	f002 fbc4 	bl	80046ac <HAL_GPIO_WritePin>
output_D0_D15_port((uint16_t)adr);
 8001f24:	2029      	movs	r0, #41	; 0x29
 8001f26:	f7ff fce9 	bl	80018fc <output_D0_D15_port>
WritePulse();
 8001f2a:	f7ff fced 	bl	8001908 <WritePulse>
HAL_GPIO_WritePin(LCD_CD_GPIO_Port,LCD_CD_Pin,GPIO_PIN_SET);
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	2090      	movs	r0, #144	; 0x90
 8001f32:	2201      	movs	r2, #1
 8001f34:	0209      	lsls	r1, r1, #8
 8001f36:	05c0      	lsls	r0, r0, #23
 8001f38:	f002 fbb8 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <LCD_ILI9488_init+0x628>)
 8001f42:	f002 fbb3 	bl	80046ac <HAL_GPIO_WritePin>
	write_control_seq(Set_display_on);
	HAL_Delay(100);
 8001f46:	2064      	movs	r0, #100	; 0x64
 8001f48:	f002 f9a4 	bl	8004294 <HAL_Delay>
}
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	48001400 	.word	0x48001400

08001f54 <Command_2A>:
//-*******************************************************************************
void Command_2A(uint16_t Xstart,uint16_t Xend)
{
 8001f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f56:	46c6      	mov	lr, r8
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001f58:	4f1d      	ldr	r7, [pc, #116]	; (8001fd0 <Command_2A+0x7c>)
{
 8001f5a:	b500      	push	{lr}
 8001f5c:	000e      	movs	r6, r1
 8001f5e:	0004      	movs	r4, r0
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	0038      	movs	r0, r7
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	f002 fba1 	bl	80046ac <HAL_GPIO_WritePin>
	//	bus_delay_function();
		HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	2590      	movs	r5, #144	; 0x90
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	4698      	mov	r8, r3
 8001f72:	05ed      	lsls	r5, r5, #23
 8001f74:	0019      	movs	r1, r3
 8001f76:	2200      	movs	r2, #0
 8001f78:	0028      	movs	r0, r5
 8001f7a:	f002 fb97 	bl	80046ac <HAL_GPIO_WritePin>
	//	bus_delay_function();
		output_D0_D15_port(0x002A);//set x range
 8001f7e:	202a      	movs	r0, #42	; 0x2a
 8001f80:	f7ff fcbc 	bl	80018fc <output_D0_D15_port>
		WritePulse();
 8001f84:	f7ff fcc0 	bl	8001908 <WritePulse>
		HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8001f88:	4641      	mov	r1, r8
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	0028      	movs	r0, r5
 8001f8e:	f002 fb8d 	bl	80046ac <HAL_GPIO_WritePin>
		output_D0_D15_port(Xstart>>8);
 8001f92:	0a20      	lsrs	r0, r4, #8
 8001f94:	f7ff fcb2 	bl	80018fc <output_D0_D15_port>
		WritePulse();
		output_D0_D15_port(Xstart & 0x00ff);
 8001f98:	25ff      	movs	r5, #255	; 0xff
		WritePulse();
 8001f9a:	f7ff fcb5 	bl	8001908 <WritePulse>
		output_D0_D15_port(Xstart & 0x00ff);
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	4028      	ands	r0, r5
 8001fa2:	f7ff fcab 	bl	80018fc <output_D0_D15_port>
		WritePulse();
 8001fa6:	f7ff fcaf 	bl	8001908 <WritePulse>
		output_D0_D15_port(Xend>>8);
 8001faa:	0a30      	lsrs	r0, r6, #8
 8001fac:	f7ff fca6 	bl	80018fc <output_D0_D15_port>
		WritePulse();
 8001fb0:	f7ff fcaa 	bl	8001908 <WritePulse>
		output_D0_D15_port(Xend & 0x00ff);
 8001fb4:	0028      	movs	r0, r5
 8001fb6:	4030      	ands	r0, r6
 8001fb8:	f7ff fca0 	bl	80018fc <output_D0_D15_port>
		WritePulse();
 8001fbc:	f7ff fca4 	bl	8001908 <WritePulse>
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001fc0:	0038      	movs	r0, r7
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	f002 fb71 	bl	80046ac <HAL_GPIO_WritePin>
}
 8001fca:	bc80      	pop	{r7}
 8001fcc:	46b8      	mov	r8, r7
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	48001400 	.word	0x48001400

08001fd4 <Command_2B>:
//-*********************************************************************************
void Command_2B(uint16_t Ystart,uint16_t Yend)
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	46c6      	mov	lr, r8
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001fd8:	4f1d      	ldr	r7, [pc, #116]	; (8002050 <Command_2B+0x7c>)
{
 8001fda:	b500      	push	{lr}
 8001fdc:	000e      	movs	r6, r1
 8001fde:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	0038      	movs	r0, r7
 8001fe4:	2140      	movs	r1, #64	; 0x40
 8001fe6:	f002 fb61 	bl	80046ac <HAL_GPIO_WritePin>
//	bus_delay_function();
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	2590      	movs	r5, #144	; 0x90
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	05ed      	lsls	r5, r5, #23
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	f002 fb57 	bl	80046ac <HAL_GPIO_WritePin>
//	bus_delay_function();
	output_D0_D15_port(0x002B);//set y range
 8001ffe:	202b      	movs	r0, #43	; 0x2b
 8002000:	f7ff fc7c 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8002004:	f7ff fc80 	bl	8001908 <WritePulse>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002008:	4641      	mov	r1, r8
 800200a:	2201      	movs	r2, #1
 800200c:	0028      	movs	r0, r5
 800200e:	f002 fb4d 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port(Ystart>>8);
 8002012:	0a20      	lsrs	r0, r4, #8
 8002014:	f7ff fc72 	bl	80018fc <output_D0_D15_port>
	WritePulse();
	output_D0_D15_port(Ystart & 0x00ff);
 8002018:	25ff      	movs	r5, #255	; 0xff
	WritePulse();
 800201a:	f7ff fc75 	bl	8001908 <WritePulse>
	output_D0_D15_port(Ystart & 0x00ff);
 800201e:	0020      	movs	r0, r4
 8002020:	4028      	ands	r0, r5
 8002022:	f7ff fc6b 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8002026:	f7ff fc6f 	bl	8001908 <WritePulse>
	output_D0_D15_port(Yend>>8);
 800202a:	0a30      	lsrs	r0, r6, #8
 800202c:	f7ff fc66 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 8002030:	f7ff fc6a 	bl	8001908 <WritePulse>
	output_D0_D15_port(Yend & 0x00ff);
 8002034:	0028      	movs	r0, r5
 8002036:	4030      	ands	r0, r6
 8002038:	f7ff fc60 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 800203c:	f7ff fc64 	bl	8001908 <WritePulse>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002040:	0038      	movs	r0, r7
 8002042:	2201      	movs	r2, #1
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	f002 fb31 	bl	80046ac <HAL_GPIO_WritePin>
}
 800204a:	bc80      	pop	{r7}
 800204c:	46b8      	mov	r8, r7
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002050:	48001400 	.word	0x48001400

08002054 <LCD_ILI9488_raw_datafeed_start>:
//-********************************************************************

//1. prepare coordinates where data will fall in       LCD_ILI9488_raw_datafeed_start
//2. then feed data you have using                     LCD_ILI9488_raw_feed_pixel
//3. then finish operation                             LCD_ILI9488_raw_datafeed_end
__attribute__((optimize("Ofast"))) void LCD_ILI9488_raw_datafeed_start(uint16_t Xstart, uint16_t Xend, uint16_t Ystart, uint16_t Yend){
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	0014      	movs	r4, r2
 8002058:	001d      	movs	r5, r3

	if(Xstart>Xend){return;}
 800205a:	4288      	cmp	r0, r1
 800205c:	d801      	bhi.n	8002062 <LCD_ILI9488_raw_datafeed_start+0xe>
	if(Ystart>Yend){return;}
 800205e:	429a      	cmp	r2, r3
 8002060:	d900      	bls.n	8002064 <LCD_ILI9488_raw_datafeed_start+0x10>
//-V----send Y range
	Command_2B(Ystart,Yend);
//	bus_delay_function();
//-V---put buffer contents
	Command_2C();
}
 8002062:	bd70      	pop	{r4, r5, r6, pc}
	Command_2A(Xstart,Xend);
 8002064:	f7ff ff76 	bl	8001f54 <Command_2A>
	Command_2B(Ystart,Yend);
 8002068:	0029      	movs	r1, r5
 800206a:	0020      	movs	r0, r4
 800206c:	f7ff ffb2 	bl	8001fd4 <Command_2B>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2140      	movs	r1, #64	; 0x40
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <LCD_ILI9488_raw_datafeed_start+0x50>)
 8002076:	f002 fb19 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	2090      	movs	r0, #144	; 0x90
 800207e:	2200      	movs	r2, #0
 8002080:	0209      	lsls	r1, r1, #8
 8002082:	05c0      	lsls	r0, r0, #23
 8002084:	f002 fb12 	bl	80046ac <HAL_GPIO_WritePin>
	output_D0_D15_port(0x002C); //start memory write
 8002088:	202c      	movs	r0, #44	; 0x2c
 800208a:	f7ff fc37 	bl	80018fc <output_D0_D15_port>
	WritePulse();
 800208e:	f7ff fc3b 	bl	8001908 <WritePulse>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	2090      	movs	r0, #144	; 0x90
 8002096:	2201      	movs	r2, #1
 8002098:	0209      	lsls	r1, r1, #8
 800209a:	05c0      	lsls	r0, r0, #23
 800209c:	f002 fb06 	bl	80046ac <HAL_GPIO_WritePin>
}
 80020a0:	e7df      	b.n	8002062 <LCD_ILI9488_raw_datafeed_start+0xe>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	48001400 	.word	0x48001400

080020a8 <LCD_ILI9488_raw_datafeed_end>:
			output_D0_D15_port(pixeldata);
			WritePulse();
}
//-*************************************************************************
__attribute__((optimize("Ofast"))) void LCD_ILI9488_raw_datafeed_end(void){
		LCD_ILI9488_CS_SET();
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <LCD_ILI9488_raw_datafeed_end+0x8>)
 80020ac:	619a      	str	r2, [r3, #24]
}
 80020ae:	4770      	bx	lr
 80020b0:	48001400 	.word	0x48001400

080020b4 <LCD_Font>:
	}
	LCD_ILI9488_raw_datafeed_end();
}

void LCD_Font(uint16_t x, uint16_t y, char *text, const char *p_font, uint32_t backcolor, uint32_t color565)
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	464e      	mov	r6, r9
 80020b8:	4645      	mov	r5, r8
 80020ba:	46de      	mov	lr, fp
 80020bc:	4657      	mov	r7, sl
 80020be:	b5e0      	push	{r5, r6, r7, lr}
 80020c0:	0016      	movs	r6, r2
	int16_t cursor_x = x;
	int16_t cursor_y = y;
	uint8_t karekter_start=p_font[2];
 80020c2:	789d      	ldrb	r5, [r3, #2]
{
 80020c4:	b08f      	sub	sp, #60	; 0x3c
 80020c6:	9303      	str	r3, [sp, #12]
	uint8_t karekter_start=p_font[2];
 80020c8:	9504      	str	r5, [sp, #16]
	uint8_t karekter_end = p_font[4];
 80020ca:	791d      	ldrb	r5, [r3, #4]
	uint8_t byte_sayisi=p_font[6];
 80020cc:	799b      	ldrb	r3, [r3, #6]
{
 80020ce:	9201      	str	r2, [sp, #4]
			carpan=4;

			okunacak_byte_sayisi=carpan*byte_sayisi;

			 LCD_ILI9488_raw_datafeed_start(cursor_x, cursor_x+Bit_Sayisi-1,cursor_y,cursor_y+250);
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 80020d0:	b20a      	sxth	r2, r1
	uint8_t byte_sayisi=p_font[6];
 80020d2:	9309      	str	r3, [sp, #36]	; 0x24
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 80020d4:	0113      	lsls	r3, r2, #4
 80020d6:	1a9b      	subs	r3, r3, r2
	int16_t cursor_x = x;
 80020d8:	b204      	sxth	r4, r0
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	0030      	movs	r0, r6
{
 80020de:	910a      	str	r1, [sp, #40]	; 0x28
	int16_t cursor_x = x;
 80020e0:	9407      	str	r4, [sp, #28]
	uint8_t karekter_end = p_font[4];
 80020e2:	9508      	str	r5, [sp, #32]
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 80020e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80020e6:	f7fe f80f 	bl	8000108 <strlen>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d01b      	beq.n	8002126 <LCD_Font+0x72>
 80020ee:	2300      	movs	r3, #0
					 GPIOB->ODR=color565;  //karekterın rengı basılıyor
				 else //karekterin background resmi basiliyor
				 {
					 if(backcolor>0xffff)  //renk skalasından buyuk bir deger gonderilice transparan yapılıyor
					 {
						 W25qxx_ReadBytes(buffer,Background_adres,2);
 80020f0:	4a79      	ldr	r2, [pc, #484]	; (80022d8 <LCD_Font+0x224>)
 80020f2:	001e      	movs	r6, r3
 80020f4:	4691      	mov	r9, r2
 80020f6:	e00c      	b.n	8002112 <LCD_Font+0x5e>
		else if (c >= karekter_start && c <= karekter_end && c != '\r')
 80020f8:	9a04      	ldr	r2, [sp, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d804      	bhi.n	8002108 <LCD_Font+0x54>
 80020fe:	9908      	ldr	r1, [sp, #32]
 8002100:	4299      	cmp	r1, r3
 8002102:	d301      	bcc.n	8002108 <LCD_Font+0x54>
 8002104:	2b0d      	cmp	r3, #13
 8002106:	d117      	bne.n	8002138 <LCD_Font+0x84>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002108:	3601      	adds	r6, #1
 800210a:	b2b6      	uxth	r6, r6
 800210c:	0033      	movs	r3, r6
 800210e:	4286      	cmp	r6, r0
 8002110:	d209      	bcs.n	8002126 <LCD_Font+0x72>
		char c = text[text_pos];
 8002112:	9a01      	ldr	r2, [sp, #4]
 8002114:	5cd3      	ldrb	r3, [r2, r3]
		if (c == '\n')
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d1ee      	bne.n	80020f8 <LCD_Font+0x44>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800211a:	3601      	adds	r6, #1
 800211c:	b2b6      	uxth	r6, r6
 800211e:	0033      	movs	r3, r6
			cursor_x = x;
 8002120:	9c07      	ldr	r4, [sp, #28]
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002122:	4286      	cmp	r6, r0
 8002124:	d3f5      	bcc.n	8002112 <LCD_Font+0x5e>

			}
			cursor_x+=Bit_Sayisi;
		}
	}
	LCD_ILI9488_raw_datafeed_end();
 8002126:	f7ff ffbf 	bl	80020a8 <LCD_ILI9488_raw_datafeed_end>
}
 800212a:	b00f      	add	sp, #60	; 0x3c
 800212c:	bcf0      	pop	{r4, r5, r6, r7}
 800212e:	46bb      	mov	fp, r7
 8002130:	46b2      	mov	sl, r6
 8002132:	46a9      	mov	r9, r5
 8002134:	46a0      	mov	r8, r4
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    char Bit_Sayisi=p_font[(c-karekter_start)*4+8];      //karekterin yatay tarama sayısı
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	9a03      	ldr	r2, [sp, #12]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4694      	mov	ip, r2
 8002140:	4463      	add	r3, ip
			uint16_t karekter_adresi=p_font[(c-karekter_start)*4+9]+p_font[(c-karekter_start)*4+10]*256;
 8002142:	7a99      	ldrb	r1, [r3, #10]
		    char Bit_Sayisi=p_font[(c-karekter_start)*4+8];      //karekterin yatay tarama sayısı
 8002144:	7a1a      	ldrb	r2, [r3, #8]
			uint16_t karekter_adresi=p_font[(c-karekter_start)*4+9]+p_font[(c-karekter_start)*4+10]*256;
 8002146:	7a5b      	ldrb	r3, [r3, #9]
 8002148:	0209      	lsls	r1, r1, #8
 800214a:	185b      	adds	r3, r3, r1
 800214c:	b29b      	uxth	r3, r3
 800214e:	469a      	mov	sl, r3
			if(Bit_Sayisi>=9 && Bit_Sayisi<=16 )
 8002150:	0013      	movs	r3, r2
 8002152:	3b09      	subs	r3, #9
 8002154:	2b07      	cmp	r3, #7
 8002156:	d869      	bhi.n	800222c <LCD_Font+0x178>
 8002158:	2302      	movs	r3, #2
 800215a:	9305      	str	r3, [sp, #20]
			carpan=2;
 800215c:	9302      	str	r3, [sp, #8]
			 LCD_ILI9488_raw_datafeed_start(cursor_x, cursor_x+Bit_Sayisi-1,cursor_y,cursor_y+250);
 800215e:	b2a0      	uxth	r0, r4
 8002160:	b297      	uxth	r7, r2
 8002162:	1882      	adds	r2, r0, r2
 8002164:	b291      	uxth	r1, r2
 8002166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002168:	910c      	str	r1, [sp, #48]	; 0x30
 800216a:	0013      	movs	r3, r2
 800216c:	3901      	subs	r1, #1
 800216e:	33fa      	adds	r3, #250	; 0xfa
 8002170:	b29b      	uxth	r3, r3
 8002172:	b289      	uxth	r1, r1
 8002174:	f7ff ff6e 	bl	8002054 <LCD_ILI9488_raw_datafeed_start>
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 8002178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800217a:	469c      	mov	ip, r3
			 Background_adres+=sn*307200;
 800217c:	4b57      	ldr	r3, [pc, #348]	; (80022dc <LCD_Font+0x228>)
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 800217e:	4464      	add	r4, ip
			 Background_adres+=sn*307200;
 8002180:	781a      	ldrb	r2, [r3, #0]
			 uint32_t Background_adres= 960 * cursor_y + (2 * cursor_x);
 8002182:	0064      	lsls	r4, r4, #1
			 Background_adres+=sn*307200;
 8002184:	0093      	lsls	r3, r2, #2
 8002186:	189a      	adds	r2, r3, r2
 8002188:	0113      	lsls	r3, r2, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	031b      	lsls	r3, r3, #12
 800218e:	191b      	adds	r3, r3, r4
			for(uint16_t iy=karekter_adresi;iy<(karekter_adresi+okunacak_byte_sayisi);iy+=carpan)
 8002190:	9a05      	ldr	r2, [sp, #20]
			 Background_adres+=sn*307200;
 8002192:	9300      	str	r3, [sp, #0]
			for(uint16_t iy=karekter_adresi;iy<(karekter_adresi+okunacak_byte_sayisi);iy+=carpan)
 8002194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002196:	4353      	muls	r3, r2
 8002198:	4453      	add	r3, sl
 800219a:	9306      	str	r3, [sp, #24]
 800219c:	4553      	cmp	r3, sl
 800219e:	dd3e      	ble.n	800221e <LCD_Font+0x16a>
 80021a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80021a2:	960d      	str	r6, [sp, #52]	; 0x34
 80021a4:	4656      	mov	r6, sl
 80021a6:	469a      	mov	sl, r3
				if(carpan==1) Data = p_font[iy];
 80021a8:	9b02      	ldr	r3, [sp, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d055      	beq.n	800225a <LCD_Font+0x1a6>
				if(carpan==2) Data=(p_font[iy+1]<<8) + p_font[iy];
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d056      	beq.n	8002260 <LCD_Font+0x1ac>
				if(carpan==3) Data=(p_font[iy+2]<<16) + (p_font[iy+1]<<8) +p_font[iy];
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d144      	bne.n	8002240 <LCD_Font+0x18c>
 80021b6:	9a03      	ldr	r2, [sp, #12]
 80021b8:	1993      	adds	r3, r2, r6
 80021ba:	789c      	ldrb	r4, [r3, #2]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	0424      	lsls	r4, r4, #16
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	18e4      	adds	r4, r4, r3
 80021c4:	5d93      	ldrb	r3, [r2, r6]
 80021c6:	18e4      	adds	r4, r4, r3
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d01a      	beq.n	8002202 <LCD_Font+0x14e>
 80021cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80021ce:	001a      	movs	r2, r3
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d24a      	bcs.n	800226e <LCD_Font+0x1ba>
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 80021d8:	2190      	movs	r1, #144	; 0x90
 80021da:	2280      	movs	r2, #128	; 0x80
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 80021dc:	2300      	movs	r3, #0
				 if(Data & 0x000001)
 80021de:	2001      	movs	r0, #1
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 80021e0:	46b4      	mov	ip, r6
					 GPIOB->ODR=color565;  //karekterın rengı basılıyor
 80021e2:	4d3f      	ldr	r5, [pc, #252]	; (80022e0 <LCD_Font+0x22c>)
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 80021e4:	05c9      	lsls	r1, r1, #23
 80021e6:	0152      	lsls	r2, r2, #5
					 GPIOB->ODR=color565;  //karekterın rengı basılıyor
 80021e8:	4656      	mov	r6, sl
				 if(Data & 0x000001)
 80021ea:	4220      	tst	r0, r4
 80021ec:	d100      	bne.n	80021f0 <LCD_Font+0x13c>
				       GPIOB->ODR=backcolor;
 80021ee:	9e18      	ldr	r6, [sp, #96]	; 0x60
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 80021f0:	3301      	adds	r3, #1
 80021f2:	b29b      	uxth	r3, r3
					 GPIOB->ODR=color565;  //karekterın rengı basılıyor
 80021f4:	616e      	str	r6, [r5, #20]
			 	Data =Data>>1;
 80021f6:	0864      	lsrs	r4, r4, #1
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 80021f8:	628a      	str	r2, [r1, #40]	; 0x28
			 	GPIOA->BSRR=(uint32_t)LCD_WR_Pin;
 80021fa:	618a      	str	r2, [r1, #24]
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 80021fc:	429f      	cmp	r7, r3
 80021fe:	d8f3      	bhi.n	80021e8 <LCD_Font+0x134>
 8002200:	4666      	mov	r6, ip
			 Def_Background_adres+=960;
 8002202:	22f0      	movs	r2, #240	; 0xf0
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4694      	mov	ip, r2
 8002208:	9b00      	ldr	r3, [sp, #0]
 800220a:	4463      	add	r3, ip
 800220c:	9300      	str	r3, [sp, #0]
			for(uint16_t iy=karekter_adresi;iy<(karekter_adresi+okunacak_byte_sayisi);iy+=carpan)
 800220e:	9b05      	ldr	r3, [sp, #20]
 8002210:	469c      	mov	ip, r3
 8002212:	9b06      	ldr	r3, [sp, #24]
 8002214:	4466      	add	r6, ip
 8002216:	b2b6      	uxth	r6, r6
 8002218:	429e      	cmp	r6, r3
 800221a:	dbc5      	blt.n	80021a8 <LCD_Font+0xf4>
 800221c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
			cursor_x+=Bit_Sayisi;
 800221e:	466b      	mov	r3, sp
 8002220:	9801      	ldr	r0, [sp, #4]
 8002222:	2430      	movs	r4, #48	; 0x30
 8002224:	5f1c      	ldrsh	r4, [r3, r4]
 8002226:	f7fd ff6f 	bl	8000108 <strlen>
 800222a:	e76d      	b.n	8002108 <LCD_Font+0x54>
			else if(Bit_Sayisi>=17 && Bit_Sayisi<=24 )
 800222c:	3b08      	subs	r3, #8
 800222e:	2b07      	cmp	r3, #7
 8002230:	d949      	bls.n	80022c6 <LCD_Font+0x212>
			else if(Bit_Sayisi>=25 && Bit_Sayisi<=32 )
 8002232:	3b08      	subs	r3, #8
 8002234:	2b07      	cmp	r3, #7
 8002236:	d84a      	bhi.n	80022ce <LCD_Font+0x21a>
 8002238:	2304      	movs	r3, #4
 800223a:	9305      	str	r3, [sp, #20]
			carpan=4;
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	e78e      	b.n	800215e <LCD_Font+0xaa>
				if(carpan==4) Data=(p_font[iy+3]<<24) + (p_font[iy+2]<<16) + (p_font[iy+1]<<8) +p_font[iy];
 8002240:	9903      	ldr	r1, [sp, #12]
 8002242:	198b      	adds	r3, r1, r6
 8002244:	78dc      	ldrb	r4, [r3, #3]
 8002246:	789a      	ldrb	r2, [r3, #2]
 8002248:	785b      	ldrb	r3, [r3, #1]
 800224a:	0624      	lsls	r4, r4, #24
 800224c:	0412      	lsls	r2, r2, #16
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	18a4      	adds	r4, r4, r2
 8002252:	18e4      	adds	r4, r4, r3
 8002254:	5d8b      	ldrb	r3, [r1, r6]
 8002256:	18e4      	adds	r4, r4, r3
 8002258:	e7b6      	b.n	80021c8 <LCD_Font+0x114>
				if(carpan==1) Data = p_font[iy];
 800225a:	9b03      	ldr	r3, [sp, #12]
 800225c:	5d9c      	ldrb	r4, [r3, r6]
				if(carpan==4) Data=(p_font[iy+3]<<24) + (p_font[iy+2]<<16) + (p_font[iy+1]<<8) +p_font[iy];
 800225e:	e7b3      	b.n	80021c8 <LCD_Font+0x114>
				if(carpan==2) Data=(p_font[iy+1]<<8) + p_font[iy];
 8002260:	9a03      	ldr	r2, [sp, #12]
 8002262:	1993      	adds	r3, r2, r6
 8002264:	785c      	ldrb	r4, [r3, #1]
 8002266:	5d93      	ldrb	r3, [r2, r6]
 8002268:	0224      	lsls	r4, r4, #8
 800226a:	18e4      	adds	r4, r4, r3
				if(carpan==4) Data=(p_font[iy+3]<<24) + (p_font[iy+2]<<16) + (p_font[iy+1]<<8) +p_font[iy];
 800226c:	e7ac      	b.n	80021c8 <LCD_Font+0x114>
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 800226e:	9b00      	ldr	r3, [sp, #0]
 8002270:	2500      	movs	r5, #0
 8002272:	4698      	mov	r8, r3
						GPIOB->ODR=renk;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <LCD_Font+0x22c>)
 8002276:	469b      	mov	fp, r3
 8002278:	4643      	mov	r3, r8
 800227a:	46b0      	mov	r8, r6
 800227c:	001e      	movs	r6, r3
 800227e:	e00e      	b.n	800229e <LCD_Font+0x1ea>
					 GPIOB->ODR=color565;  //karekterın rengı basılıyor
 8002280:	465b      	mov	r3, fp
 8002282:	4652      	mov	r2, sl
 8002284:	615a      	str	r2, [r3, #20]
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 8002286:	2390      	movs	r3, #144	; 0x90
 8002288:	2280      	movs	r2, #128	; 0x80
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 800228a:	3501      	adds	r5, #1
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	0152      	lsls	r2, r2, #5
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 8002290:	b2ad      	uxth	r5, r5
			 	GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
			 	Data =Data>>1;
 8002294:	0864      	lsrs	r4, r4, #1
			 	GPIOA->BSRR=(uint32_t)LCD_WR_Pin;
 8002296:	619a      	str	r2, [r3, #24]
				Background_adres+=2;
 8002298:	3602      	adds	r6, #2
			 for(uint16_t ix=0;ix<Bit_Sayisi;ix++)
 800229a:	42af      	cmp	r7, r5
 800229c:	d911      	bls.n	80022c2 <LCD_Font+0x20e>
				 if(Data & 0x000001)
 800229e:	2301      	movs	r3, #1
 80022a0:	4223      	tst	r3, r4
 80022a2:	d1ed      	bne.n	8002280 <LCD_Font+0x1cc>
						 W25qxx_ReadBytes(buffer,Background_adres,2);
 80022a4:	2202      	movs	r2, #2
 80022a6:	0031      	movs	r1, r6
 80022a8:	4648      	mov	r0, r9
 80022aa:	f001 feff 	bl	80040ac <W25qxx_ReadBytes>
						GPIOB->ODR=renk;
 80022ae:	464b      	mov	r3, r9
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	4313      	orrs	r3, r2
 80022b8:	465a      	mov	r2, fp
 80022ba:	ba5b      	rev16	r3, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	6153      	str	r3, [r2, #20]
 80022c0:	e7e1      	b.n	8002286 <LCD_Font+0x1d2>
 80022c2:	4646      	mov	r6, r8
 80022c4:	e79d      	b.n	8002202 <LCD_Font+0x14e>
 80022c6:	2303      	movs	r3, #3
 80022c8:	9305      	str	r3, [sp, #20]
			carpan=3;
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	e747      	b.n	800215e <LCD_Font+0xaa>
 80022ce:	2301      	movs	r3, #1
 80022d0:	9305      	str	r3, [sp, #20]
			uint8_t carpan=1;                                    //her yatay satır için byte sayısı
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	e743      	b.n	800215e <LCD_Font+0xaa>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	20000398 	.word	0x20000398
 80022dc:	20000046 	.word	0x20000046
 80022e0:	48000400 	.word	0x48000400

080022e4 <XPT2046>:
 TS_KOR_X=TS_KOR_X/10; //4080 -160 480 tarafı
}

//-*******************************************************
int XPT2046 (int ts_cmd)
{
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	0005      	movs	r5, r0
	uint16_t xpt2046_rx_data=0;
    uint16_t i=0;
	HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_RESET);
 80022e8:	2090      	movs	r0, #144	; 0x90
 80022ea:	2200      	movs	r2, #0
 80022ec:	2104      	movs	r1, #4
 80022ee:	05c0      	lsls	r0, r0, #23
 80022f0:	f002 f9dc 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TS_DCLCK_GPIO_Port, TS_DCLCK_Pin, GPIO_PIN_RESET);
 80022f4:	2090      	movs	r0, #144	; 0x90
 80022f6:	2200      	movs	r2, #0
 80022f8:	2108      	movs	r1, #8
 80022fa:	05c0      	lsls	r0, r0, #23
 80022fc:	f002 f9d6 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002300:	2001      	movs	r0, #1
 8002302:	f001 ffc7 	bl	8004294 <HAL_Delay>
 8002306:	2408      	movs	r4, #8
	// data gonderme kısmı
	for (i = 0; i < 8; ++i) {
		if(ts_cmd & 0x80)
 8002308:	2680      	movs	r6, #128	; 0x80
			HAL_GPIO_WritePin(TS_DIN_GPIO_Port, TS_DIN_Pin, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
		if(ts_cmd & 0x80)
 800230c:	422e      	tst	r6, r5
 800230e:	d100      	bne.n	8002312 <XPT2046+0x2e>
		else
			HAL_GPIO_WritePin(TS_DIN_GPIO_Port, TS_DIN_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	2090      	movs	r0, #144	; 0x90
 8002314:	2102      	movs	r1, #2
 8002316:	05c0      	lsls	r0, r0, #23
 8002318:	f002 f9c8 	bl	80046ac <HAL_GPIO_WritePin>

		ts_cmd=ts_cmd << 1;

		HAL_GPIO_WritePin(TS_DCLCK_GPIO_Port, TS_DCLCK_Pin, GPIO_PIN_RESET);
 800231c:	2090      	movs	r0, #144	; 0x90
 800231e:	2200      	movs	r2, #0
 8002320:	2108      	movs	r1, #8
 8002322:	05c0      	lsls	r0, r0, #23
 8002324:	f002 f9c2 	bl	80046ac <HAL_GPIO_WritePin>
		Delay_Us();
		HAL_GPIO_WritePin(TS_DCLCK_GPIO_Port, TS_DCLCK_Pin, GPIO_PIN_SET);
 8002328:	2090      	movs	r0, #144	; 0x90
 800232a:	3c01      	subs	r4, #1
 800232c:	2201      	movs	r2, #1
 800232e:	2108      	movs	r1, #8
 8002330:	05c0      	lsls	r0, r0, #23
 8002332:	b2a4      	uxth	r4, r4
 8002334:	f002 f9ba 	bl	80046ac <HAL_GPIO_WritePin>
		ts_cmd=ts_cmd << 1;
 8002338:	006d      	lsls	r5, r5, #1
	for (i = 0; i < 8; ++i) {
 800233a:	2c00      	cmp	r4, #0
 800233c:	d1e5      	bne.n	800230a <XPT2046+0x26>
		Delay_Us();
	}
//	HAL_GPIO_WritePin(TS_DIN_GPIO_Port, TS_DIN_Pin, GPIO_PIN_SET);

	HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f001 ffa8 	bl	8004294 <HAL_Delay>
 8002344:	250c      	movs	r5, #12
	uint16_t xpt2046_rx_data=0;
 8002346:	2400      	movs	r4, #0
	// data okuma kısmı
	for (i = 0; i < 12; ++i) {
		HAL_GPIO_WritePin(TS_DCLCK_GPIO_Port, TS_DCLCK_Pin, GPIO_PIN_SET);
 8002348:	2090      	movs	r0, #144	; 0x90
 800234a:	2201      	movs	r2, #1
 800234c:	2108      	movs	r1, #8
 800234e:	05c0      	lsls	r0, r0, #23
 8002350:	f002 f9ac 	bl	80046ac <HAL_GPIO_WritePin>
		Delay_Us();
		HAL_GPIO_WritePin(TS_DCLCK_GPIO_Port, TS_DCLCK_Pin, GPIO_PIN_RESET);
 8002354:	2090      	movs	r0, #144	; 0x90
 8002356:	2108      	movs	r1, #8
 8002358:	05c0      	lsls	r0, r0, #23
 800235a:	2200      	movs	r2, #0
 800235c:	f002 f9a6 	bl	80046ac <HAL_GPIO_WritePin>
		Delay_Us();

		if(HAL_GPIO_ReadPin(TS_DOUT_GPIO_Port, TS_DOUT_Pin))xpt2046_rx_data++;
 8002360:	2090      	movs	r0, #144	; 0x90
 8002362:	2101      	movs	r1, #1
 8002364:	05c0      	lsls	r0, r0, #23
 8002366:	f002 f99b 	bl	80046a0 <HAL_GPIO_ReadPin>
 800236a:	2800      	cmp	r0, #0
 800236c:	d001      	beq.n	8002372 <XPT2046+0x8e>
 800236e:	3401      	adds	r4, #1
 8002370:	b2a4      	uxth	r4, r4
		xpt2046_rx_data=xpt2046_rx_data <<1;
 8002372:	3d01      	subs	r5, #1
 8002374:	0064      	lsls	r4, r4, #1
 8002376:	b2ad      	uxth	r5, r5
 8002378:	b2a4      	uxth	r4, r4
	for (i = 0; i < 12; ++i) {
 800237a:	2d00      	cmp	r5, #0
 800237c:	d1e4      	bne.n	8002348 <XPT2046+0x64>

	}

	HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
 800237e:	2090      	movs	r0, #144	; 0x90
 8002380:	2201      	movs	r2, #1
 8002382:	2104      	movs	r1, #4
 8002384:	05c0      	lsls	r0, r0, #23
 8002386:	f002 f991 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800238a:	2003      	movs	r0, #3
 800238c:	f001 ff82 	bl	8004294 <HAL_Delay>

	return xpt2046_rx_data;
}
 8002390:	0020      	movs	r0, r4
 8002392:	bd70      	pop	{r4, r5, r6, pc}

08002394 <TS_KOR_XY_OKU>:
{
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(!XPT2046(0xD0));
 8002396:	20d0      	movs	r0, #208	; 0xd0
 8002398:	f7ff ffa4 	bl	80022e4 <XPT2046>
 800239c:	2800      	cmp	r0, #0
 800239e:	d0fa      	beq.n	8002396 <TS_KOR_XY_OKU+0x2>
	 TS_KOR_Y=0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	240a      	movs	r4, #10
 80023a4:	4e12      	ldr	r6, [pc, #72]	; (80023f0 <TS_KOR_XY_OKU+0x5c>)
 80023a6:	8033      	strh	r3, [r6, #0]
		TS_KOR_Y+=XPT2046(0xD0);
 80023a8:	20d0      	movs	r0, #208	; 0xd0
 80023aa:	f7ff ff9b 	bl	80022e4 <XPT2046>
 80023ae:	8833      	ldrh	r3, [r6, #0]
 80023b0:	3c01      	subs	r4, #1
 80023b2:	181b      	adds	r3, r3, r0
 80023b4:	b2e4      	uxtb	r4, r4
 80023b6:	8033      	strh	r3, [r6, #0]
	for (uint8_t j= 0; j < 10; ++j) {
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d1f5      	bne.n	80023a8 <TS_KOR_XY_OKU+0x14>
	 TS_KOR_X=0;
 80023bc:	250a      	movs	r5, #10
 80023be:	4f0d      	ldr	r7, [pc, #52]	; (80023f4 <TS_KOR_XY_OKU+0x60>)
 80023c0:	803c      	strh	r4, [r7, #0]
		TS_KOR_X+=XPT2046(0x90);
 80023c2:	2090      	movs	r0, #144	; 0x90
 80023c4:	f7ff ff8e 	bl	80022e4 <XPT2046>
 80023c8:	883c      	ldrh	r4, [r7, #0]
 80023ca:	3d01      	subs	r5, #1
 80023cc:	1824      	adds	r4, r4, r0
 80023ce:	b2a4      	uxth	r4, r4
 80023d0:	b2ed      	uxtb	r5, r5
 80023d2:	803c      	strh	r4, [r7, #0]
	for (uint8_t j= 0; j < 10; ++j) {
 80023d4:	2d00      	cmp	r5, #0
 80023d6:	d1f4      	bne.n	80023c2 <TS_KOR_XY_OKU+0x2e>
 TS_KOR_Y=TS_KOR_Y/10; //1600 -160 320 tarafı
 80023d8:	8830      	ldrh	r0, [r6, #0]
 80023da:	210a      	movs	r1, #10
 80023dc:	f7fd fe9c 	bl	8000118 <__udivsi3>
 TS_KOR_X=TS_KOR_X/10; //4080 -160 480 tarafı
 80023e0:	210a      	movs	r1, #10
 TS_KOR_Y=TS_KOR_Y/10; //1600 -160 320 tarafı
 80023e2:	8030      	strh	r0, [r6, #0]
 TS_KOR_X=TS_KOR_X/10; //4080 -160 480 tarafı
 80023e4:	0020      	movs	r0, r4
 80023e6:	f7fd fe97 	bl	8000118 <__udivsi3>
 80023ea:	8038      	strh	r0, [r7, #0]
}
 80023ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	20000044 	.word	0x20000044
 80023f4:	20000042 	.word	0x20000042

080023f8 <SD_PowerOn>:
  return res;
}

/*Power on*/
static void SD_PowerOn(void) 
{
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	46d6      	mov	lr, sl
 80023fc:	464f      	mov	r7, r9
 80023fe:	4646      	mov	r6, r8
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002400:	2180      	movs	r1, #128	; 0x80
{
 8002402:	b5c0      	push	{r6, r7, lr}
 8002404:	260d      	movs	r6, #13
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002406:	250a      	movs	r5, #10
 8002408:	27ff      	movs	r7, #255	; 0xff
{
 800240a:	b086      	sub	sp, #24
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	483a      	ldr	r0, [pc, #232]	; (80024f8 <SD_PowerOn+0x100>)
 8002410:	0189      	lsls	r1, r1, #6
 8002412:	f002 f94b 	bl	80046ac <HAL_GPIO_WritePin>
  uint32_t Count = 0x1FFF;
  

  DESELECT();
  
  for(int i = 0; i < 10; i++)
 8002416:	4c39      	ldr	r4, [pc, #228]	; (80024fc <SD_PowerOn+0x104>)
 8002418:	446e      	add	r6, sp
static void SPI_TxByte(BYTE data)
 800241a:	7037      	strb	r7, [r6, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800241c:	0020      	movs	r0, r4
 800241e:	f003 fafd 	bl	8005a1c <HAL_SPI_GetState>
 8002422:	2801      	cmp	r0, #1
 8002424:	d1fa      	bne.n	800241c <SD_PowerOn+0x24>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002426:	23fa      	movs	r3, #250	; 0xfa
 8002428:	2201      	movs	r2, #1
 800242a:	0031      	movs	r1, r6
 800242c:	0020      	movs	r0, r4
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	3d01      	subs	r5, #1
 8002432:	f002 fe25 	bl	8005080 <HAL_SPI_Transmit>
  for(int i = 0; i < 10; i++)
 8002436:	2d00      	cmp	r5, #0
 8002438:	d1ef      	bne.n	800241a <SD_PowerOn+0x22>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	2200      	movs	r2, #0
 800243e:	482e      	ldr	r0, [pc, #184]	; (80024f8 <SD_PowerOn+0x100>)
 8002440:	0189      	lsls	r1, r1, #6
 8002442:	f002 f933 	bl	80046ac <HAL_GPIO_WritePin>
  
  /* SPI Chips Select */
  SELECT();
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	2716      	movs	r7, #22
 800244a:	9304      	str	r3, [sp, #16]
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
  cmd_arg[4] = 0;
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <SD_PowerOn+0x108>)
 800244e:	ae04      	add	r6, sp, #16
 8002450:	350f      	adds	r5, #15
 8002452:	80b3      	strh	r3, [r6, #4]
  cmd_arg[5] = 0x95;
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002454:	446f      	add	r7, sp
 8002456:	446d      	add	r5, sp
  {
    SPI_TxByte(cmd_arg[i]);
 8002458:	7833      	ldrb	r3, [r6, #0]
 800245a:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800245c:	0020      	movs	r0, r4
 800245e:	f003 fadd 	bl	8005a1c <HAL_SPI_GetState>
 8002462:	2801      	cmp	r0, #1
 8002464:	d1fa      	bne.n	800245c <SD_PowerOn+0x64>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002466:	23fa      	movs	r3, #250	; 0xfa
 8002468:	2201      	movs	r2, #1
 800246a:	0029      	movs	r1, r5
 800246c:	0020      	movs	r0, r4
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	3601      	adds	r6, #1
 8002472:	f002 fe05 	bl	8005080 <HAL_SPI_Transmit>
  for (int i = 0; i < 6; i++)
 8002476:	42be      	cmp	r6, r7
 8002478:	d1ee      	bne.n	8002458 <SD_PowerOn+0x60>
  dummy = 0xFF;
 800247a:	23ff      	movs	r3, #255	; 0xff
 800247c:	469a      	mov	sl, r3
  data = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	4699      	mov	r9, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002482:	23fa      	movs	r3, #250	; 0xfa
 8002484:	2680      	movs	r6, #128	; 0x80
 8002486:	270e      	movs	r7, #14
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4698      	mov	r8, r3
 800248c:	01b6      	lsls	r6, r6, #6
 800248e:	446f      	add	r7, sp
  dummy = 0xFF;
 8002490:	4653      	mov	r3, sl
 8002492:	703b      	strb	r3, [r7, #0]
  data = 0;
 8002494:	464b      	mov	r3, r9
 8002496:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002498:	0020      	movs	r0, r4
 800249a:	f003 fabf 	bl	8005a1c <HAL_SPI_GetState>
 800249e:	2801      	cmp	r0, #1
 80024a0:	d1fa      	bne.n	8002498 <SD_PowerOn+0xa0>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80024a2:	4643      	mov	r3, r8
 80024a4:	002a      	movs	r2, r5
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	0039      	movs	r1, r7
 80024aa:	2301      	movs	r3, #1
 80024ac:	0020      	movs	r0, r4
 80024ae:	f002 feff 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80024b2:	782b      	ldrb	r3, [r5, #0]
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <SD_PowerOn+0xc6>
 80024b8:	3e01      	subs	r6, #1
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d1e8      	bne.n	8002490 <SD_PowerOn+0x98>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	2201      	movs	r2, #1
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <SD_PowerOn+0x100>)
 80024c4:	0189      	lsls	r1, r1, #6
 80024c6:	f002 f8f1 	bl	80046ac <HAL_GPIO_WritePin>
static void SPI_TxByte(BYTE data)
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80024ce:	0020      	movs	r0, r4
 80024d0:	f003 faa4 	bl	8005a1c <HAL_SPI_GetState>
 80024d4:	0006      	movs	r6, r0
 80024d6:	2801      	cmp	r0, #1
 80024d8:	d1f9      	bne.n	80024ce <SD_PowerOn+0xd6>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80024da:	23fa      	movs	r3, #250	; 0xfa
 80024dc:	2201      	movs	r2, #1
 80024de:	0029      	movs	r1, r5
 80024e0:	0020      	movs	r0, r4
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	f002 fdcc 	bl	8005080 <HAL_SPI_Transmit>
  }
  
  DESELECT();
  SPI_TxByte(0XFF);
  
  PowerFlag = 1;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <SD_PowerOn+0x10c>)
 80024ea:	701e      	strb	r6, [r3, #0]
}
 80024ec:	b006      	add	sp, #24
 80024ee:	bce0      	pop	{r5, r6, r7}
 80024f0:	46ba      	mov	sl, r7
 80024f2:	46b1      	mov	r9, r6
 80024f4:	46a8      	mov	r8, r5
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f8:	48000800 	.word	0x48000800
 80024fc:	2000110c 	.word	0x2000110c
 8002500:	ffff9500 	.word	0xffff9500
 8002504:	20000041 	.word	0x20000041

08002508 <SD_RxDataBlock>:
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <SD_RxDataBlock+0x138>)
{
 800250a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250c:	4645      	mov	r5, r8
  Timer1 = 10;
 800250e:	4698      	mov	r8, r3
{
 8002510:	464e      	mov	r6, r9
 8002512:	46de      	mov	lr, fp
 8002514:	4657      	mov	r7, sl
  Timer1 = 10;
 8002516:	230a      	movs	r3, #10
 8002518:	4642      	mov	r2, r8
{
 800251a:	b5e0      	push	{r5, r6, r7, lr}
 800251c:	b087      	sub	sp, #28
  Timer1 = 10;
 800251e:	7013      	strb	r3, [r2, #0]
 8002520:	ab02      	add	r3, sp, #8
 8002522:	469c      	mov	ip, r3
  dummy = 0xFF;
 8002524:	23ff      	movs	r3, #255	; 0xff
 8002526:	469b      	mov	fp, r3
  data = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	469a      	mov	sl, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800252c:	23fa      	movs	r3, #250	; 0xfa
 800252e:	260e      	movs	r6, #14
 8002530:	240f      	movs	r4, #15
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4699      	mov	r9, r3
 8002536:	4d43      	ldr	r5, [pc, #268]	; (8002644 <SD_RxDataBlock+0x13c>)
{
 8002538:	9002      	str	r0, [sp, #8]
 800253a:	9103      	str	r1, [sp, #12]
 800253c:	4466      	add	r6, ip
 800253e:	4464      	add	r4, ip
  dummy = 0xFF;
 8002540:	465b      	mov	r3, fp
 8002542:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002544:	4653      	mov	r3, sl
 8002546:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002548:	0028      	movs	r0, r5
 800254a:	f003 fa67 	bl	8005a1c <HAL_SPI_GetState>
 800254e:	2801      	cmp	r0, #1
 8002550:	d1fa      	bne.n	8002548 <SD_RxDataBlock+0x40>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002552:	464b      	mov	r3, r9
 8002554:	0022      	movs	r2, r4
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	0031      	movs	r1, r6
 800255a:	2301      	movs	r3, #1
 800255c:	0028      	movs	r0, r5
 800255e:	f002 fea7 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 8002562:	7823      	ldrb	r3, [r4, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
  } while((token == 0xFF) && Timer1);
 8002564:	2bff      	cmp	r3, #255	; 0xff
 8002566:	d10c      	bne.n	8002582 <SD_RxDataBlock+0x7a>
 8002568:	4643      	mov	r3, r8
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b2df      	uxtb	r7, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e6      	bne.n	8002540 <SD_RxDataBlock+0x38>
  
  SPI_RxByte(); /* CRC 무시 */
  SPI_RxByte();
  
  return TRUE;
}
 8002572:	0038      	movs	r0, r7
 8002574:	b007      	add	sp, #28
 8002576:	bcf0      	pop	{r4, r5, r6, r7}
 8002578:	46bb      	mov	fp, r7
 800257a:	46b2      	mov	sl, r6
 800257c:	46a9      	mov	r9, r5
 800257e:	46a0      	mov	r8, r4
 8002580:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(token != 0xFE)
 8002582:	2bfe      	cmp	r3, #254	; 0xfe
 8002584:	d159      	bne.n	800263a <SD_RxDataBlock+0x132>
 8002586:	9b03      	ldr	r3, [sp, #12]
 8002588:	9f02      	ldr	r7, [sp, #8]
 800258a:	469b      	mov	fp, r3
  dummy = 0xFF;
 800258c:	23ff      	movs	r3, #255	; 0xff
 800258e:	469a      	mov	sl, r3
  data = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	4699      	mov	r9, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002594:	23fa      	movs	r3, #250	; 0xfa
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4698      	mov	r8, r3
 800259a:	44bb      	add	fp, r7
  dummy = 0xFF;
 800259c:	4653      	mov	r3, sl
 800259e:	7033      	strb	r3, [r6, #0]
  data = 0;
 80025a0:	464b      	mov	r3, r9
 80025a2:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025a4:	0028      	movs	r0, r5
 80025a6:	f003 fa39 	bl	8005a1c <HAL_SPI_GetState>
 80025aa:	2801      	cmp	r0, #1
 80025ac:	d1fa      	bne.n	80025a4 <SD_RxDataBlock+0x9c>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80025ae:	4643      	mov	r3, r8
 80025b0:	0022      	movs	r2, r4
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	0031      	movs	r1, r6
 80025b6:	2301      	movs	r3, #1
 80025b8:	0028      	movs	r0, r5
 80025ba:	f002 fe79 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80025be:	7823      	ldrb	r3, [r4, #0]
  *buff = SPI_RxByte();
 80025c0:	703b      	strb	r3, [r7, #0]
  dummy = 0xFF;
 80025c2:	4653      	mov	r3, sl
 80025c4:	7033      	strb	r3, [r6, #0]
  data = 0;
 80025c6:	464b      	mov	r3, r9
 80025c8:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025ca:	0028      	movs	r0, r5
 80025cc:	f003 fa26 	bl	8005a1c <HAL_SPI_GetState>
 80025d0:	2801      	cmp	r0, #1
 80025d2:	d1fa      	bne.n	80025ca <SD_RxDataBlock+0xc2>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80025d4:	4643      	mov	r3, r8
 80025d6:	0022      	movs	r2, r4
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	0031      	movs	r1, r6
 80025dc:	2301      	movs	r3, #1
 80025de:	0028      	movs	r0, r5
 80025e0:	f002 fe66 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80025e4:	7823      	ldrb	r3, [r4, #0]
  *buff = SPI_RxByte();
 80025e6:	707b      	strb	r3, [r7, #1]
  } while(btr -= 2);
 80025e8:	3702      	adds	r7, #2
 80025ea:	45bb      	cmp	fp, r7
 80025ec:	d1d6      	bne.n	800259c <SD_RxDataBlock+0x94>
  dummy = 0xFF;
 80025ee:	23ff      	movs	r3, #255	; 0xff
 80025f0:	7033      	strb	r3, [r6, #0]
  data = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025f6:	0028      	movs	r0, r5
 80025f8:	f003 fa10 	bl	8005a1c <HAL_SPI_GetState>
 80025fc:	2801      	cmp	r0, #1
 80025fe:	d1fa      	bne.n	80025f6 <SD_RxDataBlock+0xee>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002600:	23fa      	movs	r3, #250	; 0xfa
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	0022      	movs	r2, r4
 8002608:	2301      	movs	r3, #1
 800260a:	0031      	movs	r1, r6
 800260c:	0028      	movs	r0, r5
 800260e:	f002 fe4f 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8002612:	23ff      	movs	r3, #255	; 0xff
 8002614:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800261a:	0028      	movs	r0, r5
 800261c:	f003 f9fe 	bl	8005a1c <HAL_SPI_GetState>
 8002620:	2801      	cmp	r0, #1
 8002622:	d1fa      	bne.n	800261a <SD_RxDataBlock+0x112>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002624:	23fa      	movs	r3, #250	; 0xfa
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	0007      	movs	r7, r0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	0022      	movs	r2, r4
 800262e:	2301      	movs	r3, #1
 8002630:	0031      	movs	r1, r6
 8002632:	0028      	movs	r0, r5
 8002634:	f002 fe3c 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return TRUE;
 8002638:	e79b      	b.n	8002572 <SD_RxDataBlock+0x6a>
    return FALSE;
 800263a:	2700      	movs	r7, #0
 800263c:	e799      	b.n	8002572 <SD_RxDataBlock+0x6a>
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	200013a1 	.word	0x200013a1
 8002644:	2000110c 	.word	0x2000110c

08002648 <SD_TxDataBlock>:
  Timer2 = 50;
 8002648:	4b75      	ldr	r3, [pc, #468]	; (8002820 <SD_TxDataBlock+0x1d8>)

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800264a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264c:	4645      	mov	r5, r8
  Timer2 = 50;
 800264e:	4698      	mov	r8, r3
{
 8002650:	46de      	mov	lr, fp
 8002652:	464e      	mov	r6, r9
 8002654:	4657      	mov	r7, sl
  Timer2 = 50;
 8002656:	2332      	movs	r3, #50	; 0x32
 8002658:	4642      	mov	r2, r8
{
 800265a:	b5e0      	push	{r5, r6, r7, lr}
 800265c:	b087      	sub	sp, #28
  Timer2 = 50;
 800265e:	7013      	strb	r3, [r2, #0]
  dummy = 0xFF;
 8002660:	ab02      	add	r3, sp, #8
 8002662:	469c      	mov	ip, r3
 8002664:	260e      	movs	r6, #14
 8002666:	23ff      	movs	r3, #255	; 0xff
  data = 0;
 8002668:	250f      	movs	r5, #15
  dummy = 0xFF;
 800266a:	4466      	add	r6, ip
 800266c:	7033      	strb	r3, [r6, #0]
  data = 0;
 800266e:	2300      	movs	r3, #0
{
 8002670:	468b      	mov	fp, r1
  data = 0;
 8002672:	4465      	add	r5, ip
 8002674:	4c6b      	ldr	r4, [pc, #428]	; (8002824 <SD_TxDataBlock+0x1dc>)
{
 8002676:	9003      	str	r0, [sp, #12]
  data = 0;
 8002678:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800267a:	0020      	movs	r0, r4
 800267c:	f003 f9ce 	bl	8005a1c <HAL_SPI_GetState>
 8002680:	2801      	cmp	r0, #1
 8002682:	d1fa      	bne.n	800267a <SD_TxDataBlock+0x32>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002684:	27fa      	movs	r7, #250	; 0xfa
 8002686:	00bf      	lsls	r7, r7, #2
 8002688:	2301      	movs	r3, #1
 800268a:	002a      	movs	r2, r5
 800268c:	0031      	movs	r1, r6
 800268e:	0020      	movs	r0, r4
 8002690:	9700      	str	r7, [sp, #0]
 8002692:	f002 fe0d 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8002696:	23ff      	movs	r3, #255	; 0xff
 8002698:	469a      	mov	sl, r3
  data = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	4699      	mov	r9, r3
  dummy = 0xFF;
 800269e:	4653      	mov	r3, sl
 80026a0:	7033      	strb	r3, [r6, #0]
  data = 0;
 80026a2:	464b      	mov	r3, r9
 80026a4:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80026a6:	0020      	movs	r0, r4
 80026a8:	f003 f9b8 	bl	8005a1c <HAL_SPI_GetState>
 80026ac:	2801      	cmp	r0, #1
 80026ae:	d1fa      	bne.n	80026a6 <SD_TxDataBlock+0x5e>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80026b0:	2301      	movs	r3, #1
 80026b2:	002a      	movs	r2, r5
 80026b4:	0031      	movs	r1, r6
 80026b6:	0020      	movs	r0, r4
 80026b8:	9700      	str	r7, [sp, #0]
 80026ba:	f002 fdf9 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80026be:	782b      	ldrb	r3, [r5, #0]
  } while ((res != 0xFF) && Timer2);
 80026c0:	2bff      	cmp	r3, #255	; 0xff
 80026c2:	d00b      	beq.n	80026dc <SD_TxDataBlock+0x94>
 80026c4:	4643      	mov	r3, r8
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b2d8      	uxtb	r0, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e7      	bne.n	800269e <SD_TxDataBlock+0x56>
  
  if ((resp & 0x1F) == 0x05)
    return TRUE;
  else
    return FALSE;
}
 80026ce:	b007      	add	sp, #28
 80026d0:	bcf0      	pop	{r4, r5, r6, r7}
 80026d2:	46bb      	mov	fp, r7
 80026d4:	46b2      	mov	sl, r6
 80026d6:	46a9      	mov	r9, r5
 80026d8:	46a0      	mov	r8, r4
 80026da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SPI_TxByte(token);      
 80026dc:	465b      	mov	r3, fp
 80026de:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80026e0:	0020      	movs	r0, r4
 80026e2:	f003 f99b 	bl	8005a1c <HAL_SPI_GetState>
 80026e6:	2801      	cmp	r0, #1
 80026e8:	d1fa      	bne.n	80026e0 <SD_TxDataBlock+0x98>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80026ea:	23fa      	movs	r3, #250	; 0xfa
 80026ec:	2201      	movs	r2, #1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	0029      	movs	r1, r5
 80026f2:	0020      	movs	r0, r4
 80026f4:	f002 fcc4 	bl	8005080 <HAL_SPI_Transmit>
  if (token != 0xFD) 
 80026f8:	465b      	mov	r3, fp
 80026fa:	2bfd      	cmp	r3, #253	; 0xfd
 80026fc:	d100      	bne.n	8002700 <SD_TxDataBlock+0xb8>
 80026fe:	e087      	b.n	8002810 <SD_TxDataBlock+0x1c8>
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4698      	mov	r8, r3
 8002706:	9f03      	ldr	r7, [sp, #12]
 8002708:	44b8      	add	r8, r7
      SPI_TxByte(*buff++);
 800270a:	783b      	ldrb	r3, [r7, #0]
 800270c:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800270e:	0020      	movs	r0, r4
 8002710:	f003 f984 	bl	8005a1c <HAL_SPI_GetState>
 8002714:	2801      	cmp	r0, #1
 8002716:	d1fa      	bne.n	800270e <SD_TxDataBlock+0xc6>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002718:	23fa      	movs	r3, #250	; 0xfa
 800271a:	2201      	movs	r2, #1
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	0029      	movs	r1, r5
 8002720:	0020      	movs	r0, r4
 8002722:	f002 fcad 	bl	8005080 <HAL_SPI_Transmit>
      SPI_TxByte(*buff++);
 8002726:	787b      	ldrb	r3, [r7, #1]
 8002728:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800272a:	0020      	movs	r0, r4
 800272c:	f003 f976 	bl	8005a1c <HAL_SPI_GetState>
 8002730:	2801      	cmp	r0, #1
 8002732:	d1fa      	bne.n	800272a <SD_TxDataBlock+0xe2>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002734:	23fa      	movs	r3, #250	; 0xfa
 8002736:	2201      	movs	r2, #1
 8002738:	0029      	movs	r1, r5
 800273a:	0020      	movs	r0, r4
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3702      	adds	r7, #2
 8002740:	f002 fc9e 	bl	8005080 <HAL_SPI_Transmit>
    } while (--wc);
 8002744:	45b8      	cmp	r8, r7
 8002746:	d1e0      	bne.n	800270a <SD_TxDataBlock+0xc2>
  dummy = 0xFF;
 8002748:	23ff      	movs	r3, #255	; 0xff
 800274a:	7033      	strb	r3, [r6, #0]
  data = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002750:	0020      	movs	r0, r4
 8002752:	f003 f963 	bl	8005a1c <HAL_SPI_GetState>
 8002756:	2801      	cmp	r0, #1
 8002758:	d1fa      	bne.n	8002750 <SD_TxDataBlock+0x108>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800275a:	23fa      	movs	r3, #250	; 0xfa
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	002a      	movs	r2, r5
 8002762:	2301      	movs	r3, #1
 8002764:	0031      	movs	r1, r6
 8002766:	0020      	movs	r0, r4
 8002768:	f002 fda2 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 800276c:	23ff      	movs	r3, #255	; 0xff
 800276e:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002774:	0020      	movs	r0, r4
 8002776:	f003 f951 	bl	8005a1c <HAL_SPI_GetState>
 800277a:	2801      	cmp	r0, #1
 800277c:	d1fa      	bne.n	8002774 <SD_TxDataBlock+0x12c>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800277e:	23fa      	movs	r3, #250	; 0xfa
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4698      	mov	r8, r3
 8002786:	002a      	movs	r2, r5
 8002788:	2301      	movs	r3, #1
 800278a:	0031      	movs	r1, r6
 800278c:	0020      	movs	r0, r4
 800278e:	f002 fd8f 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8002792:	23ff      	movs	r3, #255	; 0xff
 8002794:	469a      	mov	sl, r3
  data = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	2741      	movs	r7, #65	; 0x41
 800279a:	4699      	mov	r9, r3
  dummy = 0xFF;
 800279c:	4653      	mov	r3, sl
 800279e:	7033      	strb	r3, [r6, #0]
  data = 0;
 80027a0:	464b      	mov	r3, r9
 80027a2:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027a4:	0020      	movs	r0, r4
 80027a6:	f003 f939 	bl	8005a1c <HAL_SPI_GetState>
 80027aa:	2801      	cmp	r0, #1
 80027ac:	d1fa      	bne.n	80027a4 <SD_TxDataBlock+0x15c>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027ae:	4643      	mov	r3, r8
 80027b0:	002a      	movs	r2, r5
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	0031      	movs	r1, r6
 80027b6:	2301      	movs	r3, #1
 80027b8:	0020      	movs	r0, r4
 80027ba:	f002 fd79 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80027be:	231f      	movs	r3, #31
 80027c0:	782a      	ldrb	r2, [r5, #0]
      if ((resp & 0x1F) == 0x05) 
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d003      	beq.n	80027d0 <SD_TxDataBlock+0x188>
    while (i <= 64) 
 80027c8:	3f01      	subs	r7, #1
 80027ca:	b2ff      	uxtb	r7, r7
 80027cc:	2f00      	cmp	r7, #0
 80027ce:	d1e5      	bne.n	800279c <SD_TxDataBlock+0x154>
 80027d0:	469b      	mov	fp, r3
  dummy = 0xFF;
 80027d2:	23ff      	movs	r3, #255	; 0xff
 80027d4:	4699      	mov	r9, r3
  data = 0;
 80027d6:	2300      	movs	r3, #0
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027d8:	27fa      	movs	r7, #250	; 0xfa
  data = 0;
 80027da:	4698      	mov	r8, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027dc:	00bf      	lsls	r7, r7, #2
  dummy = 0xFF;
 80027de:	464b      	mov	r3, r9
 80027e0:	7033      	strb	r3, [r6, #0]
  data = 0;
 80027e2:	4643      	mov	r3, r8
 80027e4:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027e6:	0020      	movs	r0, r4
 80027e8:	f003 f918 	bl	8005a1c <HAL_SPI_GetState>
 80027ec:	2801      	cmp	r0, #1
 80027ee:	d1fa      	bne.n	80027e6 <SD_TxDataBlock+0x19e>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027f0:	2301      	movs	r3, #1
 80027f2:	002a      	movs	r2, r5
 80027f4:	0031      	movs	r1, r6
 80027f6:	0020      	movs	r0, r4
 80027f8:	9700      	str	r7, [sp, #0]
 80027fa:	f002 fd59 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80027fe:	782b      	ldrb	r3, [r5, #0]
    while (SPI_RxByte() == 0);
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ec      	beq.n	80027de <SD_TxDataBlock+0x196>
  if ((resp & 0x1F) == 0x05)
 8002804:	4658      	mov	r0, fp
 8002806:	3805      	subs	r0, #5
 8002808:	4243      	negs	r3, r0
 800280a:	4158      	adcs	r0, r3
    return FALSE;
 800280c:	b2c0      	uxtb	r0, r0
 800280e:	e75e      	b.n	80026ce <SD_TxDataBlock+0x86>
 8002810:	2300      	movs	r3, #0
 8002812:	469b      	mov	fp, r3
  if ((resp & 0x1F) == 0x05)
 8002814:	4658      	mov	r0, fp
 8002816:	3805      	subs	r0, #5
 8002818:	4243      	negs	r3, r0
 800281a:	4158      	adcs	r0, r3
    return FALSE;
 800281c:	b2c0      	uxtb	r0, r0
 800281e:	e756      	b.n	80026ce <SD_TxDataBlock+0x86>
 8002820:	200013a0 	.word	0x200013a0
 8002824:	2000110c 	.word	0x2000110c

08002828 <SD_SendCmd>:
  Timer2 = 50;
 8002828:	4b72      	ldr	r3, [pc, #456]	; (80029f4 <SD_SendCmd+0x1cc>)
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800282a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282c:	4645      	mov	r5, r8
  Timer2 = 50;
 800282e:	4698      	mov	r8, r3
{
 8002830:	464e      	mov	r6, r9
 8002832:	46de      	mov	lr, fp
 8002834:	4657      	mov	r7, sl
  Timer2 = 50;
 8002836:	2332      	movs	r3, #50	; 0x32
 8002838:	4642      	mov	r2, r8
{
 800283a:	b5e0      	push	{r5, r6, r7, lr}
 800283c:	b087      	sub	sp, #28
  Timer2 = 50;
 800283e:	7013      	strb	r3, [r2, #0]
  dummy = 0xFF;
 8002840:	ab02      	add	r3, sp, #8
 8002842:	469c      	mov	ip, r3
 8002844:	260e      	movs	r6, #14
 8002846:	23ff      	movs	r3, #255	; 0xff
  data = 0;
 8002848:	250f      	movs	r5, #15
  dummy = 0xFF;
 800284a:	4466      	add	r6, ip
 800284c:	7033      	strb	r3, [r6, #0]
  data = 0;
 800284e:	2300      	movs	r3, #0
{
 8002850:	4689      	mov	r9, r1
  data = 0;
 8002852:	4465      	add	r5, ip
 8002854:	4c68      	ldr	r4, [pc, #416]	; (80029f8 <SD_SendCmd+0x1d0>)
{
 8002856:	9003      	str	r0, [sp, #12]
  data = 0;
 8002858:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800285a:	0020      	movs	r0, r4
 800285c:	f003 f8de 	bl	8005a1c <HAL_SPI_GetState>
 8002860:	2801      	cmp	r0, #1
 8002862:	d1fa      	bne.n	800285a <SD_SendCmd+0x32>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002864:	27fa      	movs	r7, #250	; 0xfa
 8002866:	00bf      	lsls	r7, r7, #2
 8002868:	2301      	movs	r3, #1
 800286a:	002a      	movs	r2, r5
 800286c:	0031      	movs	r1, r6
 800286e:	0020      	movs	r0, r4
 8002870:	9700      	str	r7, [sp, #0]
 8002872:	f002 fd1d 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8002876:	23ff      	movs	r3, #255	; 0xff
 8002878:	469b      	mov	fp, r3
  data = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	469a      	mov	sl, r3
  dummy = 0xFF;
 800287e:	465b      	mov	r3, fp
 8002880:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002882:	4653      	mov	r3, sl
 8002884:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002886:	0020      	movs	r0, r4
 8002888:	f003 f8c8 	bl	8005a1c <HAL_SPI_GetState>
 800288c:	2801      	cmp	r0, #1
 800288e:	d1fa      	bne.n	8002886 <SD_SendCmd+0x5e>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002890:	2301      	movs	r3, #1
 8002892:	002a      	movs	r2, r5
 8002894:	0031      	movs	r1, r6
 8002896:	0020      	movs	r0, r4
 8002898:	9700      	str	r7, [sp, #0]
 800289a:	f002 fd09 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 800289e:	782b      	ldrb	r3, [r5, #0]
  } while ((res != 0xFF) && Timer2);
 80028a0:	2bff      	cmp	r3, #255	; 0xff
 80028a2:	d00b      	beq.n	80028bc <SD_SendCmd+0x94>
 80028a4:	4643      	mov	r3, r8
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e8      	bne.n	800287e <SD_SendCmd+0x56>
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
    return 0xFF;
 80028ac:	20ff      	movs	r0, #255	; 0xff
  {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);
  
  return res;
}
 80028ae:	b007      	add	sp, #28
 80028b0:	bcf0      	pop	{r4, r5, r6, r7}
 80028b2:	46bb      	mov	fp, r7
 80028b4:	46b2      	mov	sl, r6
 80028b6:	46a9      	mov	r9, r5
 80028b8:	46a0      	mov	r8, r4
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SPI_TxByte(cmd); 			/* Command */
 80028bc:	9b03      	ldr	r3, [sp, #12]
 80028be:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80028c0:	0020      	movs	r0, r4
 80028c2:	f003 f8ab 	bl	8005a1c <HAL_SPI_GetState>
 80028c6:	2801      	cmp	r0, #1
 80028c8:	d1fa      	bne.n	80028c0 <SD_SendCmd+0x98>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80028ca:	23fa      	movs	r3, #250	; 0xfa
 80028cc:	2201      	movs	r2, #1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	0029      	movs	r1, r5
 80028d2:	0020      	movs	r0, r4
 80028d4:	f002 fbd4 	bl	8005080 <HAL_SPI_Transmit>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80028d8:	464b      	mov	r3, r9
 80028da:	0e1b      	lsrs	r3, r3, #24
 80028dc:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80028de:	0020      	movs	r0, r4
 80028e0:	f003 f89c 	bl	8005a1c <HAL_SPI_GetState>
 80028e4:	2801      	cmp	r0, #1
 80028e6:	d1fa      	bne.n	80028de <SD_SendCmd+0xb6>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80028e8:	23fa      	movs	r3, #250	; 0xfa
 80028ea:	2201      	movs	r2, #1
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	0029      	movs	r1, r5
 80028f0:	0020      	movs	r0, r4
 80028f2:	f002 fbc5 	bl	8005080 <HAL_SPI_Transmit>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80028f6:	464b      	mov	r3, r9
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80028fc:	0020      	movs	r0, r4
 80028fe:	f003 f88d 	bl	8005a1c <HAL_SPI_GetState>
 8002902:	2801      	cmp	r0, #1
 8002904:	d1fa      	bne.n	80028fc <SD_SendCmd+0xd4>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002906:	23fa      	movs	r3, #250	; 0xfa
 8002908:	2201      	movs	r2, #1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	0029      	movs	r1, r5
 800290e:	0020      	movs	r0, r4
 8002910:	f002 fbb6 	bl	8005080 <HAL_SPI_Transmit>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002914:	464b      	mov	r3, r9
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800291a:	0020      	movs	r0, r4
 800291c:	f003 f87e 	bl	8005a1c <HAL_SPI_GetState>
 8002920:	2801      	cmp	r0, #1
 8002922:	d1fa      	bne.n	800291a <SD_SendCmd+0xf2>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002924:	23fa      	movs	r3, #250	; 0xfa
 8002926:	2201      	movs	r2, #1
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	0029      	movs	r1, r5
 800292c:	0020      	movs	r0, r4
 800292e:	f002 fba7 	bl	8005080 <HAL_SPI_Transmit>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002932:	464b      	mov	r3, r9
 8002934:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002936:	0020      	movs	r0, r4
 8002938:	f003 f870 	bl	8005a1c <HAL_SPI_GetState>
 800293c:	2801      	cmp	r0, #1
 800293e:	d1fa      	bne.n	8002936 <SD_SendCmd+0x10e>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002940:	23fa      	movs	r3, #250	; 0xfa
 8002942:	2201      	movs	r2, #1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	0029      	movs	r1, r5
 8002948:	0020      	movs	r0, r4
 800294a:	f002 fb99 	bl	8005080 <HAL_SPI_Transmit>
  if (cmd == CMD0)
 800294e:	9b03      	ldr	r3, [sp, #12]
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d03a      	beq.n	80029ca <SD_SendCmd+0x1a2>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002954:	3b48      	subs	r3, #72	; 0x48
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	4193      	sbcs	r3, r2
 800295a:	2286      	movs	r2, #134	; 0x86
 800295c:	425b      	negs	r3, r3
 800295e:	4393      	bics	r3, r2
 8002960:	3387      	adds	r3, #135	; 0x87
  SPI_TxByte(crc);
 8002962:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002964:	0020      	movs	r0, r4
 8002966:	f003 f859 	bl	8005a1c <HAL_SPI_GetState>
 800296a:	2801      	cmp	r0, #1
 800296c:	d1fa      	bne.n	8002964 <SD_SendCmd+0x13c>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800296e:	23fa      	movs	r3, #250	; 0xfa
 8002970:	2201      	movs	r2, #1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	0029      	movs	r1, r5
 8002976:	0020      	movs	r0, r4
 8002978:	f002 fb82 	bl	8005080 <HAL_SPI_Transmit>
  if (cmd == CMD12)
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	2b4c      	cmp	r3, #76	; 0x4c
 8002980:	d025      	beq.n	80029ce <SD_SendCmd+0x1a6>
  dummy = 0xFF;
 8002982:	23ff      	movs	r3, #255	; 0xff
 8002984:	469a      	mov	sl, r3
  data = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	4699      	mov	r9, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800298a:	23fa      	movs	r3, #250	; 0xfa
 800298c:	009b      	lsls	r3, r3, #2
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800298e:	270a      	movs	r7, #10
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002990:	4698      	mov	r8, r3
  dummy = 0xFF;
 8002992:	4653      	mov	r3, sl
 8002994:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002996:	464b      	mov	r3, r9
 8002998:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800299a:	0020      	movs	r0, r4
 800299c:	f003 f83e 	bl	8005a1c <HAL_SPI_GetState>
 80029a0:	2801      	cmp	r0, #1
 80029a2:	d1fa      	bne.n	800299a <SD_SendCmd+0x172>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80029a4:	4643      	mov	r3, r8
 80029a6:	002a      	movs	r2, r5
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	0031      	movs	r1, r6
 80029ac:	2301      	movs	r3, #1
 80029ae:	0020      	movs	r0, r4
 80029b0:	f002 fc7e 	bl	80052b0 <HAL_SPI_TransmitReceive>
  } while ((res & 0x80) && --n);
 80029b4:	2300      	movs	r3, #0
 80029b6:	56eb      	ldrsb	r3, [r5, r3]
  return data;
 80029b8:	7828      	ldrb	r0, [r5, #0]
  } while ((res & 0x80) && --n);
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db00      	blt.n	80029c0 <SD_SendCmd+0x198>
 80029be:	e776      	b.n	80028ae <SD_SendCmd+0x86>
 80029c0:	3f01      	subs	r7, #1
 80029c2:	b2ff      	uxtb	r7, r7
 80029c4:	2f00      	cmp	r7, #0
 80029c6:	d1e4      	bne.n	8002992 <SD_SendCmd+0x16a>
 80029c8:	e771      	b.n	80028ae <SD_SendCmd+0x86>
    crc = 0x95; /* CRC for CMD0(0) */
 80029ca:	2395      	movs	r3, #149	; 0x95
 80029cc:	e7c9      	b.n	8002962 <SD_SendCmd+0x13a>
  dummy = 0xFF;
 80029ce:	33b3      	adds	r3, #179	; 0xb3
 80029d0:	7033      	strb	r3, [r6, #0]
  data = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80029d6:	0020      	movs	r0, r4
 80029d8:	f003 f820 	bl	8005a1c <HAL_SPI_GetState>
 80029dc:	2801      	cmp	r0, #1
 80029de:	d1fa      	bne.n	80029d6 <SD_SendCmd+0x1ae>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80029e0:	23fa      	movs	r3, #250	; 0xfa
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	002a      	movs	r2, r5
 80029e8:	2301      	movs	r3, #1
 80029ea:	0031      	movs	r1, r6
 80029ec:	0020      	movs	r0, r4
 80029ee:	f002 fc5f 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80029f2:	e7c6      	b.n	8002982 <SD_SendCmd+0x15a>
 80029f4:	200013a0 	.word	0x200013a0
 80029f8:	2000110c 	.word	0x2000110c

080029fc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	46de      	mov	lr, fp
 8002a00:	4657      	mov	r7, sl
 8002a02:	464e      	mov	r6, r9
 8002a04:	4645      	mov	r5, r8
 8002a06:	b5e0      	push	{r5, r6, r7, lr}
 8002a08:	b087      	sub	sp, #28
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d149      	bne.n	8002aa2 <SD_disk_initialize+0xa6>
    return STA_NOINIT;  
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002a0e:	2202      	movs	r2, #2
 8002a10:	0016      	movs	r6, r2
 8002a12:	4d84      	ldr	r5, [pc, #528]	; (8002c24 <SD_disk_initialize+0x228>)
 8002a14:	782b      	ldrb	r3, [r5, #0]
 8002a16:	401e      	ands	r6, r3
 8002a18:	421a      	tst	r2, r3
 8002a1a:	d008      	beq.n	8002a2e <SD_disk_initialize+0x32>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 8002a1c:	7828      	ldrb	r0, [r5, #0]
 8002a1e:	b2c0      	uxtb	r0, r0
}
 8002a20:	b007      	add	sp, #28
 8002a22:	bcf0      	pop	{r4, r5, r6, r7}
 8002a24:	46bb      	mov	fp, r7
 8002a26:	46b2      	mov	sl, r6
 8002a28:	46a9      	mov	r9, r5
 8002a2a:	46a0      	mov	r8, r4
 8002a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SD_PowerOn();         
 8002a2e:	f7ff fce3 	bl	80023f8 <SD_PowerOn>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	2200      	movs	r2, #0
 8002a36:	487c      	ldr	r0, [pc, #496]	; (8002c28 <SD_disk_initialize+0x22c>)
 8002a38:	0189      	lsls	r1, r1, #6
 8002a3a:	f001 fe37 	bl	80046ac <HAL_GPIO_WritePin>
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2040      	movs	r0, #64	; 0x40
 8002a42:	f7ff fef1 	bl	8002828 <SD_SendCmd>
 8002a46:	0004      	movs	r4, r0
 8002a48:	2801      	cmp	r0, #1
 8002a4a:	d02f      	beq.n	8002aac <SD_disk_initialize+0xb0>
 8002a4c:	230a      	movs	r3, #10
 8002a4e:	aa02      	add	r2, sp, #8
 8002a50:	4694      	mov	ip, r2
 8002a52:	270b      	movs	r7, #11
 8002a54:	4463      	add	r3, ip
 8002a56:	4698      	mov	r8, r3
 8002a58:	4c74      	ldr	r4, [pc, #464]	; (8002c2c <SD_disk_initialize+0x230>)
 8002a5a:	4467      	add	r7, ip
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002a5c:	2180      	movs	r1, #128	; 0x80
  CardType = type;
 8002a5e:	4b74      	ldr	r3, [pc, #464]	; (8002c30 <SD_disk_initialize+0x234>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002a60:	2201      	movs	r2, #1
 8002a62:	4871      	ldr	r0, [pc, #452]	; (8002c28 <SD_disk_initialize+0x22c>)
 8002a64:	0189      	lsls	r1, r1, #6
  CardType = type;
 8002a66:	701e      	strb	r6, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002a68:	f001 fe20 	bl	80046ac <HAL_GPIO_WritePin>
  dummy = 0xFF;
 8002a6c:	23ff      	movs	r3, #255	; 0xff
 8002a6e:	4642      	mov	r2, r8
 8002a70:	7013      	strb	r3, [r2, #0]
  data = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	703b      	strb	r3, [r7, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002a76:	0020      	movs	r0, r4
 8002a78:	f002 ffd0 	bl	8005a1c <HAL_SPI_GetState>
 8002a7c:	2801      	cmp	r0, #1
 8002a7e:	d1fa      	bne.n	8002a76 <SD_disk_initialize+0x7a>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002a80:	23fa      	movs	r3, #250	; 0xfa
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4681      	mov	r9, r0
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	003a      	movs	r2, r7
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	0020      	movs	r0, r4
 8002a90:	f002 fc0e 	bl	80052b0 <HAL_SPI_TransmitReceive>
  if (type) 
 8002a94:	2e00      	cmp	r6, #0
 8002a96:	d006      	beq.n	8002aa6 <SD_disk_initialize+0xaa>
    Stat &= ~STA_NOINIT; 
 8002a98:	464a      	mov	r2, r9
 8002a9a:	782b      	ldrb	r3, [r5, #0]
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	702b      	strb	r3, [r5, #0]
 8002aa0:	e7bc      	b.n	8002a1c <SD_disk_initialize+0x20>
    return STA_NOINIT;  
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	e7bc      	b.n	8002a20 <SD_disk_initialize+0x24>
  PowerFlag = 0;
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <SD_disk_initialize+0x238>)
 8002aa8:	701e      	strb	r6, [r3, #0]
}
 8002aaa:	e7b7      	b.n	8002a1c <SD_disk_initialize+0x20>
    Timer1 = 100;
 8002aac:	4b62      	ldr	r3, [pc, #392]	; (8002c38 <SD_disk_initialize+0x23c>)
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002aae:	21d5      	movs	r1, #213	; 0xd5
    Timer1 = 100;
 8002ab0:	4699      	mov	r9, r3
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	464a      	mov	r2, r9
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002ab6:	2048      	movs	r0, #72	; 0x48
 8002ab8:	0049      	lsls	r1, r1, #1
    Timer1 = 100;
 8002aba:	7013      	strb	r3, [r2, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002abc:	f7ff feb4 	bl	8002828 <SD_SendCmd>
 8002ac0:	2801      	cmp	r0, #1
 8002ac2:	d174      	bne.n	8002bae <SD_disk_initialize+0x1b2>
 8002ac4:	ab05      	add	r3, sp, #20
 8002ac6:	9303      	str	r3, [sp, #12]
 8002ac8:	ab06      	add	r3, sp, #24
 8002aca:	469b      	mov	fp, r3
 8002acc:	aa02      	add	r2, sp, #8
 8002ace:	ab05      	add	r3, sp, #20
 8002ad0:	469a      	mov	sl, r3
 8002ad2:	4694      	mov	ip, r2
 8002ad4:	230a      	movs	r3, #10
 8002ad6:	4463      	add	r3, ip
 8002ad8:	4698      	mov	r8, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002ada:	4653      	mov	r3, sl
 8002adc:	270b      	movs	r7, #11
 8002ade:	46b2      	mov	sl, r6
 8002ae0:	001e      	movs	r6, r3
 8002ae2:	4c52      	ldr	r4, [pc, #328]	; (8002c2c <SD_disk_initialize+0x230>)
 8002ae4:	4467      	add	r7, ip
  dummy = 0xFF;
 8002ae6:	4643      	mov	r3, r8
 8002ae8:	22ff      	movs	r2, #255	; 0xff
 8002aea:	701a      	strb	r2, [r3, #0]
  data = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	703b      	strb	r3, [r7, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002af0:	0020      	movs	r0, r4
 8002af2:	f002 ff93 	bl	8005a1c <HAL_SPI_GetState>
 8002af6:	2801      	cmp	r0, #1
 8002af8:	d1fa      	bne.n	8002af0 <SD_disk_initialize+0xf4>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002afa:	23fa      	movs	r3, #250	; 0xfa
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	003a      	movs	r2, r7
 8002b02:	2301      	movs	r3, #1
 8002b04:	4641      	mov	r1, r8
 8002b06:	0020      	movs	r0, r4
 8002b08:	f002 fbd2 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 8002b0c:	783b      	ldrb	r3, [r7, #0]
        ocr[n] = SPI_RxByte();
 8002b0e:	7033      	strb	r3, [r6, #0]
      for (n = 0; n < 4; n++)
 8002b10:	3601      	adds	r6, #1
 8002b12:	455e      	cmp	r6, fp
 8002b14:	d1e7      	bne.n	8002ae6 <SD_disk_initialize+0xea>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b16:	ab02      	add	r3, sp, #8
 8002b18:	7b9b      	ldrb	r3, [r3, #14]
 8002b1a:	4656      	mov	r6, sl
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d19d      	bne.n	8002a5c <SD_disk_initialize+0x60>
 8002b20:	ab02      	add	r3, sp, #8
 8002b22:	7bdb      	ldrb	r3, [r3, #15]
 8002b24:	2baa      	cmp	r3, #170	; 0xaa
 8002b26:	d199      	bne.n	8002a5c <SD_disk_initialize+0x60>
 8002b28:	e003      	b.n	8002b32 <SD_disk_initialize+0x136>
        } while (Timer1);
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <SD_disk_initialize+0x150>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b32:	2100      	movs	r1, #0
 8002b34:	2077      	movs	r0, #119	; 0x77
 8002b36:	f7ff fe77 	bl	8002828 <SD_SendCmd>
 8002b3a:	2801      	cmp	r0, #1
 8002b3c:	d8f5      	bhi.n	8002b2a <SD_disk_initialize+0x12e>
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	2069      	movs	r0, #105	; 0x69
 8002b42:	05c9      	lsls	r1, r1, #23
 8002b44:	f7ff fe70 	bl	8002828 <SD_SendCmd>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d1ee      	bne.n	8002b2a <SD_disk_initialize+0x12e>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d083      	beq.n	8002a5c <SD_disk_initialize+0x60>
 8002b54:	2100      	movs	r1, #0
 8002b56:	207a      	movs	r0, #122	; 0x7a
 8002b58:	f7ff fe66 	bl	8002828 <SD_SendCmd>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d000      	beq.n	8002b62 <SD_disk_initialize+0x166>
 8002b60:	e77c      	b.n	8002a5c <SD_disk_initialize+0x60>
  dummy = 0xFF;
 8002b62:	23ff      	movs	r3, #255	; 0xff
 8002b64:	4699      	mov	r9, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002b66:	23fa      	movs	r3, #250	; 0xfa
 8002b68:	009b      	lsls	r3, r3, #2
  data = 0;
 8002b6a:	2600      	movs	r6, #0
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002b6c:	469a      	mov	sl, r3
  dummy = 0xFF;
 8002b6e:	4643      	mov	r3, r8
 8002b70:	464a      	mov	r2, r9
  data = 0;
 8002b72:	703e      	strb	r6, [r7, #0]
  dummy = 0xFF;
 8002b74:	701a      	strb	r2, [r3, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002b76:	0020      	movs	r0, r4
 8002b78:	f002 ff50 	bl	8005a1c <HAL_SPI_GetState>
 8002b7c:	2801      	cmp	r0, #1
 8002b7e:	d1fa      	bne.n	8002b76 <SD_disk_initialize+0x17a>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002b80:	4653      	mov	r3, sl
 8002b82:	003a      	movs	r2, r7
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4641      	mov	r1, r8
 8002b88:	2301      	movs	r3, #1
 8002b8a:	0020      	movs	r0, r4
 8002b8c:	f002 fb90 	bl	80052b0 <HAL_SPI_TransmitReceive>
            ocr[n] = SPI_RxByte();
 8002b90:	9a03      	ldr	r2, [sp, #12]
  return data;
 8002b92:	783b      	ldrb	r3, [r7, #0]
            ocr[n] = SPI_RxByte();
 8002b94:	7013      	strb	r3, [r2, #0]
          for (n = 0; n < 4; n++)
 8002b96:	1c53      	adds	r3, r2, #1
 8002b98:	9303      	str	r3, [sp, #12]
 8002b9a:	455b      	cmp	r3, fp
 8002b9c:	d1e7      	bne.n	8002b6e <SD_disk_initialize+0x172>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002b9e:	ab02      	add	r3, sp, #8
 8002ba0:	7b1b      	ldrb	r3, [r3, #12]
 8002ba2:	2606      	movs	r6, #6
 8002ba4:	065b      	lsls	r3, r3, #25
 8002ba6:	d500      	bpl.n	8002baa <SD_disk_initialize+0x1ae>
 8002ba8:	e758      	b.n	8002a5c <SD_disk_initialize+0x60>
 8002baa:	3e04      	subs	r6, #4
 8002bac:	e756      	b.n	8002a5c <SD_disk_initialize+0x60>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2077      	movs	r0, #119	; 0x77
 8002bb2:	f7ff fe39 	bl	8002828 <SD_SendCmd>
 8002bb6:	2801      	cmp	r0, #1
 8002bb8:	d804      	bhi.n	8002bc4 <SD_disk_initialize+0x1c8>
 8002bba:	e019      	b.n	8002bf0 <SD_disk_initialize+0x1f4>
      } while (Timer1);
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <SD_disk_initialize+0x1d4>
          if (SD_SendCmd(CMD1, 0) == 0)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2041      	movs	r0, #65	; 0x41
 8002bc8:	f7ff fe2e 	bl	8002828 <SD_SendCmd>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d1f5      	bne.n	8002bbc <SD_disk_initialize+0x1c0>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <SD_disk_initialize+0x1e0>
 8002bd8:	330a      	adds	r3, #10
 8002bda:	e738      	b.n	8002a4e <SD_disk_initialize+0x52>
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	2050      	movs	r0, #80	; 0x50
 8002be0:	0089      	lsls	r1, r1, #2
 8002be2:	f7ff fe21 	bl	8002828 <SD_SendCmd>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d000      	beq.n	8002bec <SD_disk_initialize+0x1f0>
 8002bea:	e72f      	b.n	8002a4c <SD_disk_initialize+0x50>
 8002bec:	0026      	movs	r6, r4
 8002bee:	e72d      	b.n	8002a4c <SD_disk_initialize+0x50>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2069      	movs	r0, #105	; 0x69
 8002bf4:	f7ff fe18 	bl	8002828 <SD_SendCmd>
 8002bf8:	2801      	cmp	r0, #1
 8002bfa:	d8e3      	bhi.n	8002bc4 <SD_disk_initialize+0x1c8>
 8002bfc:	e003      	b.n	8002c06 <SD_disk_initialize+0x20a>
      } while (Timer1);
 8002bfe:	464b      	mov	r3, r9
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <SD_disk_initialize+0x222>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002c06:	2100      	movs	r1, #0
 8002c08:	2077      	movs	r0, #119	; 0x77
 8002c0a:	f7ff fe0d 	bl	8002828 <SD_SendCmd>
 8002c0e:	2801      	cmp	r0, #1
 8002c10:	d8f5      	bhi.n	8002bfe <SD_disk_initialize+0x202>
 8002c12:	2100      	movs	r1, #0
 8002c14:	2069      	movs	r0, #105	; 0x69
 8002c16:	f7ff fe07 	bl	8002828 <SD_SendCmd>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d1ef      	bne.n	8002bfe <SD_disk_initialize+0x202>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002c1e:	2402      	movs	r4, #2
 8002c20:	e7d6      	b.n	8002bd0 <SD_disk_initialize+0x1d4>
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	20000000 	.word	0x20000000
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	2000110c 	.word	0x2000110c
 8002c30:	20000040 	.word	0x20000040
 8002c34:	20000041 	.word	0x20000041
 8002c38:	200013a1 	.word	0x200013a1

08002c3c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d103      	bne.n	8002c48 <SD_disk_status+0xc>
    return STA_NOINIT; 
  
  return Stat;
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <SD_disk_status+0x10>)
 8002c42:	7818      	ldrb	r0, [r3, #0]
 8002c44:	b2c0      	uxtb	r0, r0
}
 8002c46:	4770      	bx	lr
    return STA_NOINIT; 
 8002c48:	2001      	movs	r0, #1
 8002c4a:	e7fc      	b.n	8002c46 <SD_disk_status+0xa>
 8002c4c:	20000000 	.word	0x20000000

08002c50 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	4657      	mov	r7, sl
 8002c54:	464e      	mov	r6, r9
 8002c56:	46de      	mov	lr, fp
 8002c58:	4645      	mov	r5, r8
 8002c5a:	b5e0      	push	{r5, r6, r7, lr}
 8002c5c:	0014      	movs	r4, r2
 8002c5e:	000f      	movs	r7, r1
 8002c60:	4699      	mov	r9, r3
 8002c62:	b085      	sub	sp, #20
  if (pdrv || !count)
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d16e      	bne.n	8002d46 <SD_disk_read+0xf6>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d06c      	beq.n	8002d46 <SD_disk_read+0xf6>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002c6c:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <SD_disk_read+0x1e8>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	07db      	lsls	r3, r3, #31
 8002c72:	d46b      	bmi.n	8002d4c <SD_disk_read+0xfc>
    return RES_NOTRDY;
  
  if (!(CardType & 4))
 8002c74:	4b71      	ldr	r3, [pc, #452]	; (8002e3c <SD_disk_read+0x1ec>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	075b      	lsls	r3, r3, #29
 8002c7a:	d400      	bmi.n	8002c7e <SD_disk_read+0x2e>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002c7c:	0254      	lsls	r4, r2, #9
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	2200      	movs	r2, #0
 8002c82:	0189      	lsls	r1, r1, #6
 8002c84:	486e      	ldr	r0, [pc, #440]	; (8002e40 <SD_disk_read+0x1f0>)
 8002c86:	f001 fd11 	bl	80046ac <HAL_GPIO_WritePin>
  
  SELECT();
  
  if (count == 1) 
 8002c8a:	464b      	mov	r3, r9
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002c8c:	0021      	movs	r1, r4
  if (count == 1) 
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d100      	bne.n	8002c94 <SD_disk_read+0x44>
 8002c92:	e0c1      	b.n	8002e18 <SD_disk_read+0x1c8>
      count = 0;
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002c94:	2052      	movs	r0, #82	; 0x52
 8002c96:	f7ff fdc7 	bl	8002828 <SD_SendCmd>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d12c      	bne.n	8002cf8 <SD_disk_read+0xa8>
 8002c9e:	260e      	movs	r6, #14
 8002ca0:	240f      	movs	r4, #15
  dummy = 0xFF;
 8002ca2:	46b8      	mov	r8, r7
 8002ca4:	4d67      	ldr	r5, [pc, #412]	; (8002e44 <SD_disk_read+0x1f4>)
 8002ca6:	446e      	add	r6, sp
 8002ca8:	446c      	add	r4, sp
  Timer1 = 10;
 8002caa:	220a      	movs	r2, #10
 8002cac:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <SD_disk_read+0x1f8>)
 8002cae:	701a      	strb	r2, [r3, #0]
  data = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	469b      	mov	fp, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002cb4:	23fa      	movs	r3, #250	; 0xfa
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	469a      	mov	sl, r3
  dummy = 0xFF;
 8002cba:	23ff      	movs	r3, #255	; 0xff
 8002cbc:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002cbe:	465b      	mov	r3, fp
 8002cc0:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002cc2:	0028      	movs	r0, r5
 8002cc4:	f002 feaa 	bl	8005a1c <HAL_SPI_GetState>
 8002cc8:	2801      	cmp	r0, #1
 8002cca:	d1fa      	bne.n	8002cc2 <SD_disk_read+0x72>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002ccc:	4653      	mov	r3, sl
 8002cce:	0007      	movs	r7, r0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	0031      	movs	r1, r6
 8002cd8:	0028      	movs	r0, r5
 8002cda:	f002 fae9 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 8002cde:	7823      	ldrb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8002ce0:	2bff      	cmp	r3, #255	; 0xff
 8002ce2:	d136      	bne.n	8002d52 <SD_disk_read+0x102>
 8002ce4:	4b58      	ldr	r3, [pc, #352]	; (8002e48 <SD_disk_read+0x1f8>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e6      	bne.n	8002cba <SD_disk_read+0x6a>
 8002cec:	46b8      	mov	r8, r7
        
        buff += 512;
      } while (--count);
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002cee:	2100      	movs	r1, #0
 8002cf0:	204c      	movs	r0, #76	; 0x4c
 8002cf2:	f7ff fd99 	bl	8002828 <SD_SendCmd>
 8002cf6:	e006      	b.n	8002d06 <SD_disk_read+0xb6>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	260e      	movs	r6, #14
 8002cfc:	240f      	movs	r4, #15
 8002cfe:	4698      	mov	r8, r3
 8002d00:	4d50      	ldr	r5, [pc, #320]	; (8002e44 <SD_disk_read+0x1f4>)
 8002d02:	446e      	add	r6, sp
 8002d04:	446c      	add	r4, sp
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	2201      	movs	r2, #1
 8002d0a:	484d      	ldr	r0, [pc, #308]	; (8002e40 <SD_disk_read+0x1f0>)
 8002d0c:	0189      	lsls	r1, r1, #6
 8002d0e:	f001 fccd 	bl	80046ac <HAL_GPIO_WritePin>
  dummy = 0xFF;
 8002d12:	23ff      	movs	r3, #255	; 0xff
 8002d14:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002d1a:	0028      	movs	r0, r5
 8002d1c:	f002 fe7e 	bl	8005a1c <HAL_SPI_GetState>
 8002d20:	2801      	cmp	r0, #1
 8002d22:	d1fa      	bne.n	8002d1a <SD_disk_read+0xca>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002d24:	23fa      	movs	r3, #250	; 0xfa
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	0022      	movs	r2, r4
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	0031      	movs	r1, r6
 8002d30:	0028      	movs	r0, r5
 8002d32:	f002 fabd 	bl	80052b0 <HAL_SPI_TransmitReceive>
  
  DESELECT();
  SPI_RxByte(); /* Idle 상태(Release DO) */
  
  return count ? RES_ERROR : RES_OK;
}
 8002d36:	4640      	mov	r0, r8
 8002d38:	b005      	add	sp, #20
 8002d3a:	bcf0      	pop	{r4, r5, r6, r7}
 8002d3c:	46bb      	mov	fp, r7
 8002d3e:	46b2      	mov	sl, r6
 8002d40:	46a9      	mov	r9, r5
 8002d42:	46a0      	mov	r8, r4
 8002d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return RES_PARERR;
 8002d46:	2304      	movs	r3, #4
 8002d48:	4698      	mov	r8, r3
 8002d4a:	e7f4      	b.n	8002d36 <SD_disk_read+0xe6>
    return RES_NOTRDY;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	4698      	mov	r8, r3
 8002d50:	e7f1      	b.n	8002d36 <SD_disk_read+0xe6>
  if(token != 0xFE)
 8002d52:	2bfe      	cmp	r3, #254	; 0xfe
 8002d54:	d1ca      	bne.n	8002cec <SD_disk_read+0x9c>
 8002d56:	3303      	adds	r3, #3
 8002d58:	33ff      	adds	r3, #255	; 0xff
 8002d5a:	4647      	mov	r7, r8
 8002d5c:	4698      	mov	r8, r3
  data = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	469b      	mov	fp, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002d62:	23fa      	movs	r3, #250	; 0xfa
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	469a      	mov	sl, r3
 8002d68:	44b8      	add	r8, r7
  dummy = 0xFF;
 8002d6a:	23ff      	movs	r3, #255	; 0xff
 8002d6c:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002d6e:	465b      	mov	r3, fp
 8002d70:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002d72:	0028      	movs	r0, r5
 8002d74:	f002 fe52 	bl	8005a1c <HAL_SPI_GetState>
 8002d78:	2801      	cmp	r0, #1
 8002d7a:	d1fa      	bne.n	8002d72 <SD_disk_read+0x122>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002d7c:	4653      	mov	r3, sl
 8002d7e:	0022      	movs	r2, r4
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	0031      	movs	r1, r6
 8002d84:	2301      	movs	r3, #1
 8002d86:	0028      	movs	r0, r5
 8002d88:	f002 fa92 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 8002d8c:	7823      	ldrb	r3, [r4, #0]
  *buff = SPI_RxByte();
 8002d8e:	703b      	strb	r3, [r7, #0]
  dummy = 0xFF;
 8002d90:	23ff      	movs	r3, #255	; 0xff
 8002d92:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002d94:	465b      	mov	r3, fp
 8002d96:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002d98:	0028      	movs	r0, r5
 8002d9a:	f002 fe3f 	bl	8005a1c <HAL_SPI_GetState>
 8002d9e:	2801      	cmp	r0, #1
 8002da0:	d1fa      	bne.n	8002d98 <SD_disk_read+0x148>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002da2:	4653      	mov	r3, sl
 8002da4:	0022      	movs	r2, r4
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	0031      	movs	r1, r6
 8002daa:	2301      	movs	r3, #1
 8002dac:	0028      	movs	r0, r5
 8002dae:	f002 fa7f 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 8002db2:	7823      	ldrb	r3, [r4, #0]
  *buff = SPI_RxByte();
 8002db4:	707b      	strb	r3, [r7, #1]
  } while(btr -= 2);
 8002db6:	3702      	adds	r7, #2
 8002db8:	45b8      	cmp	r8, r7
 8002dba:	d1d6      	bne.n	8002d6a <SD_disk_read+0x11a>
  dummy = 0xFF;
 8002dbc:	23ff      	movs	r3, #255	; 0xff
 8002dbe:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002dc4:	0028      	movs	r0, r5
 8002dc6:	f002 fe29 	bl	8005a1c <HAL_SPI_GetState>
 8002dca:	2801      	cmp	r0, #1
 8002dcc:	d1fa      	bne.n	8002dc4 <SD_disk_read+0x174>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002dce:	23fa      	movs	r3, #250	; 0xfa
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	0022      	movs	r2, r4
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	0031      	movs	r1, r6
 8002dda:	0028      	movs	r0, r5
 8002ddc:	f002 fa68 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8002de0:	23ff      	movs	r3, #255	; 0xff
 8002de2:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	7023      	strb	r3, [r4, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002de8:	0028      	movs	r0, r5
 8002dea:	f002 fe17 	bl	8005a1c <HAL_SPI_GetState>
 8002dee:	2801      	cmp	r0, #1
 8002df0:	d1fa      	bne.n	8002de8 <SD_disk_read+0x198>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002df2:	23fa      	movs	r3, #250	; 0xfa
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	0022      	movs	r2, r4
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	0031      	movs	r1, r6
 8002dfe:	0028      	movs	r0, r5
 8002e00:	f002 fa56 	bl	80052b0 <HAL_SPI_TransmitReceive>
      } while (--count);
 8002e04:	2301      	movs	r3, #1
 8002e06:	425b      	negs	r3, r3
 8002e08:	469c      	mov	ip, r3
 8002e0a:	44e1      	add	r9, ip
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d000      	beq.n	8002e14 <SD_disk_read+0x1c4>
 8002e12:	e74a      	b.n	8002caa <SD_disk_read+0x5a>
 8002e14:	46c8      	mov	r8, r9
 8002e16:	e76a      	b.n	8002cee <SD_disk_read+0x9e>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002e18:	2051      	movs	r0, #81	; 0x51
 8002e1a:	f7ff fd05 	bl	8002828 <SD_SendCmd>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d000      	beq.n	8002e24 <SD_disk_read+0x1d4>
 8002e22:	e769      	b.n	8002cf8 <SD_disk_read+0xa8>
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	0038      	movs	r0, r7
 8002e28:	0089      	lsls	r1, r1, #2
 8002e2a:	f7ff fb6d 	bl	8002508 <SD_RxDataBlock>
 8002e2e:	4243      	negs	r3, r0
 8002e30:	4158      	adcs	r0, r3
 8002e32:	b2c3      	uxtb	r3, r0
 8002e34:	e761      	b.n	8002cfa <SD_disk_read+0xaa>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000040 	.word	0x20000040
 8002e40:	48000800 	.word	0x48000800
 8002e44:	2000110c 	.word	0x2000110c
 8002e48:	200013a1 	.word	0x200013a1

08002e4c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	4646      	mov	r6, r8
 8002e50:	46d6      	mov	lr, sl
 8002e52:	464f      	mov	r7, r9
 8002e54:	b5c0      	push	{r6, r7, lr}
 8002e56:	000d      	movs	r5, r1
 8002e58:	0016      	movs	r6, r2
 8002e5a:	001c      	movs	r4, r3
 8002e5c:	b084      	sub	sp, #16
  if (pdrv || !count)
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d000      	beq.n	8002e64 <SD_disk_write+0x18>
 8002e62:	e089      	b.n	8002f78 <SD_disk_write+0x12c>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d100      	bne.n	8002e6a <SD_disk_write+0x1e>
 8002e68:	e086      	b.n	8002f78 <SD_disk_write+0x12c>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002e6a:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <SD_disk_write+0x1a4>)
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	07d2      	lsls	r2, r2, #31
 8002e70:	d500      	bpl.n	8002e74 <SD_disk_write+0x28>
 8002e72:	e08b      	b.n	8002f8c <SD_disk_write+0x140>
    return RES_NOTRDY;
  
  if (Stat & STA_PROTECT)
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	2304      	movs	r3, #4
 8002e78:	4213      	tst	r3, r2
 8002e7a:	d000      	beq.n	8002e7e <SD_disk_write+0x32>
 8002e7c:	e088      	b.n	8002f90 <SD_disk_write+0x144>
    return RES_WRPRT;
  
  if (!(CardType & 4))
 8002e7e:	4f5d      	ldr	r7, [pc, #372]	; (8002ff4 <SD_disk_write+0x1a8>)
 8002e80:	783a      	ldrb	r2, [r7, #0]
 8002e82:	4213      	tst	r3, r2
 8002e84:	d100      	bne.n	8002e88 <SD_disk_write+0x3c>
 8002e86:	e07f      	b.n	8002f88 <SD_disk_write+0x13c>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	485a      	ldr	r0, [pc, #360]	; (8002ff8 <SD_disk_write+0x1ac>)
 8002e8e:	0189      	lsls	r1, r1, #6
 8002e90:	f001 fc0c 	bl	80046ac <HAL_GPIO_WritePin>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
  
  SELECT();
  
  if (count == 1) 
 8002e94:	2c01      	cmp	r4, #1
 8002e96:	d100      	bne.n	8002e9a <SD_disk_write+0x4e>
 8002e98:	e085      	b.n	8002fa6 <SD_disk_write+0x15a>
      count = 0;
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e9a:	783b      	ldrb	r3, [r7, #0]
 8002e9c:	079b      	lsls	r3, r3, #30
 8002e9e:	d500      	bpl.n	8002ea2 <SD_disk_write+0x56>
 8002ea0:	e078      	b.n	8002f94 <SD_disk_write+0x148>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002ea2:	0031      	movs	r1, r6
 8002ea4:	2059      	movs	r0, #89	; 0x59
 8002ea6:	f7ff fcbf 	bl	8002828 <SD_SendCmd>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d025      	beq.n	8002efa <SD_disk_write+0xae>
 8002eae:	2701      	movs	r7, #1
 8002eb0:	260e      	movs	r6, #14
 8002eb2:	250f      	movs	r5, #15
 8002eb4:	4c51      	ldr	r4, [pc, #324]	; (8002ffc <SD_disk_write+0x1b0>)
 8002eb6:	446e      	add	r6, sp
 8002eb8:	446d      	add	r5, sp
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	484e      	ldr	r0, [pc, #312]	; (8002ff8 <SD_disk_write+0x1ac>)
 8002ec0:	0189      	lsls	r1, r1, #6
 8002ec2:	f001 fbf3 	bl	80046ac <HAL_GPIO_WritePin>
  dummy = 0xFF;
 8002ec6:	23ff      	movs	r3, #255	; 0xff
 8002ec8:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002ece:	0020      	movs	r0, r4
 8002ed0:	f002 fda4 	bl	8005a1c <HAL_SPI_GetState>
 8002ed4:	2801      	cmp	r0, #1
 8002ed6:	d1fa      	bne.n	8002ece <SD_disk_write+0x82>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002ed8:	23fa      	movs	r3, #250	; 0xfa
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	002a      	movs	r2, r5
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	0031      	movs	r1, r6
 8002ee4:	0020      	movs	r0, r4
 8002ee6:	f002 f9e3 	bl	80052b0 <HAL_SPI_TransmitReceive>
  }
  
  DESELECT();
  SPI_RxByte();
  
  return count ? RES_ERROR : RES_OK;
 8002eea:	e046      	b.n	8002f7a <SD_disk_write+0x12e>
        buff += 512;
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	469c      	mov	ip, r3
      } while (--count);
 8002ef2:	3c01      	subs	r4, #1
        buff += 512;
 8002ef4:	4465      	add	r5, ip
      } while (--count);
 8002ef6:	2c00      	cmp	r4, #0
 8002ef8:	d005      	beq.n	8002f06 <SD_disk_write+0xba>
        if(!SD_TxDataBlock(buff, 0xFC))
 8002efa:	21fc      	movs	r1, #252	; 0xfc
 8002efc:	0028      	movs	r0, r5
 8002efe:	f7ff fba3 	bl	8002648 <SD_TxDataBlock>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d1f2      	bne.n	8002eec <SD_disk_write+0xa0>
  Timer2 = 50;
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <SD_disk_write+0x1b4>)
  dummy = 0xFF;
 8002f08:	260e      	movs	r6, #14
  Timer2 = 50;
 8002f0a:	4698      	mov	r8, r3
 8002f0c:	2332      	movs	r3, #50	; 0x32
 8002f0e:	4642      	mov	r2, r8
  data = 0;
 8002f10:	250f      	movs	r5, #15
  Timer2 = 50;
 8002f12:	7013      	strb	r3, [r2, #0]
  dummy = 0xFF;
 8002f14:	446e      	add	r6, sp
 8002f16:	33cd      	adds	r3, #205	; 0xcd
 8002f18:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	446d      	add	r5, sp
 8002f1e:	4c37      	ldr	r4, [pc, #220]	; (8002ffc <SD_disk_write+0x1b0>)
 8002f20:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002f22:	0020      	movs	r0, r4
 8002f24:	f002 fd7a 	bl	8005a1c <HAL_SPI_GetState>
 8002f28:	2801      	cmp	r0, #1
 8002f2a:	d1fa      	bne.n	8002f22 <SD_disk_write+0xd6>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002f2c:	27fa      	movs	r7, #250	; 0xfa
 8002f2e:	00bf      	lsls	r7, r7, #2
 8002f30:	2301      	movs	r3, #1
 8002f32:	002a      	movs	r2, r5
 8002f34:	0031      	movs	r1, r6
 8002f36:	0020      	movs	r0, r4
 8002f38:	9700      	str	r7, [sp, #0]
 8002f3a:	f002 f9b9 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8002f3e:	23ff      	movs	r3, #255	; 0xff
 8002f40:	469a      	mov	sl, r3
  data = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	4699      	mov	r9, r3
  dummy = 0xFF;
 8002f46:	4653      	mov	r3, sl
 8002f48:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	702b      	strb	r3, [r5, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002f4e:	0020      	movs	r0, r4
 8002f50:	f002 fd64 	bl	8005a1c <HAL_SPI_GetState>
 8002f54:	2801      	cmp	r0, #1
 8002f56:	d1fa      	bne.n	8002f4e <SD_disk_write+0x102>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002f58:	2301      	movs	r3, #1
 8002f5a:	002a      	movs	r2, r5
 8002f5c:	0031      	movs	r1, r6
 8002f5e:	0020      	movs	r0, r4
 8002f60:	9700      	str	r7, [sp, #0]
 8002f62:	f002 f9a5 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 8002f66:	782b      	ldrb	r3, [r5, #0]
  } while ((res != 0xFF) && Timer2);
 8002f68:	2bff      	cmp	r3, #255	; 0xff
 8002f6a:	d029      	beq.n	8002fc0 <SD_disk_write+0x174>
 8002f6c:	4643      	mov	r3, r8
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e8      	bne.n	8002f46 <SD_disk_write+0xfa>
{
 8002f74:	2701      	movs	r7, #1
 8002f76:	e7a0      	b.n	8002eba <SD_disk_write+0x6e>
    return RES_PARERR;
 8002f78:	2704      	movs	r7, #4
}
 8002f7a:	0038      	movs	r0, r7
 8002f7c:	b004      	add	sp, #16
 8002f7e:	bce0      	pop	{r5, r6, r7}
 8002f80:	46ba      	mov	sl, r7
 8002f82:	46b1      	mov	r9, r6
 8002f84:	46a8      	mov	r8, r5
 8002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002f88:	0276      	lsls	r6, r6, #9
 8002f8a:	e77d      	b.n	8002e88 <SD_disk_write+0x3c>
    return RES_NOTRDY;
 8002f8c:	2703      	movs	r7, #3
 8002f8e:	e7f4      	b.n	8002f7a <SD_disk_write+0x12e>
    return RES_WRPRT;
 8002f90:	2702      	movs	r7, #2
 8002f92:	e7f2      	b.n	8002f7a <SD_disk_write+0x12e>
      SD_SendCmd(CMD55, 0);
 8002f94:	2100      	movs	r1, #0
 8002f96:	2077      	movs	r0, #119	; 0x77
 8002f98:	f7ff fc46 	bl	8002828 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002f9c:	0021      	movs	r1, r4
 8002f9e:	2057      	movs	r0, #87	; 0x57
 8002fa0:	f7ff fc42 	bl	8002828 <SD_SendCmd>
 8002fa4:	e77d      	b.n	8002ea2 <SD_disk_write+0x56>
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002fa6:	0031      	movs	r1, r6
 8002fa8:	2058      	movs	r0, #88	; 0x58
 8002faa:	f7ff fc3d 	bl	8002828 <SD_SendCmd>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d016      	beq.n	8002fe0 <SD_disk_write+0x194>
 8002fb2:	260e      	movs	r6, #14
 8002fb4:	250f      	movs	r5, #15
{
 8002fb6:	2701      	movs	r7, #1
 8002fb8:	4c10      	ldr	r4, [pc, #64]	; (8002ffc <SD_disk_write+0x1b0>)
 8002fba:	446e      	add	r6, sp
 8002fbc:	446d      	add	r5, sp
 8002fbe:	e77c      	b.n	8002eba <SD_disk_write+0x6e>
  SPI_TxByte(token);      
 8002fc0:	23fd      	movs	r3, #253	; 0xfd
 8002fc2:	702b      	strb	r3, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002fc4:	0020      	movs	r0, r4
 8002fc6:	f002 fd29 	bl	8005a1c <HAL_SPI_GetState>
 8002fca:	2801      	cmp	r0, #1
 8002fcc:	d1fa      	bne.n	8002fc4 <SD_disk_write+0x178>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002fce:	23fa      	movs	r3, #250	; 0xfa
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	0029      	movs	r1, r5
 8002fd4:	0020      	movs	r0, r4
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	f002 f852 	bl	8005080 <HAL_SPI_Transmit>
{
 8002fdc:	2701      	movs	r7, #1
 8002fde:	e76c      	b.n	8002eba <SD_disk_write+0x6e>
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002fe0:	21fe      	movs	r1, #254	; 0xfe
 8002fe2:	0028      	movs	r0, r5
 8002fe4:	f7ff fb30 	bl	8002648 <SD_TxDataBlock>
 8002fe8:	4247      	negs	r7, r0
 8002fea:	4147      	adcs	r7, r0
 8002fec:	b2ff      	uxtb	r7, r7
 8002fee:	e75f      	b.n	8002eb0 <SD_disk_write+0x64>
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000040 	.word	0x20000040
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	2000110c 	.word	0x2000110c
 8003000:	200013a0 	.word	0x200013a0

08003004 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	4645      	mov	r5, r8
 8003008:	46de      	mov	lr, fp
 800300a:	4657      	mov	r7, sl
 800300c:	464e      	mov	r6, r9
 800300e:	b5e0      	push	{r5, r6, r7, lr}
 8003010:	0014      	movs	r4, r2
 8003012:	000d      	movs	r5, r1
 8003014:	b089      	sub	sp, #36	; 0x24
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
 8003016:	2800      	cmp	r0, #0
 8003018:	d124      	bne.n	8003064 <SD_disk_ioctl+0x60>
    return RES_PARERR;
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 800301a:	2905      	cmp	r1, #5
 800301c:	d012      	beq.n	8003044 <SD_disk_ioctl+0x40>
      res = RES_PARERR;
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800301e:	2201      	movs	r2, #1
 8003020:	0017      	movs	r7, r2
 8003022:	4b90      	ldr	r3, [pc, #576]	; (8003264 <SD_disk_ioctl+0x260>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	401f      	ands	r7, r3
 8003028:	421a      	tst	r2, r3
 800302a:	d11d      	bne.n	8003068 <SD_disk_ioctl+0x64>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	2200      	movs	r2, #0
 8003030:	488d      	ldr	r0, [pc, #564]	; (8003268 <SD_disk_ioctl+0x264>)
 8003032:	0189      	lsls	r1, r1, #6
 8003034:	f001 fb3a 	bl	80046ac <HAL_GPIO_WritePin>
      return RES_NOTRDY;
    
    SELECT();
    
    switch (ctrl) 
 8003038:	2d0d      	cmp	r5, #13
 800303a:	d817      	bhi.n	800306c <SD_disk_ioctl+0x68>
 800303c:	4a8b      	ldr	r2, [pc, #556]	; (800326c <SD_disk_ioctl+0x268>)
 800303e:	00ab      	lsls	r3, r5, #2
 8003040:	58d3      	ldr	r3, [r2, r3]
 8003042:	469f      	mov	pc, r3
    switch (*ptr) 
 8003044:	7813      	ldrb	r3, [r2, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d03b      	beq.n	80030c2 <SD_disk_ioctl+0xbe>
 800304a:	2b02      	cmp	r3, #2
 800304c:	d034      	beq.n	80030b8 <SD_disk_ioctl+0xb4>
 800304e:	2704      	movs	r7, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02a      	beq.n	80030aa <SD_disk_ioctl+0xa6>
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 8003054:	0038      	movs	r0, r7
 8003056:	b009      	add	sp, #36	; 0x24
 8003058:	bcf0      	pop	{r4, r5, r6, r7}
 800305a:	46bb      	mov	fp, r7
 800305c:	46b2      	mov	sl, r6
 800305e:	46a9      	mov	r9, r5
 8003060:	46a0      	mov	r8, r4
 8003062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return RES_PARERR;
 8003064:	2704      	movs	r7, #4
 8003066:	e7f5      	b.n	8003054 <SD_disk_ioctl+0x50>
      return RES_NOTRDY;
 8003068:	2703      	movs	r7, #3
 800306a:	e7f3      	b.n	8003054 <SD_disk_ioctl+0x50>
 800306c:	260f      	movs	r6, #15
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800306e:	2704      	movs	r7, #4
 8003070:	4c7f      	ldr	r4, [pc, #508]	; (8003270 <SD_disk_ioctl+0x26c>)
 8003072:	446e      	add	r6, sp
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	2201      	movs	r2, #1
  dummy = 0xFF;
 8003078:	250e      	movs	r5, #14
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800307a:	487b      	ldr	r0, [pc, #492]	; (8003268 <SD_disk_ioctl+0x264>)
 800307c:	0189      	lsls	r1, r1, #6
 800307e:	f001 fb15 	bl	80046ac <HAL_GPIO_WritePin>
  dummy = 0xFF;
 8003082:	23ff      	movs	r3, #255	; 0xff
 8003084:	446d      	add	r5, sp
 8003086:	702b      	strb	r3, [r5, #0]
  data = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	7033      	strb	r3, [r6, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800308c:	0020      	movs	r0, r4
 800308e:	f002 fcc5 	bl	8005a1c <HAL_SPI_GetState>
 8003092:	2801      	cmp	r0, #1
 8003094:	d1fa      	bne.n	800308c <SD_disk_ioctl+0x88>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8003096:	23fa      	movs	r3, #250	; 0xfa
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	0032      	movs	r2, r6
 800309e:	2301      	movs	r3, #1
 80030a0:	0029      	movs	r1, r5
 80030a2:	0020      	movs	r0, r4
 80030a4:	f002 f904 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80030a8:	e7d4      	b.n	8003054 <SD_disk_ioctl+0x50>
  return PowerFlag;
 80030aa:	4a72      	ldr	r2, [pc, #456]	; (8003274 <SD_disk_ioctl+0x270>)
 80030ac:	7817      	ldrb	r7, [r2, #0]
      if (SD_CheckPower())
 80030ae:	2f00      	cmp	r7, #0
 80030b0:	d0d0      	beq.n	8003054 <SD_disk_ioctl+0x50>
      res = RES_OK;
 80030b2:	2700      	movs	r7, #0
  PowerFlag = 0;
 80030b4:	7013      	strb	r3, [r2, #0]
}
 80030b6:	e7cd      	b.n	8003054 <SD_disk_ioctl+0x50>
  return PowerFlag;
 80030b8:	4b6e      	ldr	r3, [pc, #440]	; (8003274 <SD_disk_ioctl+0x270>)
      res = RES_OK;             /* Power Check */
 80030ba:	2700      	movs	r7, #0
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	7053      	strb	r3, [r2, #1]
      break;
 80030c0:	e7c8      	b.n	8003054 <SD_disk_ioctl+0x50>
      SD_PowerOn();             /* Power On */
 80030c2:	f7ff f999 	bl	80023f8 <SD_PowerOn>
      res = RES_OK;
 80030c6:	2700      	movs	r7, #0
      break;
 80030c8:	e7c4      	b.n	8003054 <SD_disk_ioctl+0x50>
  Timer2 = 50;
 80030ca:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <SD_disk_ioctl+0x274>)
  dummy = 0xFF;
 80030cc:	260f      	movs	r6, #15
  Timer2 = 50;
 80030ce:	4699      	mov	r9, r3
 80030d0:	2332      	movs	r3, #50	; 0x32
 80030d2:	464a      	mov	r2, r9
  dummy = 0xFF;
 80030d4:	446e      	add	r6, sp
  Timer2 = 50;
 80030d6:	7013      	strb	r3, [r2, #0]
  dummy = 0xFF;
 80030d8:	33cd      	adds	r3, #205	; 0xcd
 80030da:	7033      	strb	r3, [r6, #0]
  data = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	af04      	add	r7, sp, #16
 80030e0:	4c63      	ldr	r4, [pc, #396]	; (8003270 <SD_disk_ioctl+0x26c>)
 80030e2:	703b      	strb	r3, [r7, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80030e4:	0020      	movs	r0, r4
 80030e6:	f002 fc99 	bl	8005a1c <HAL_SPI_GetState>
 80030ea:	2801      	cmp	r0, #1
 80030ec:	d1fa      	bne.n	80030e4 <SD_disk_ioctl+0xe0>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80030ee:	23fa      	movs	r3, #250	; 0xfa
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4698      	mov	r8, r3
 80030f6:	003a      	movs	r2, r7
 80030f8:	2301      	movs	r3, #1
 80030fa:	0031      	movs	r1, r6
 80030fc:	0020      	movs	r0, r4
 80030fe:	f002 f8d7 	bl	80052b0 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8003102:	23ff      	movs	r3, #255	; 0xff
 8003104:	469b      	mov	fp, r3
  data = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	469a      	mov	sl, r3
  dummy = 0xFF;
 800310a:	465b      	mov	r3, fp
 800310c:	7033      	strb	r3, [r6, #0]
  data = 0;
 800310e:	4653      	mov	r3, sl
 8003110:	703b      	strb	r3, [r7, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8003112:	0020      	movs	r0, r4
 8003114:	f002 fc82 	bl	8005a1c <HAL_SPI_GetState>
 8003118:	2801      	cmp	r0, #1
 800311a:	d1fa      	bne.n	8003112 <SD_disk_ioctl+0x10e>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800311c:	4643      	mov	r3, r8
 800311e:	003a      	movs	r2, r7
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	0031      	movs	r1, r6
 8003124:	2301      	movs	r3, #1
 8003126:	0020      	movs	r0, r4
 8003128:	f002 f8c2 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 800312c:	783b      	ldrb	r3, [r7, #0]
  } while ((res != 0xFF) && Timer2);
 800312e:	2bff      	cmp	r3, #255	; 0xff
 8003130:	d03a      	beq.n	80031a8 <SD_disk_ioctl+0x1a4>
 8003132:	464b      	mov	r3, r9
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e7      	bne.n	800310a <SD_disk_ioctl+0x106>
  res = RES_ERROR;
 800313a:	2701      	movs	r7, #1
 800313c:	e79a      	b.n	8003074 <SD_disk_ioctl+0x70>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800313e:	2100      	movs	r1, #0
 8003140:	2049      	movs	r0, #73	; 0x49
 8003142:	f7ff fb71 	bl	8002828 <SD_SendCmd>
 8003146:	1e07      	subs	r7, r0, #0
 8003148:	d056      	beq.n	80031f8 <SD_disk_ioctl+0x1f4>
 800314a:	260f      	movs	r6, #15
  res = RES_ERROR;
 800314c:	2701      	movs	r7, #1
 800314e:	4c48      	ldr	r4, [pc, #288]	; (8003270 <SD_disk_ioctl+0x26c>)
 8003150:	446e      	add	r6, sp
 8003152:	e78f      	b.n	8003074 <SD_disk_ioctl+0x70>
      *(WORD*) buff = 512;
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	260f      	movs	r6, #15
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	8023      	strh	r3, [r4, #0]
      break;
 800315c:	446e      	add	r6, sp
 800315e:	4c44      	ldr	r4, [pc, #272]	; (8003270 <SD_disk_ioctl+0x26c>)
 8003160:	e788      	b.n	8003074 <SD_disk_ioctl+0x70>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003162:	2100      	movs	r1, #0
 8003164:	204a      	movs	r0, #74	; 0x4a
 8003166:	f7ff fb5f 	bl	8002828 <SD_SendCmd>
 800316a:	2800      	cmp	r0, #0
 800316c:	d1ed      	bne.n	800314a <SD_disk_ioctl+0x146>
 800316e:	0020      	movs	r0, r4
 8003170:	2110      	movs	r1, #16
 8003172:	f7ff f9c9 	bl	8002508 <SD_RxDataBlock>
 8003176:	260f      	movs	r6, #15
 8003178:	4247      	negs	r7, r0
 800317a:	4147      	adcs	r7, r0
 800317c:	4c3c      	ldr	r4, [pc, #240]	; (8003270 <SD_disk_ioctl+0x26c>)
  res = RES_ERROR;
 800317e:	b2ff      	uxtb	r7, r7
 8003180:	446e      	add	r6, sp
 8003182:	e777      	b.n	8003074 <SD_disk_ioctl+0x70>
      if (SD_SendCmd(CMD58, 0) == 0) 
 8003184:	2100      	movs	r1, #0
 8003186:	207a      	movs	r0, #122	; 0x7a
 8003188:	f7ff fb4e 	bl	8002828 <SD_SendCmd>
 800318c:	2800      	cmp	r0, #0
 800318e:	d00d      	beq.n	80031ac <SD_disk_ioctl+0x1a8>
 8003190:	260f      	movs	r6, #15
      res = RES_PARERR;
 8003192:	2704      	movs	r7, #4
 8003194:	4c36      	ldr	r4, [pc, #216]	; (8003270 <SD_disk_ioctl+0x26c>)
 8003196:	446e      	add	r6, sp
 8003198:	e76c      	b.n	8003074 <SD_disk_ioctl+0x70>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800319a:	2100      	movs	r1, #0
 800319c:	2049      	movs	r0, #73	; 0x49
 800319e:	f7ff fb43 	bl	8002828 <SD_SendCmd>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1d1      	bne.n	800314a <SD_disk_ioctl+0x146>
 80031a6:	e7e2      	b.n	800316e <SD_disk_ioctl+0x16a>
        res = RES_OK;
 80031a8:	002f      	movs	r7, r5
 80031aa:	e763      	b.n	8003074 <SD_disk_ioctl+0x70>
 80031ac:	1d23      	adds	r3, r4, #4
 80031ae:	469b      	mov	fp, r3
  dummy = 0xFF;
 80031b0:	23ff      	movs	r3, #255	; 0xff
 80031b2:	469a      	mov	sl, r3
  data = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	4699      	mov	r9, r3
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80031b8:	23fa      	movs	r3, #250	; 0xfa
 80031ba:	260f      	movs	r6, #15
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4698      	mov	r8, r3
 80031c0:	0025      	movs	r5, r4
 80031c2:	4c2b      	ldr	r4, [pc, #172]	; (8003270 <SD_disk_ioctl+0x26c>)
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	446e      	add	r6, sp
  dummy = 0xFF;
 80031c8:	4653      	mov	r3, sl
 80031ca:	7033      	strb	r3, [r6, #0]
  data = 0;
 80031cc:	464b      	mov	r3, r9
 80031ce:	703b      	strb	r3, [r7, #0]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80031d0:	0020      	movs	r0, r4
 80031d2:	f002 fc23 	bl	8005a1c <HAL_SPI_GetState>
 80031d6:	2801      	cmp	r0, #1
 80031d8:	d1fa      	bne.n	80031d0 <SD_disk_ioctl+0x1cc>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80031da:	4643      	mov	r3, r8
 80031dc:	003a      	movs	r2, r7
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	0031      	movs	r1, r6
 80031e2:	2301      	movs	r3, #1
 80031e4:	0020      	movs	r0, r4
 80031e6:	f002 f863 	bl	80052b0 <HAL_SPI_TransmitReceive>
  return data;
 80031ea:	783b      	ldrb	r3, [r7, #0]
          *ptr++ = SPI_RxByte();
 80031ec:	702b      	strb	r3, [r5, #0]
        for (n = 0; n < 4; n++)
 80031ee:	3501      	adds	r5, #1
 80031f0:	45ab      	cmp	fp, r5
 80031f2:	d1e9      	bne.n	80031c8 <SD_disk_ioctl+0x1c4>
      res = RES_PARERR;
 80031f4:	2704      	movs	r7, #4
 80031f6:	e73d      	b.n	8003074 <SD_disk_ioctl+0x70>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80031f8:	ad04      	add	r5, sp, #16
 80031fa:	2110      	movs	r1, #16
 80031fc:	0028      	movs	r0, r5
 80031fe:	f7ff f983 	bl	8002508 <SD_RxDataBlock>
 8003202:	2800      	cmp	r0, #0
 8003204:	d0a1      	beq.n	800314a <SD_disk_ioctl+0x146>
        if ((csd[0] >> 6) == 1) 
 8003206:	782b      	ldrb	r3, [r5, #0]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	2b01      	cmp	r3, #1
 800320c:	d01d      	beq.n	800324a <SD_disk_ioctl+0x246>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800320e:	21c0      	movs	r1, #192	; 0xc0
 8003210:	7a2b      	ldrb	r3, [r5, #8]
 8003212:	79ea      	ldrb	r2, [r5, #7]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	189b      	adds	r3, r3, r2
 800321a:	79aa      	ldrb	r2, [r5, #6]
 800321c:	0109      	lsls	r1, r1, #4
 800321e:	0292      	lsls	r2, r2, #10
 8003220:	3301      	adds	r3, #1
 8003222:	400a      	ands	r2, r1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003224:	189a      	adds	r2, r3, r2
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003226:	230f      	movs	r3, #15
 8003228:	7969      	ldrb	r1, [r5, #5]
 800322a:	7a68      	ldrb	r0, [r5, #9]
 800322c:	400b      	ands	r3, r1
 800322e:	7aa9      	ldrb	r1, [r5, #10]
 8003230:	0040      	lsls	r0, r0, #1
 8003232:	09c9      	lsrs	r1, r1, #7
 8003234:	185b      	adds	r3, r3, r1
 8003236:	2106      	movs	r1, #6
 8003238:	4001      	ands	r1, r0
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800323a:	185b      	adds	r3, r3, r1
 800323c:	3b07      	subs	r3, #7
 800323e:	409a      	lsls	r2, r3
 8003240:	260f      	movs	r6, #15
 8003242:	6022      	str	r2, [r4, #0]
 8003244:	446e      	add	r6, sp
 8003246:	4c0a      	ldr	r4, [pc, #40]	; (8003270 <SD_disk_ioctl+0x26c>)
 8003248:	e714      	b.n	8003074 <SD_disk_ioctl+0x70>
          *(DWORD*) buff = (DWORD) csize << 10;
 800324a:	260f      	movs	r6, #15
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800324c:	7a2b      	ldrb	r3, [r5, #8]
 800324e:	7a6a      	ldrb	r2, [r5, #9]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	3201      	adds	r2, #1
 8003254:	189b      	adds	r3, r3, r2
          *(DWORD*) buff = (DWORD) csize << 10;
 8003256:	b29b      	uxth	r3, r3
 8003258:	029b      	lsls	r3, r3, #10
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	446e      	add	r6, sp
 800325e:	4c04      	ldr	r4, [pc, #16]	; (8003270 <SD_disk_ioctl+0x26c>)
 8003260:	e708      	b.n	8003074 <SD_disk_ioctl+0x70>
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000000 	.word	0x20000000
 8003268:	48000800 	.word	0x48000800
 800326c:	0800802c 	.word	0x0800802c
 8003270:	2000110c 	.word	0x2000110c
 8003274:	20000041 	.word	0x20000041
 8003278:	200013a0 	.word	0x200013a0

0800327c <SD_TO_W25Q.7774>:
  		buffer[i]= 0XFF;  // BOS YERLER FF LE DOLDURULUYOR
  	}
  }
  //***************************************
  void SD_TO_W25Q()  //BUTUN RESIMLERI TEK SEFERDE KAYDEDER
  {
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	46de      	mov	lr, fp
 8003280:	4657      	mov	r7, sl
 8003282:	464e      	mov	r6, r9
 8003284:	4645      	mov	r5, r8
 8003286:	22b4      	movs	r2, #180	; 0xb4
 8003288:	b5e0      	push	{r5, r6, r7, lr}
 800328a:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <SD_TO_W25Q.7774+0x128>)
 800328c:	b085      	sub	sp, #20
 800328e:	21ff      	movs	r1, #255	; 0xff
 8003290:	0018      	movs	r0, r3
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	4699      	mov	r9, r3
 8003296:	f004 fe89 	bl	8007fac <memset>

	  bufferclear();
      char dosyaadi[]="00.bin";   //DOSYA ADLARI "00.bin" den BASLAYIP "99.bin" 'E KADAR
 800329a:	4669      	mov	r1, sp
 800329c:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <SD_TO_W25Q.7774+0x12c>)
      uint8_t dosyano=0;
      uint16_t sayfano=0;
      uint16_t sectorno=0;
      uint16_t def_sectorno=0;
      W25qxx_EraseSector(0);
 800329e:	2000      	movs	r0, #0
      char dosyaadi[]="00.bin";   //DOSYA ADLARI "00.bin" den BASLAYIP "99.bin" 'E KADAR
 80032a0:	681a      	ldr	r2, [r3, #0]
      uint16_t sayfano=0;
 80032a2:	2400      	movs	r4, #0
      char dosyaadi[]="00.bin";   //DOSYA ADLARI "00.bin" den BASLAYIP "99.bin" 'E KADAR
 80032a4:	9202      	str	r2, [sp, #8]
 80032a6:	889a      	ldrh	r2, [r3, #4]
      uint8_t dosyano=0;
 80032a8:	2600      	movs	r6, #0
      char dosyaadi[]="00.bin";   //DOSYA ADLARI "00.bin" den BASLAYIP "99.bin" 'E KADAR
 80032aa:	818a      	strh	r2, [r1, #12]
 80032ac:	799b      	ldrb	r3, [r3, #6]
 80032ae:	738b      	strb	r3, [r1, #14]
      W25qxx_EraseSector(0);
 80032b0:	f000 fdc2 	bl	8003e38 <W25qxx_EraseSector>

  		LCD_Font(10, 10, "SD  KART  BULUNDU  DOSYALAR  KAYDEDILIYOR\n", Segoe_Script21x21,0xffff, 0xf800);
 80032b4:	23f8      	movs	r3, #248	; 0xf8
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <SD_TO_W25Q.7774+0x130>)
 80032bc:	210a      	movs	r1, #10
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	200a      	movs	r0, #10
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <SD_TO_W25Q.7774+0x134>)
 80032c4:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <SD_TO_W25Q.7774+0x138>)
 80032c6:	f7fe fef5 	bl	80020b4 <LCD_Font>
      uint16_t def_sectorno=0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	469a      	mov	sl, r3

  		if(fresult == FR_OK)
  		{
  		/* Read string from the file */

  		top_adet=0;
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <SD_TO_W25Q.7774+0x13c>)
 80032d0:	4f3a      	ldr	r7, [pc, #232]	; (80033bc <SD_TO_W25Q.7774+0x140>)
 80032d2:	4698      	mov	r8, r3
 80032d4:	e011      	b.n	80032fa <SD_TO_W25Q.7774+0x7e>

  		f_close(&fil);	 /*close file */
  		HAL_Delay(1000);
  		}

  		dosyano++;
 80032d6:	3601      	adds	r6, #1
 80032d8:	b2f6      	uxtb	r6, r6
  		dosyaadi[1]=dosyano%10+48;
 80032da:	210a      	movs	r1, #10
 80032dc:	0030      	movs	r0, r6
 80032de:	f7fc ffa1 	bl	8000224 <__aeabi_uidivmod>
 80032e2:	466b      	mov	r3, sp
 80032e4:	3130      	adds	r1, #48	; 0x30
 80032e6:	7259      	strb	r1, [r3, #9]
  		dosyaadi[0]=dosyano/10 +48;
 80032e8:	0030      	movs	r0, r6
 80032ea:	210a      	movs	r1, #10
 80032ec:	f7fc ff14 	bl	8000118 <__udivsi3>
 80032f0:	466b      	mov	r3, sp
 80032f2:	3030      	adds	r0, #48	; 0x30
 80032f4:	7218      	strb	r0, [r3, #8]
  		if (dosyano <99) goto TEKRAR;
 80032f6:	2e63      	cmp	r6, #99	; 0x63
 80032f8:	d03c      	beq.n	8003374 <SD_TO_W25Q.7774+0xf8>
  		fresult =f_open(&fil, dosyaadi, FA_READ);	    /* open file to read FA_READ */
 80032fa:	2201      	movs	r2, #1
 80032fc:	0038      	movs	r0, r7
 80032fe:	a902      	add	r1, sp, #8
 8003300:	f004 fb0c 	bl	800791c <f_open>
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <SD_TO_W25Q.7774+0x144>)
 8003306:	7018      	strb	r0, [r3, #0]
  		if(fresult == FR_OK)
 8003308:	2800      	cmp	r0, #0
 800330a:	d1e4      	bne.n	80032d6 <SD_TO_W25Q.7774+0x5a>
  		top_adet=0;
 800330c:	4643      	mov	r3, r8
 800330e:	6018      	str	r0, [r3, #0]
  		}while(top_adet<fil.fsize);
 8003310:	2383      	movs	r3, #131	; 0x83
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	469b      	mov	fp, r3
 8003316:	4653      	mov	r3, sl
 8003318:	46b2      	mov	sl, r6
 800331a:	001e      	movs	r6, r3
 800331c:	e000      	b.n	8003320 <SD_TO_W25Q.7774+0xa4>
        sectorno=sayfano>>4;
 800331e:	002e      	movs	r6, r5
  		f_read(&fil, buffer, 256, &br);
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	4649      	mov	r1, r9
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <SD_TO_W25Q.7774+0x148>)
 8003326:	0052      	lsls	r2, r2, #1
 8003328:	0038      	movs	r0, r7
 800332a:	f004 fcf9 	bl	8007d20 <f_read>
  		W25qxx_WritePage(buffer,sayfano,0,256);  //kaydederken 1 2 3 4 sayfa no yazılacak(8 BİT)
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	0021      	movs	r1, r4
  		sayfano ++;
 8003332:	3401      	adds	r4, #1
  		W25qxx_WritePage(buffer,sayfano,0,256);  //kaydederken 1 2 3 4 sayfa no yazılacak(8 BİT)
 8003334:	2200      	movs	r2, #0
 8003336:	4648      	mov	r0, r9
 8003338:	005b      	lsls	r3, r3, #1
  		sayfano ++;
 800333a:	b2a4      	uxth	r4, r4
  		W25qxx_WritePage(buffer,sayfano,0,256);  //kaydederken 1 2 3 4 sayfa no yazılacak(8 BİT)
 800333c:	f000 fe0a 	bl	8003f54 <W25qxx_WritePage>
        sectorno=sayfano>>4;
 8003340:	0925      	lsrs	r5, r4, #4
        if(sectorno != def_sectorno)
 8003342:	42ae      	cmp	r6, r5
 8003344:	d002      	beq.n	800334c <SD_TO_W25Q.7774+0xd0>
        	W25qxx_EraseSector(sectorno);
 8003346:	0028      	movs	r0, r5
 8003348:	f000 fd76 	bl	8003e38 <W25qxx_EraseSector>
  		top_adet+=256;
 800334c:	4643      	mov	r3, r8
 800334e:	4642      	mov	r2, r8
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	33ff      	adds	r3, #255	; 0xff
 8003356:	6013      	str	r3, [r2, #0]
  		}while(top_adet<fil.fsize);
 8003358:	465a      	mov	r2, fp
 800335a:	58ba      	ldr	r2, [r7, r2]
 800335c:	4293      	cmp	r3, r2
 800335e:	d3de      	bcc.n	800331e <SD_TO_W25Q.7774+0xa2>
  		f_close(&fil);	 /*close file */
 8003360:	0038      	movs	r0, r7
 8003362:	f004 fd19 	bl	8007d98 <f_close>
  		HAL_Delay(1000);
 8003366:	20fa      	movs	r0, #250	; 0xfa
 8003368:	0080      	lsls	r0, r0, #2
 800336a:	4656      	mov	r6, sl
 800336c:	f000 ff92 	bl	8004294 <HAL_Delay>
 8003370:	46aa      	mov	sl, r5
 8003372:	e7b0      	b.n	80032d6 <SD_TO_W25Q.7774+0x5a>
  	    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	2201      	movs	r2, #1
 8003378:	4813      	ldr	r0, [pc, #76]	; (80033c8 <SD_TO_W25Q.7774+0x14c>)
 800337a:	0189      	lsls	r1, r1, #6
 800337c:	f001 f996 	bl	80046ac <HAL_GPIO_WritePin>
  		LCD_Font(10, 30, "BITTI  sd karti cikartiniz.\n", Segoe_Script21x21,0xffff, 0x001F);
 8003380:	231f      	movs	r3, #31
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <SD_TO_W25Q.7774+0x130>)
 8003386:	211e      	movs	r1, #30
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	200a      	movs	r0, #10
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <SD_TO_W25Q.7774+0x134>)
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <SD_TO_W25Q.7774+0x150>)
 8003390:	f7fe fe90 	bl	80020b4 <LCD_Font>

  	}
 8003394:	b005      	add	sp, #20
 8003396:	bcf0      	pop	{r4, r5, r6, r7}
 8003398:	46bb      	mov	fp, r7
 800339a:	46b2      	mov	sl, r6
 800339c:	46a9      	mov	r9, r5
 800339e:	46a0      	mov	r8, r4
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20000398 	.word	0x20000398
 80033a8:	080080b0 	.word	0x080080b0
 80033ac:	0000ffff 	.word	0x0000ffff
 80033b0:	080080b8 	.word	0x080080b8
 80033b4:	08008064 	.word	0x08008064
 80033b8:	20000048 	.word	0x20000048
 80033bc:	20001174 	.word	0x20001174
 80033c0:	20001108 	.word	0x20001108
 80033c4:	200002cc 	.word	0x200002cc
 80033c8:	48000800 	.word	0x48000800
 80033cc:	08008090 	.word	0x08008090

080033d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033d0:	b510      	push	{r4, lr}
 80033d2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033d4:	221c      	movs	r2, #28
 80033d6:	2100      	movs	r1, #0
 80033d8:	a809      	add	r0, sp, #36	; 0x24
 80033da:	f004 fde7 	bl	8007fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033de:	2210      	movs	r2, #16
 80033e0:	2100      	movs	r1, #0
 80033e2:	4668      	mov	r0, sp
 80033e4:	f004 fde2 	bl	8007fac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033e8:	2100      	movs	r1, #0
 80033ea:	2210      	movs	r2, #16
 80033ec:	a804      	add	r0, sp, #16
 80033ee:	f004 fddd 	bl	8007fac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033f2:	2302      	movs	r3, #2
 80033f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033f6:	330e      	adds	r3, #14
 80033f8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033fa:	2202      	movs	r2, #2
 80033fc:	2300      	movs	r3, #0
 80033fe:	9210      	str	r2, [sp, #64]	; 0x40
 8003400:	9311      	str	r3, [sp, #68]	; 0x44
 8003402:	22e0      	movs	r2, #224	; 0xe0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003404:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003406:	2300      	movs	r3, #0
 8003408:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800340a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800340c:	9212      	str	r2, [sp, #72]	; 0x48
 800340e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003410:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003412:	f001 f95d 	bl	80046d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003416:	2207      	movs	r2, #7
 8003418:	2302      	movs	r3, #2
 800341a:	9200      	str	r2, [sp, #0]
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	2300      	movs	r3, #0
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003422:	2101      	movs	r1, #1
 8003424:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003426:	9202      	str	r2, [sp, #8]
 8003428:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800342a:	f001 fbab 	bl	8004b84 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800342e:	2303      	movs	r3, #3
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003430:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003432:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003434:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003436:	f001 fcab 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800343a:	b014      	add	sp, #80	; 0x50
 800343c:	bd10      	pop	{r4, pc}
 800343e:	46c0      	nop			; (mov r8, r8)

08003440 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003440:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 8003442:	480e      	ldr	r0, [pc, #56]	; (800347c <MX_SPI1_Init+0x3c>)
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <MX_SPI1_Init+0x40>)
{
 8003446:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8003448:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800344a:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003450:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003456:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800345c:	3af9      	subs	r2, #249	; 0xf9
 800345e:	3aff      	subs	r2, #255	; 0xff
 8003460:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003462:	3a01      	subs	r2, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003464:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003466:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003468:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800346a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800346c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003470:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003472:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003474:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003476:	f001 fd93 	bl	8004fa0 <HAL_SPI_Init>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800347a:	bd10      	pop	{r4, pc}
 800347c:	2000110c 	.word	0x2000110c
 8003480:	40013000 	.word	0x40013000

08003484 <main>:
{
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	46de      	mov	lr, fp
 8003488:	4645      	mov	r5, r8
 800348a:	4657      	mov	r7, sl
 800348c:	464e      	mov	r6, r9
 800348e:	b5e0      	push	{r5, r6, r7, lr}
 8003490:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8003492:	f000 fedd 	bl	8004250 <HAL_Init>
  SystemClock_Config();
 8003496:	f7ff ff9b 	bl	80033d0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349a:	2214      	movs	r2, #20
 800349c:	2100      	movs	r1, #0
 800349e:	a804      	add	r0, sp, #16
 80034a0:	f004 fd84 	bl	8007fac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	4fe1      	ldr	r7, [pc, #900]	; (800382c <main+0x3a8>)
 80034a8:	0309      	lsls	r1, r1, #12
 80034aa:	697a      	ldr	r2, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80034ac:	48e0      	ldr	r0, [pc, #896]	; (8003830 <main+0x3ac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	430a      	orrs	r2, r1
 80034b0:	617a      	str	r2, [r7, #20]
 80034b2:	697b      	ldr	r3, [r7, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80034b4:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b6:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	0289      	lsls	r1, r1, #10
 80034c2:	430a      	orrs	r2, r1
 80034c4:	617a      	str	r2, [r7, #20]
 80034c6:	697b      	ldr	r3, [r7, #20]
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80034c8:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	02c9      	lsls	r1, r1, #11
 80034d6:	430a      	orrs	r2, r1
 80034d8:	617a      	str	r2, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(SD_TAKILDI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TS_DOUT_Pin */
  GPIO_InitStruct.Pin = TS_DOUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	400b      	ands	r3, r1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	9302      	str	r3, [sp, #8]
 80034e4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	03c9      	lsls	r1, r1, #15
 80034ea:	430a      	orrs	r2, r1
 80034ec:	617a      	str	r2, [r7, #20]
 80034ee:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80034f0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034f2:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80034f4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034f6:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80034f8:	0189      	lsls	r1, r1, #6
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034fa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80034fc:	f001 f8d6 	bl	80046ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, TS_DIN_Pin|LCD_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8003500:	2181      	movs	r1, #129	; 0x81
 8003502:	2090      	movs	r0, #144	; 0x90
 8003504:	2200      	movs	r2, #0
 8003506:	0049      	lsls	r1, r1, #1
 8003508:	05c0      	lsls	r0, r0, #23
 800350a:	f001 f8cf 	bl	80046ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, TS_CS_Pin|TS_DCLCK_Pin|W25Q_CS_Pin|LCD_RD_Pin 
 800350e:	2090      	movs	r0, #144	; 0x90
 8003510:	2201      	movs	r2, #1
 8003512:	49c8      	ldr	r1, [pc, #800]	; (8003834 <main+0x3b0>)
 8003514:	05c0      	lsls	r0, r0, #23
 8003516:	f001 f8c9 	bl	80046ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800351a:	2200      	movs	r2, #0
 800351c:	49c6      	ldr	r1, [pc, #792]	; (8003838 <main+0x3b4>)
 800351e:	48c7      	ldr	r0, [pc, #796]	; (800383c <main+0x3b8>)
 8003520:	f001 f8c4 	bl	80046ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_SET);
 8003524:	2201      	movs	r2, #1
 8003526:	21c0      	movs	r1, #192	; 0xc0
 8003528:	48c5      	ldr	r0, [pc, #788]	; (8003840 <main+0x3bc>)
 800352a:	f001 f8bf 	bl	80046ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	2301      	movs	r3, #1
 8003532:	0192      	lsls	r2, r2, #6
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003534:	48be      	ldr	r0, [pc, #760]	; (8003830 <main+0x3ac>)
 8003536:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003538:	9204      	str	r2, [sp, #16]
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	9406      	str	r4, [sp, #24]
 800353e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003540:	f000 ffb8 	bl	80044b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TS_PENIRQ_Pin;
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	4bbf      	ldr	r3, [pc, #764]	; (8003844 <main+0x3c0>)
 8003548:	01d2      	lsls	r2, r2, #7
 800354a:	9204      	str	r2, [sp, #16]
 800354c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354e:	2301      	movs	r3, #1
  HAL_GPIO_Init(TS_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8003550:	48b7      	ldr	r0, [pc, #732]	; (8003830 <main+0x3ac>)
 8003552:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003554:	4698      	mov	r8, r3
 8003556:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(TS_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8003558:	f000 ffac 	bl	80044b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_TAKILDI_Pin;
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	2300      	movs	r3, #0
 8003560:	0212      	lsls	r2, r2, #8
 8003562:	9204      	str	r2, [sp, #16]
 8003564:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003566:	4643      	mov	r3, r8
  HAL_GPIO_Init(SD_TAKILDI_GPIO_Port, &GPIO_InitStruct);
 8003568:	48b1      	ldr	r0, [pc, #708]	; (8003830 <main+0x3ac>)
 800356a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800356c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(SD_TAKILDI_GPIO_Port, &GPIO_InitStruct);
 800356e:	f000 ffa1 	bl	80044b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(TS_DOUT_GPIO_Port, &GPIO_InitStruct);
 8003572:	2090      	movs	r0, #144	; 0x90
 8003574:	a904      	add	r1, sp, #16
 8003576:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TS_DOUT_Pin;
 8003578:	9404      	str	r4, [sp, #16]
 800357a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(TS_DOUT_GPIO_Port, &GPIO_InitStruct);
 800357e:	f000 ff99 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_DIN_Pin */
  GPIO_InitStruct.Pin = TS_DIN_Pin;
 8003582:	2202      	movs	r2, #2
 8003584:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TS_DIN_GPIO_Port, &GPIO_InitStruct);
 8003586:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = TS_DIN_Pin;
 8003588:	9204      	str	r2, [sp, #16]
 800358a:	9305      	str	r3, [sp, #20]
 800358c:	2202      	movs	r2, #2
 800358e:	2300      	movs	r3, #0
  HAL_GPIO_Init(TS_DIN_GPIO_Port, &GPIO_InitStruct);
 8003590:	a904      	add	r1, sp, #16
 8003592:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TS_DIN_Pin;
 8003594:	9206      	str	r2, [sp, #24]
 8003596:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(TS_DIN_GPIO_Port, &GPIO_InitStruct);
 8003598:	f000 ff8c 	bl	80044b4 <HAL_GPIO_Init>
  /*Configure GPIO pins : TS_CS_Pin TS_DCLCK_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|TS_DCLCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = TS_CS_Pin|TS_DCLCK_Pin;
 800359e:	220c      	movs	r2, #12
 80035a0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	a904      	add	r1, sp, #16
 80035a4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TS_CS_Pin|TS_DCLCK_Pin;
 80035a6:	9204      	str	r2, [sp, #16]
 80035a8:	9305      	str	r3, [sp, #20]
 80035aa:	9406      	str	r4, [sp, #24]
 80035ac:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f000 ff81 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : W25Q_CS_Pin LCD_RD_Pin LCD_WR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin|LCD_RD_Pin|LCD_WR_Pin|LCD_CD_Pin;
 80035b2:	2301      	movs	r3, #1
 80035b4:	4aa4      	ldr	r2, [pc, #656]	; (8003848 <main+0x3c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = W25Q_CS_Pin|LCD_RD_Pin|LCD_WR_Pin|LCD_CD_Pin;
 80035b8:	9204      	str	r2, [sp, #16]
 80035ba:	9305      	str	r3, [sp, #20]
 80035bc:	2403      	movs	r4, #3
 80035be:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c0:	a904      	add	r1, sp, #16
 80035c2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = W25Q_CS_Pin|LCD_RD_Pin|LCD_WR_Pin|LCD_CD_Pin;
 80035c4:	9306      	str	r3, [sp, #24]
 80035c6:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80035c8:	2503      	movs	r5, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f000 ff73 	bl	80044b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80035ce:	2400      	movs	r4, #0
 80035d0:	2301      	movs	r3, #1
 80035d2:	4a99      	ldr	r2, [pc, #612]	; (8003838 <main+0x3b4>)
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	4899      	ldr	r0, [pc, #612]	; (800383c <main+0x3b8>)
 80035d6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80035d8:	9204      	str	r2, [sp, #16]
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	9406      	str	r4, [sp, #24]
 80035de:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	f000 ff68 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 80035e4:	2280      	movs	r2, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80035e6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 80035e8:	2301      	movs	r3, #1
 80035ea:	0052      	lsls	r2, r2, #1
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80035ec:	a904      	add	r1, sp, #16
 80035ee:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 80035f0:	9204      	str	r2, [sp, #16]
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	9406      	str	r4, [sp, #24]
 80035f6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80035f8:	f000 ff5c 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RES_Pin;
 80035fc:	22c0      	movs	r2, #192	; 0xc0
 80035fe:	2301      	movs	r3, #1
 8003600:	2403      	movs	r4, #3
 8003602:	9204      	str	r2, [sp, #16]
 8003604:	9305      	str	r3, [sp, #20]
 8003606:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003608:	488d      	ldr	r0, [pc, #564]	; (8003840 <main+0x3bc>)
 800360a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RES_Pin;
 800360c:	9306      	str	r3, [sp, #24]
 800360e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003610:	f000 ff50 	bl	80044b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8003614:	2200      	movs	r2, #0
 8003616:	2103      	movs	r1, #3
 8003618:	2007      	movs	r0, #7
 800361a:	f000 fe4d 	bl	80042b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800361e:	2007      	movs	r0, #7
 8003620:	f000 fe7c 	bl	800431c <HAL_NVIC_EnableIRQ>
  MX_SPI1_Init();
 8003624:	f7ff ff0c 	bl	8003440 <MX_SPI1_Init>
  huart1.Instance = USART1;
 8003628:	4888      	ldr	r0, [pc, #544]	; (800384c <main+0x3c8>)
 800362a:	4b89      	ldr	r3, [pc, #548]	; (8003850 <main+0x3cc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800362c:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 800362e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003630:	23e1      	movs	r3, #225	; 0xe1
 8003632:	025b      	lsls	r3, r3, #9
 8003634:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003636:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003638:	60c6      	str	r6, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800363a:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800363c:	6106      	str	r6, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800363e:	6186      	str	r6, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003640:	61c6      	str	r6, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003642:	6206      	str	r6, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003644:	6246      	str	r6, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003646:	f002 fac7 	bl	8005bd8 <HAL_UART_Init>
  MX_FATFS_Init();
 800364a:	f002 fba9 	bl	8005da0 <MX_FATFS_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800364e:	4642      	mov	r2, r8
 8003650:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003652:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800365a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800365c:	4013      	ands	r3, r2
 800365e:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003660:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003662:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003664:	f000 fe28 	bl	80042b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003668:	200b      	movs	r0, #11
 800366a:	f000 fe57 	bl	800431c <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);  //OKUMA MODU KAPATILIYOR
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	2090      	movs	r0, #144	; 0x90
 8003672:	2201      	movs	r2, #1
 8003674:	0109      	lsls	r1, r1, #4
 8003676:	05c0      	lsls	r0, r0, #23
 8003678:	f001 f818 	bl	80046ac <HAL_GPIO_WritePin>
	LCD_ILI9488_init();
 800367c:	f7fe f954 	bl	8001928 <LCD_ILI9488_init>
	W25qxx_Init();
 8003680:	f000 fb2e 	bl	8003ce0 <W25qxx_Init>
HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_SET); //W25Q SPI ICIN KAPATILIYOR
 8003684:	2090      	movs	r0, #144	; 0x90
 8003686:	2201      	movs	r2, #1
 8003688:	2110      	movs	r1, #16
 800368a:	05c0      	lsls	r0, r0, #23
 800368c:	f001 f80e 	bl	80046ac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin,GPIO_PIN_SET);
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	2090      	movs	r0, #144	; 0x90
 8003694:	0049      	lsls	r1, r1, #1
 8003696:	2201      	movs	r2, #1
 8003698:	05c0      	lsls	r0, r0, #23
 800369a:	f001 f807 	bl	80046ac <HAL_GPIO_WritePin>
HAL_Delay(500);
 800369e:	20fa      	movs	r0, #250	; 0xfa
 80036a0:	0040      	lsls	r0, r0, #1
 80036a2:	f000 fdf7 	bl	8004294 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(SD_TAKILDI_GPIO_Port, SD_TAKILDI_Pin))
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	4861      	ldr	r0, [pc, #388]	; (8003830 <main+0x3ac>)
 80036aa:	0209      	lsls	r1, r1, #8
 80036ac:	f000 fff8 	bl	80046a0 <HAL_GPIO_ReadPin>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d100      	bne.n	80036b6 <main+0x232>
 80036b4:	e0f2      	b.n	800389c <main+0x418>
HAL_Delay(2000);
 80036b6:	20fa      	movs	r0, #250	; 0xfa
 80036b8:	00c0      	lsls	r0, r0, #3
 80036ba:	f000 fdeb 	bl	8004294 <HAL_Delay>
txbuffer[0]=0x0b;
 80036be:	220b      	movs	r2, #11
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <main+0x3d0>)
 80036c2:	701a      	strb	r2, [r3, #0]
txbuffer[1]=0;
 80036c4:	705e      	strb	r6, [r3, #1]
txbuffer[2]=0;
 80036c6:	709e      	strb	r6, [r3, #2]
txbuffer[3]=0;
 80036c8:	70de      	strb	r6, [r3, #3]
txbuffer[4]=0;
 80036ca:	711e      	strb	r6, [r3, #4]
 80036cc:	4b62      	ldr	r3, [pc, #392]	; (8003858 <main+0x3d4>)
 80036ce:	469a      	mov	sl, r3
 80036d0:	4b62      	ldr	r3, [pc, #392]	; (800385c <main+0x3d8>)
 80036d2:	4699      	mov	r9, r3
 80036d4:	4b62      	ldr	r3, [pc, #392]	; (8003860 <main+0x3dc>)
 80036d6:	4698      	mov	r8, r3
 	if (sn>5) sn=0;
 80036d8:	2400      	movs	r4, #0
	  if(!HAL_GPIO_ReadPin(SD_TAKILDI_GPIO_Port, SD_TAKILDI_Pin))
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	4854      	ldr	r0, [pc, #336]	; (8003830 <main+0x3ac>)
 80036de:	0209      	lsls	r1, r1, #8
 80036e0:	f000 ffde 	bl	80046a0 <HAL_GPIO_ReadPin>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d100      	bne.n	80036ea <main+0x266>
 80036e8:	e084      	b.n	80037f4 <main+0x370>
 	sn++;
 80036ea:	4653      	mov	r3, sl
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 	if (sn>5) sn=0;
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d864      	bhi.n	80037c0 <main+0x33c>
 	sn++;
 80036f6:	4652      	mov	r2, sl
 80036f8:	7013      	strb	r3, [r2, #0]
 	if(tusa_basildi)
 80036fa:	464b      	mov	r3, r9
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d164      	bne.n	80037cc <main+0x348>
 	if(tus_algilama_sayisi >1)
 8003702:	4643      	mov	r3, r8
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d9e7      	bls.n	80036da <main+0x256>
 	RENK_TO_LCD(0XF800, ((3860-TS_KOR_X)*0.129729), ((3860-TS_KOR_X)*0.129729)+10, ((3800-TS_KOR_Y)*0.086486), ((3800-TS_KOR_Y)*0.086486)+10);
 800370a:	4b56      	ldr	r3, [pc, #344]	; (8003864 <main+0x3e0>)
 800370c:	4856      	ldr	r0, [pc, #344]	; (8003868 <main+0x3e4>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	1ac0      	subs	r0, r0, r3
 8003712:	f7fd ff49 	bl	80015a8 <__aeabi_i2d>
 8003716:	4a55      	ldr	r2, [pc, #340]	; (800386c <main+0x3e8>)
 8003718:	4b55      	ldr	r3, [pc, #340]	; (8003870 <main+0x3ec>)
 800371a:	f7fd f911 	bl	8000940 <__aeabi_dmul>
 800371e:	0006      	movs	r6, r0
 8003720:	000f      	movs	r7, r1
 8003722:	f7fc fd85 	bl	8000230 <__aeabi_d2uiz>
 8003726:	2200      	movs	r2, #0
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <main+0x3f0>)
 800372a:	b284      	uxth	r4, r0
 800372c:	0039      	movs	r1, r7
 800372e:	0030      	movs	r0, r6
 8003730:	f7fc fd9c 	bl	800026c <__aeabi_dadd>
 8003734:	f7fc fd7c 	bl	8000230 <__aeabi_d2uiz>
 8003738:	b283      	uxth	r3, r0
 800373a:	469b      	mov	fp, r3
 800373c:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <main+0x3f4>)
 800373e:	484f      	ldr	r0, [pc, #316]	; (800387c <main+0x3f8>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	1ac0      	subs	r0, r0, r3
 8003744:	f7fd ff30 	bl	80015a8 <__aeabi_i2d>
 8003748:	4a4d      	ldr	r2, [pc, #308]	; (8003880 <main+0x3fc>)
 800374a:	4b4e      	ldr	r3, [pc, #312]	; (8003884 <main+0x400>)
 800374c:	f7fd f8f8 	bl	8000940 <__aeabi_dmul>
 8003750:	0006      	movs	r6, r0
 8003752:	000f      	movs	r7, r1
 8003754:	f7fc fd6c 	bl	8000230 <__aeabi_d2uiz>
 8003758:	2200      	movs	r2, #0
 800375a:	4b46      	ldr	r3, [pc, #280]	; (8003874 <main+0x3f0>)
 800375c:	b285      	uxth	r5, r0
 800375e:	0039      	movs	r1, r7
 8003760:	0030      	movs	r0, r6
 8003762:	f7fc fd83 	bl	800026c <__aeabi_dadd>
 8003766:	f7fc fd63 	bl	8000230 <__aeabi_d2uiz>
	    uint16_t adet=(Xend-Xstart)*2;
 800376a:	465b      	mov	r3, fp
	    LCD_ILI9488_raw_datafeed_start(Xstart, Xend-1,Ystart,Yend-1);
 800376c:	465a      	mov	r2, fp
 	RENK_TO_LCD(0XF800, ((3860-TS_KOR_X)*0.129729), ((3860-TS_KOR_X)*0.129729)+10, ((3800-TS_KOR_Y)*0.086486), ((3800-TS_KOR_Y)*0.086486)+10);
 800376e:	b287      	uxth	r7, r0
	    uint16_t adet=(Xend-Xstart)*2;
 8003770:	1b1e      	subs	r6, r3, r4
	    LCD_ILI9488_raw_datafeed_start(Xstart, Xend-1,Ystart,Yend-1);
 8003772:	1e51      	subs	r1, r2, #1
 8003774:	1e7b      	subs	r3, r7, #1
	    uint16_t adet=(Xend-Xstart)*2;
 8003776:	0076      	lsls	r6, r6, #1
	    LCD_ILI9488_raw_datafeed_start(Xstart, Xend-1,Ystart,Yend-1);
 8003778:	002a      	movs	r2, r5
 800377a:	0020      	movs	r0, r4
 800377c:	b29b      	uxth	r3, r3
 800377e:	b289      	uxth	r1, r1
	    uint16_t adet=(Xend-Xstart)*2;
 8003780:	b2b6      	uxth	r6, r6
	    LCD_ILI9488_raw_datafeed_start(Xstart, Xend-1,Ystart,Yend-1);
 8003782:	f7fe fc67 	bl	8002054 <LCD_ILI9488_raw_datafeed_start>
		for(uint16_t yi=Ystart;yi<=Yend;yi++)
 8003786:	42bd      	cmp	r5, r7
 8003788:	d814      	bhi.n	80037b4 <main+0x330>
 800378a:	2e00      	cmp	r6, #0
 800378c:	d012      	beq.n	80037b4 <main+0x330>
		GPIOB->ODR=renk;
 800378e:	24f8      	movs	r4, #248	; 0xf8
		GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 8003790:	2190      	movs	r1, #144	; 0x90
 8003792:	2280      	movs	r2, #128	; 0x80
		GPIOB->ODR=renk;
 8003794:	4829      	ldr	r0, [pc, #164]	; (800383c <main+0x3b8>)
 8003796:	0224      	lsls	r4, r4, #8
		GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 8003798:	05c9      	lsls	r1, r1, #23
 800379a:	0152      	lsls	r2, r2, #5
		for(uint16_t xi=0;xi<adet;xi+=2)
 800379c:	2300      	movs	r3, #0
 800379e:	3302      	adds	r3, #2
 80037a0:	b29b      	uxth	r3, r3
		GPIOB->ODR=renk;
 80037a2:	6144      	str	r4, [r0, #20]
		GPIOA->BRR=(uint32_t)LCD_WR_Pin;
 80037a4:	628a      	str	r2, [r1, #40]	; 0x28
		GPIOA->BSRR=(uint32_t)LCD_WR_Pin;
 80037a6:	618a      	str	r2, [r1, #24]
		for(uint16_t xi=0;xi<adet;xi+=2)
 80037a8:	429e      	cmp	r6, r3
 80037aa:	d8f8      	bhi.n	800379e <main+0x31a>
		for(uint16_t yi=Ystart;yi<=Yend;yi++)
 80037ac:	3501      	adds	r5, #1
 80037ae:	b2ad      	uxth	r5, r5
 80037b0:	42af      	cmp	r7, r5
 80037b2:	d2f3      	bcs.n	800379c <main+0x318>
		LCD_ILI9488_raw_datafeed_end();
 80037b4:	f7fe fc78 	bl	80020a8 <LCD_ILI9488_raw_datafeed_end>
 	tus_algilama_sayisi=0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	4642      	mov	r2, r8
 80037bc:	7013      	strb	r3, [r2, #0]
 80037be:	e78b      	b.n	80036d8 <main+0x254>
 	if (sn>5) sn=0;
 80037c0:	4653      	mov	r3, sl
 80037c2:	701c      	strb	r4, [r3, #0]
 	if(tusa_basildi)
 80037c4:	464b      	mov	r3, r9
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d09a      	beq.n	8003702 <main+0x27e>
 		TS_KOR_XY_OKU();
 80037cc:	f7fe fde2 	bl	8002394 <TS_KOR_XY_OKU>
 		tusa_basildi=0;
 80037d0:	464b      	mov	r3, r9
 80037d2:	701c      	strb	r4, [r3, #0]
 		tus_algilama_sayisi++;
 80037d4:	4643      	mov	r3, r8
 80037d6:	4642      	mov	r2, r8
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	7013      	strb	r3, [r2, #0]
 	if(tus_algilama_sayisi >1)
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d892      	bhi.n	800370a <main+0x286>
	  if(!HAL_GPIO_ReadPin(SD_TAKILDI_GPIO_Port, SD_TAKILDI_Pin))
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	4812      	ldr	r0, [pc, #72]	; (8003830 <main+0x3ac>)
 80037e8:	0209      	lsls	r1, r1, #8
 80037ea:	f000 ff59 	bl	80046a0 <HAL_GPIO_ReadPin>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d000      	beq.n	80037f4 <main+0x370>
 80037f2:	e77a      	b.n	80036ea <main+0x266>
	  fresult =f_mount(&fs, "",0);  //SD KART TAKILDIMI
 80037f4:	2200      	movs	r2, #0
 80037f6:	4924      	ldr	r1, [pc, #144]	; (8003888 <main+0x404>)
 80037f8:	4824      	ldr	r0, [pc, #144]	; (800388c <main+0x408>)
 80037fa:	f004 f843 	bl	8007884 <f_mount>
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <main+0x40c>)
 8003800:	7018      	strb	r0, [r3, #0]
	  	if(fresult == FR_OK)
 8003802:	2800      	cmp	r0, #0
 8003804:	d00f      	beq.n	8003826 <main+0x3a2>
	  	while(!HAL_GPIO_ReadPin(SD_TAKILDI_GPIO_Port, SD_TAKILDI_Pin));
 8003806:	2180      	movs	r1, #128	; 0x80
 8003808:	4809      	ldr	r0, [pc, #36]	; (8003830 <main+0x3ac>)
 800380a:	0209      	lsls	r1, r1, #8
 800380c:	f000 ff48 	bl	80046a0 <HAL_GPIO_ReadPin>
 8003810:	2800      	cmp	r0, #0
 8003812:	d0f8      	beq.n	8003806 <main+0x382>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003814:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <main+0x410>)
 800381a:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <main+0x414>)
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003822:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003824:	e7fd      	b.n	8003822 <main+0x39e>
	  	SD_TO_W25Q();
 8003826:	f7ff fd29 	bl	800327c <SD_TO_W25Q.7774>
 800382a:	e7ec      	b.n	8003806 <main+0x382>
 800382c:	40021000 	.word	0x40021000
 8003830:	48000800 	.word	0x48000800
 8003834:	0000981c 	.word	0x0000981c
 8003838:	0000ffff 	.word	0x0000ffff
 800383c:	48000400 	.word	0x48000400
 8003840:	48001400 	.word	0x48001400
 8003844:	10210000 	.word	0x10210000
 8003848:	00009810 	.word	0x00009810
 800384c:	20000318 	.word	0x20000318
 8003850:	40013800 	.word	0x40013800
 8003854:	20000ed8 	.word	0x20000ed8
 8003858:	20000046 	.word	0x20000046
 800385c:	2000004d 	.word	0x2000004d
 8003860:	2000004c 	.word	0x2000004c
 8003864:	20000042 	.word	0x20000042
 8003868:	00000f14 	.word	0x00000f14
 800386c:	ba2be059 	.word	0xba2be059
 8003870:	3fc09af5 	.word	0x3fc09af5
 8003874:	40240000 	.word	0x40240000
 8003878:	20000044 	.word	0x20000044
 800387c:	00000ed8 	.word	0x00000ed8
 8003880:	4d8fd5cb 	.word	0x4d8fd5cb
 8003884:	3fb623f2 	.word	0x3fb623f2
 8003888:	080080ac 	.word	0x080080ac
 800388c:	20000080 	.word	0x20000080
 8003890:	20001108 	.word	0x20001108
 8003894:	e000ed00 	.word	0xe000ed00
 8003898:	05fa0004 	.word	0x05fa0004
	  fresult =f_mount(&fs, "",0);  //SD KART TAKILDIMI
 800389c:	0032      	movs	r2, r6
 800389e:	490e      	ldr	r1, [pc, #56]	; (80038d8 <main+0x454>)
 80038a0:	480e      	ldr	r0, [pc, #56]	; (80038dc <main+0x458>)
 80038a2:	f003 ffef 	bl	8007884 <f_mount>
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <main+0x45c>)
 80038a8:	7018      	strb	r0, [r3, #0]
	  	if(fresult == FR_OK)
 80038aa:	42b0      	cmp	r0, r6
 80038ac:	d010      	beq.n	80038d0 <main+0x44c>
	  	while(!HAL_GPIO_ReadPin(SD_TAKILDI_GPIO_Port, SD_TAKILDI_Pin));
 80038ae:	2480      	movs	r4, #128	; 0x80
 80038b0:	0224      	lsls	r4, r4, #8
 80038b2:	0021      	movs	r1, r4
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <main+0x460>)
 80038b6:	f000 fef3 	bl	80046a0 <HAL_GPIO_ReadPin>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d0f9      	beq.n	80038b2 <main+0x42e>
 80038be:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <main+0x464>)
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <main+0x468>)
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	f3bf 8f4f 	dsb	sy
    __NOP();
 80038cc:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80038ce:	e7fd      	b.n	80038cc <main+0x448>
	  	SD_TO_W25Q();
 80038d0:	f7ff fcd4 	bl	800327c <SD_TO_W25Q.7774>
 80038d4:	e7eb      	b.n	80038ae <main+0x42a>
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	080080ac 	.word	0x080080ac
 80038dc:	20000080 	.word	0x20000080
 80038e0:	20001108 	.word	0x20001108
 80038e4:	48000800 	.word	0x48000800
 80038e8:	e000ed00 	.word	0xe000ed00
 80038ec:	05fa0004 	.word	0x05fa0004

080038f0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  tusa_basildi=1;
 80038f0:	2201      	movs	r2, #1
 80038f2:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <HAL_GPIO_EXTI_Callback+0x8>)
 80038f4:	701a      	strb	r2, [r3, #0]

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038f6:	4770      	bx	lr
 80038f8:	2000004d 	.word	0x2000004d

080038fc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038fc:	4770      	bx	lr
 80038fe:	46c0      	nop			; (mov r8, r8)

08003900 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003900:	2201      	movs	r2, #1
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_MspInit+0x44>)
{
 8003904:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	6999      	ldr	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 3, 0);
 8003908:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	4311      	orrs	r1, r2
 800390c:	6199      	str	r1, [r3, #24]
 800390e:	6999      	ldr	r1, [r3, #24]
{
 8003910:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003912:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003914:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	9200      	str	r2, [sp, #0]
 8003918:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	0549      	lsls	r1, r1, #21
 800391e:	430a      	orrs	r2, r1
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 3, 0);
 8003924:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	400b      	ands	r3, r1
 8003928:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 3, 0);
 800392a:	2103      	movs	r1, #3
 800392c:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 3, 0);
 8003930:	f000 fcc2 	bl	80042b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003934:	2002      	movs	r0, #2
 8003936:	2200      	movs	r2, #0
 8003938:	2103      	movs	r1, #3
 800393a:	4240      	negs	r0, r0
 800393c:	f000 fcbc 	bl	80042b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003940:	b003      	add	sp, #12
 8003942:	bd00      	pop	{pc}
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003948:	b510      	push	{r4, lr}
 800394a:	0004      	movs	r4, r0
 800394c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	2214      	movs	r2, #20
 8003950:	2100      	movs	r1, #0
 8003952:	a802      	add	r0, sp, #8
 8003954:	f004 fb2a 	bl	8007fac <memset>
  if(hspi->Instance==SPI1)
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_SPI_MspInit+0x74>)
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003960:	b008      	add	sp, #32
 8003962:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003964:	2080      	movs	r0, #128	; 0x80
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_SPI_MspInit+0x78>)
 8003968:	0140      	lsls	r0, r0, #5
 800396a:	6999      	ldr	r1, [r3, #24]
 800396c:	4301      	orrs	r1, r0
 800396e:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003970:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003972:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003974:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003976:	4002      	ands	r2, r0
 8003978:	9200      	str	r2, [sp, #0]
 800397a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397c:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	430a      	orrs	r2, r1
 8003982:	615a      	str	r2, [r3, #20]
 8003984:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003986:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	400b      	ands	r3, r1
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800398e:	2302      	movs	r3, #2
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	9303      	str	r3, [sp, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	2303      	movs	r3, #3
 8003998:	9204      	str	r2, [sp, #16]
 800399a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800399c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	a902      	add	r1, sp, #8
 80039a0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039a2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f000 fd86 	bl	80044b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	2019      	movs	r0, #25
 80039ae:	f000 fc83 	bl	80042b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039b2:	2019      	movs	r0, #25
 80039b4:	f000 fcb2 	bl	800431c <HAL_NVIC_EnableIRQ>
}
 80039b8:	e7d2      	b.n	8003960 <HAL_SPI_MspInit+0x18>
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	40013000 	.word	0x40013000
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c4:	b530      	push	{r4, r5, lr}
 80039c6:	0004      	movs	r4, r0
 80039c8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ca:	2214      	movs	r2, #20
 80039cc:	2100      	movs	r1, #0
 80039ce:	a802      	add	r0, sp, #8
 80039d0:	f004 faec 	bl	8007fac <memset>
  if(huart->Instance==USART1)
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_UART_MspInit+0xa0>)
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039dc:	b009      	add	sp, #36	; 0x24
 80039de:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80039e0:	2080      	movs	r0, #128	; 0x80
 80039e2:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_UART_MspInit+0xa4>)
 80039e4:	01c0      	lsls	r0, r0, #7
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	4301      	orrs	r1, r0
 80039ea:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ec:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80039ee:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80039f2:	4002      	ands	r2, r0
 80039f4:	9200      	str	r2, [sp, #0]
 80039f6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f8:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fc:	430a      	orrs	r2, r1
 80039fe:	615a      	str	r2, [r3, #20]
 8003a00:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a02:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a04:	400b      	ands	r3, r1
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	00d2      	lsls	r2, r2, #3
 8003a0e:	9202      	str	r2, [sp, #8]
 8003a10:	9303      	str	r3, [sp, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2303      	movs	r3, #3
 8003a16:	9204      	str	r2, [sp, #16]
 8003a18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a1a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1c:	05c0      	lsls	r0, r0, #23
 8003a1e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a20:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	f000 fd47 	bl	80044b4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003a26:	4d11      	ldr	r5, [pc, #68]	; (8003a6c <HAL_UART_MspInit+0xa8>)
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_UART_MspInit+0xac>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2a:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003a2c:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a2e:	2310      	movs	r3, #16
 8003a30:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a32:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a34:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a36:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a38:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a3a:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a3c:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a3e:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a40:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a42:	f000 fc91 	bl	8004368 <HAL_DMA_Init>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d108      	bne.n	8003a5c <HAL_UART_MspInit+0x98>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <HAL_UART_MspInit+0xb0>)
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	6811      	ldr	r1, [r2, #0]
 8003a52:	430b      	orrs	r3, r1
 8003a54:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a56:	66a5      	str	r5, [r4, #104]	; 0x68
 8003a58:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003a5a:	e7bf      	b.n	80039dc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003a5c:	f7ff ff4e 	bl	80038fc <Error_Handler>
 8003a60:	e7f3      	b.n	8003a4a <HAL_UART_MspInit+0x86>
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	200002d0 	.word	0x200002d0
 8003a70:	40020044 	.word	0x40020044
 8003a74:	40010000 	.word	0x40010000

08003a78 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a78:	4770      	bx	lr
 8003a7a:	46c0      	nop			; (mov r8, r8)

08003a7c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <HardFault_Handler>
 8003a7e:	46c0      	nop			; (mov r8, r8)

08003a80 <SVC_Handler>:
 8003a80:	4770      	bx	lr
 8003a82:	46c0      	nop			; (mov r8, r8)

08003a84 <PendSV_Handler>:
 8003a84:	4770      	bx	lr
 8003a86:	46c0      	nop			; (mov r8, r8)

08003a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatsFsCnt++;
 8003a8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <SysTick_Handler+0x40>)
 8003a8c:	7813      	ldrb	r3, [r2, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	7013      	strb	r3, [r2, #0]
	if(FatsFsCnt >=10)
 8003a94:	7813      	ldrb	r3, [r2, #0]
 8003a96:	2b09      	cmp	r3, #9
 8003a98:	d802      	bhi.n	8003aa0 <SysTick_Handler+0x18>
		FatsFsCnt =0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a9a:	f000 fbe9 	bl	8004270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a9e:	bd10      	pop	{r4, pc}
		FatsFsCnt =0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	7013      	strb	r3, [r2, #0]
	if(Timer1 >0)
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <SysTick_Handler+0x44>)
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d003      	beq.n	8003ab4 <SysTick_Handler+0x2c>
		Timer1--;
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	3a01      	subs	r2, #1
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]
	if(Timer2 >0)
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <SysTick_Handler+0x48>)
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	2a00      	cmp	r2, #0
 8003aba:	d0ee      	beq.n	8003a9a <SysTick_Handler+0x12>
		Timer2--;
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
}
 8003ac4:	e7e9      	b.n	8003a9a <SysTick_Handler+0x12>
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	2000004e 	.word	0x2000004e
 8003acc:	200013a1 	.word	0x200013a1
 8003ad0:	200013a0 	.word	0x200013a0

08003ad4 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003ad4:	2080      	movs	r0, #128	; 0x80
{
 8003ad6:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003ad8:	01c0      	lsls	r0, r0, #7
 8003ada:	f000 fded 	bl	80046b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003ade:	bd10      	pop	{r4, pc}

08003ae0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8003ae0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ae2:	4802      	ldr	r0, [pc, #8]	; (8003aec <DMA1_Channel4_5_IRQHandler+0xc>)
 8003ae4:	f000 fc98 	bl	8004418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	200002d0 	.word	0x200002d0

08003af0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003af0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003af2:	4802      	ldr	r0, [pc, #8]	; (8003afc <SPI1_IRQHandler+0xc>)
 8003af4:	f001 feda 	bl	80058ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	2000110c 	.word	0x2000110c

08003b00 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003b00:	4770      	bx	lr
 8003b02:	46c0      	nop			; (mov r8, r8)

08003b04 <W25qxx_ReadID>:
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
	return ret;	
}
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b06:	46d6      	mov	lr, sl
 8003b08:	464f      	mov	r7, r9
 8003b0a:	4646      	mov	r6, r8
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003b0c:	2390      	movs	r3, #144	; 0x90
{
 8003b0e:	b5c0      	push	{r6, r7, lr}
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003b10:	05db      	lsls	r3, r3, #23
{
 8003b12:	b084      	sub	sp, #16
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003b14:	0018      	movs	r0, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	2110      	movs	r1, #16
 8003b1a:	240e      	movs	r4, #14
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b1c:	270a      	movs	r7, #10
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003b1e:	469a      	mov	sl, r3
 8003b20:	f000 fdc4 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8003b24:	239f      	movs	r3, #159	; 0x9f
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b26:	220f      	movs	r2, #15
 8003b28:	4e1f      	ldr	r6, [pc, #124]	; (8003ba8 <W25qxx_ReadID+0xa4>)
 8003b2a:	446c      	add	r4, sp
 8003b2c:	7023      	strb	r3, [r4, #0]
 8003b2e:	0021      	movs	r1, r4
 8003b30:	446a      	add	r2, sp
 8003b32:	0030      	movs	r0, r6
 8003b34:	9700      	str	r7, [sp, #0]
 8003b36:	3b9e      	subs	r3, #158	; 0x9e
 8003b38:	f001 fbba 	bl	80052b0 <HAL_SPI_TransmitReceive>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b3c:	23a5      	movs	r3, #165	; 0xa5
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b3e:	220f      	movs	r2, #15
 8003b40:	4699      	mov	r9, r3
 8003b42:	7023      	strb	r3, [r4, #0]
 8003b44:	0021      	movs	r1, r4
 8003b46:	446a      	add	r2, sp
 8003b48:	0030      	movs	r0, r6
 8003b4a:	9700      	str	r7, [sp, #0]
 8003b4c:	3ba4      	subs	r3, #164	; 0xa4
 8003b4e:	f001 fbaf 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003b52:	466b      	mov	r3, sp
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b54:	220f      	movs	r2, #15
	return ret;	
 8003b56:	7bdd      	ldrb	r5, [r3, #15]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b58:	464b      	mov	r3, r9
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b5a:	0021      	movs	r1, r4
 8003b5c:	7023      	strb	r3, [r4, #0]
 8003b5e:	446a      	add	r2, sp
 8003b60:	0030      	movs	r0, r6
 8003b62:	9700      	str	r7, [sp, #0]
 8003b64:	3ba4      	subs	r3, #164	; 0xa4
 8003b66:	f001 fba3 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003b6a:	466b      	mov	r3, sp
 8003b6c:	7bdb      	ldrb	r3, [r3, #15]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b6e:	220f      	movs	r2, #15
	return ret;	
 8003b70:	4698      	mov	r8, r3
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b72:	464b      	mov	r3, r9
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003b74:	0021      	movs	r1, r4
 8003b76:	7023      	strb	r3, [r4, #0]
 8003b78:	446a      	add	r2, sp
 8003b7a:	0030      	movs	r0, r6
 8003b7c:	9700      	str	r7, [sp, #0]
 8003b7e:	3ba4      	subs	r3, #164	; 0xa4
 8003b80:	f001 fb96 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003b84:	466b      	mov	r3, sp
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003b86:	4650      	mov	r0, sl
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2110      	movs	r1, #16
	return ret;	
 8003b8c:	7bdc      	ldrb	r4, [r3, #15]
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003b8e:	f000 fd8d 	bl	80046ac <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003b92:	4643      	mov	r3, r8
 8003b94:	0428      	lsls	r0, r5, #16
 8003b96:	021d      	lsls	r5, r3, #8
 8003b98:	4328      	orrs	r0, r5
 8003b9a:	4320      	orrs	r0, r4
  return Temp;
}
 8003b9c:	b004      	add	sp, #16
 8003b9e:	bce0      	pop	{r5, r6, r7}
 8003ba0:	46ba      	mov	sl, r7
 8003ba2:	46b1      	mov	r9, r6
 8003ba4:	46a8      	mov	r8, r5
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba8:	2000110c 	.word	0x2000110c

08003bac <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bae:	46ce      	mov	lr, r9
 8003bb0:	4647      	mov	r7, r8
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003bb2:	2090      	movs	r0, #144	; 0x90
{
 8003bb4:	b580      	push	{r7, lr}
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003bb6:	2200      	movs	r2, #0
{
 8003bb8:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003bba:	2110      	movs	r1, #16
 8003bbc:	05c0      	lsls	r0, r0, #23
 8003bbe:	250e      	movs	r5, #14
 8003bc0:	f000 fd74 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8003bc4:	234b      	movs	r3, #75	; 0x4b
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	4e1f      	ldr	r6, [pc, #124]	; (8003c48 <W25qxx_ReadUniqID+0x9c>)
 8003bca:	446d      	add	r5, sp
 8003bcc:	702b      	strb	r3, [r5, #0]
 8003bce:	3b41      	subs	r3, #65	; 0x41
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	0029      	movs	r1, r5
 8003bd4:	3b09      	subs	r3, #9
 8003bd6:	0030      	movs	r0, r6
 8003bd8:	446a      	add	r2, sp
 8003bda:	f001 fb69 	bl	80052b0 <HAL_SPI_TransmitReceive>
	for(uint8_t	i=0;i<4;i++)
 8003bde:	23a5      	movs	r3, #165	; 0xa5
  W25qxx_Spi(0x4B);
 8003be0:	2404      	movs	r4, #4
 8003be2:	4698      	mov	r8, r3
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003be4:	270a      	movs	r7, #10
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003be6:	4643      	mov	r3, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003be8:	220f      	movs	r2, #15
 8003bea:	3c01      	subs	r4, #1
 8003bec:	702b      	strb	r3, [r5, #0]
 8003bee:	0029      	movs	r1, r5
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	0030      	movs	r0, r6
 8003bf4:	9700      	str	r7, [sp, #0]
 8003bf6:	446a      	add	r2, sp
 8003bf8:	b2e4      	uxtb	r4, r4
 8003bfa:	f001 fb59 	bl	80052b0 <HAL_SPI_TransmitReceive>
	for(uint8_t	i=0;i<4;i++)
 8003bfe:	2c00      	cmp	r4, #0
 8003c00:	d1f1      	bne.n	8003be6 <W25qxx_ReadUniqID+0x3a>
 8003c02:	2308      	movs	r3, #8
 8003c04:	4699      	mov	r9, r3
 8003c06:	339d      	adds	r3, #157	; 0x9d
 8003c08:	4698      	mov	r8, r3
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003c0a:	270a      	movs	r7, #10
 8003c0c:	4c0f      	ldr	r4, [pc, #60]	; (8003c4c <W25qxx_ReadUniqID+0xa0>)
 8003c0e:	44a1      	add	r9, r4
	for(uint8_t	i=0;i<8;i++)
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c10:	4643      	mov	r3, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003c12:	220f      	movs	r2, #15
 8003c14:	702b      	strb	r3, [r5, #0]
 8003c16:	0029      	movs	r1, r5
 8003c18:	2301      	movs	r3, #1
 8003c1a:	0030      	movs	r0, r6
 8003c1c:	9700      	str	r7, [sp, #0]
 8003c1e:	446a      	add	r2, sp
 8003c20:	f001 fb46 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003c24:	466b      	mov	r3, sp
 8003c26:	7bdb      	ldrb	r3, [r3, #15]
 8003c28:	3401      	adds	r4, #1
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c2a:	7023      	strb	r3, [r4, #0]
	for(uint8_t	i=0;i<8;i++)
 8003c2c:	454c      	cmp	r4, r9
 8003c2e:	d1ef      	bne.n	8003c10 <W25qxx_ReadUniqID+0x64>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003c30:	2090      	movs	r0, #144	; 0x90
 8003c32:	2201      	movs	r2, #1
 8003c34:	2110      	movs	r1, #16
 8003c36:	05c0      	lsls	r0, r0, #23
 8003c38:	f000 fd38 	bl	80046ac <HAL_GPIO_WritePin>
}
 8003c3c:	b005      	add	sp, #20
 8003c3e:	bcc0      	pop	{r6, r7}
 8003c40:	46b9      	mov	r9, r7
 8003c42:	46b0      	mov	r8, r6
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	2000110c 	.word	0x2000110c
 8003c4c:	200013a4 	.word	0x200013a4

08003c50 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	46d6      	mov	lr, sl
 8003c54:	464f      	mov	r7, r9
 8003c56:	4646      	mov	r6, r8
 8003c58:	b5c0      	push	{r6, r7, lr}
	W25qxx_Delay(1);
 8003c5a:	2001      	movs	r0, #1
{
 8003c5c:	b084      	sub	sp, #16
	W25qxx_Delay(1);
 8003c5e:	f000 fb19 	bl	8004294 <HAL_Delay>
	HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003c62:	2090      	movs	r0, #144	; 0x90
 8003c64:	2200      	movs	r2, #0
 8003c66:	2110      	movs	r1, #16
 8003c68:	05c0      	lsls	r0, r0, #23
 8003c6a:	240e      	movs	r4, #14
 8003c6c:	f000 fd1e 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003c70:	2305      	movs	r3, #5
 8003c72:	446c      	add	r4, sp
 8003c74:	7023      	strb	r3, [r4, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <W25qxx_WaitForWriteEnd+0x88>)
 8003c78:	250f      	movs	r5, #15
 8003c7a:	4698      	mov	r8, r3
 8003c7c:	230a      	movs	r3, #10
 8003c7e:	446d      	add	r5, sp
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	002a      	movs	r2, r5
 8003c84:	3b09      	subs	r3, #9
 8003c86:	0021      	movs	r1, r4
 8003c88:	4640      	mov	r0, r8
 8003c8a:	f001 fb11 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003c8e:	23a5      	movs	r3, #165	; 0xa5
 8003c90:	469a      	mov	sl, r3
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003c92:	3b9b      	subs	r3, #155	; 0x9b
 8003c94:	4699      	mov	r9, r3
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c96:	2624      	movs	r6, #36	; 0x24
 8003c98:	4f10      	ldr	r7, [pc, #64]	; (8003cdc <W25qxx_WaitForWriteEnd+0x8c>)
 8003c9a:	4653      	mov	r3, sl
 8003c9c:	7023      	strb	r3, [r4, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	002a      	movs	r2, r5
 8003ca2:	0021      	movs	r1, r4
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f001 fb01 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003cae:	782b      	ldrb	r3, [r5, #0]
		W25qxx_Delay(1);
 8003cb0:	2001      	movs	r0, #1
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003cb2:	55bb      	strb	r3, [r7, r6]
		W25qxx_Delay(1);
 8003cb4:	f000 faee 	bl	8004294 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003cb8:	5dbb      	ldrb	r3, [r7, r6]
 8003cba:	07db      	lsls	r3, r3, #31
 8003cbc:	d4ed      	bmi.n	8003c9a <W25qxx_WaitForWriteEnd+0x4a>
 HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003cbe:	2090      	movs	r0, #144	; 0x90
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	2110      	movs	r1, #16
 8003cc4:	05c0      	lsls	r0, r0, #23
 8003cc6:	f000 fcf1 	bl	80046ac <HAL_GPIO_WritePin>
}
 8003cca:	b004      	add	sp, #16
 8003ccc:	bce0      	pop	{r5, r6, r7}
 8003cce:	46ba      	mov	sl, r7
 8003cd0:	46b1      	mov	r9, r6
 8003cd2:	46a8      	mov	r8, r5
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	2000110c 	.word	0x2000110c
 8003cdc:	200013a4 	.word	0x200013a4

08003ce0 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	46c6      	mov	lr, r8
	w25qxx.Lock=1;	
 8003ce4:	2327      	movs	r3, #39	; 0x27
 8003ce6:	2201      	movs	r2, #1
{
 8003ce8:	b500      	push	{lr}
	w25qxx.Lock=1;	
 8003cea:	4c50      	ldr	r4, [pc, #320]	; (8003e2c <W25qxx_Init+0x14c>)
{
 8003cec:	b084      	sub	sp, #16
	w25qxx.Lock=1;	
 8003cee:	54e2      	strb	r2, [r4, r3]
	while(HAL_GetTick()<100)
 8003cf0:	e002      	b.n	8003cf8 <W25qxx_Init+0x18>
		W25qxx_Delay(1);
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f000 face 	bl	8004294 <HAL_Delay>
	while(HAL_GetTick()<100)
 8003cf8:	f000 fac6 	bl	8004288 <HAL_GetTick>
 8003cfc:	2863      	cmp	r0, #99	; 0x63
 8003cfe:	d9f8      	bls.n	8003cf2 <W25qxx_Init+0x12>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8003d00:	f7ff ff00 	bl	8003b04 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8003d04:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <W25qxx_Init+0x150>)
 8003d06:	b280      	uxth	r0, r0
 8003d08:	4298      	cmp	r0, r3
 8003d0a:	d007      	beq.n	8003d1c <W25qxx_Init+0x3c>
	*/
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8003d0c:	2327      	movs	r3, #39	; 0x27
 8003d0e:	2200      	movs	r2, #0
			return false;
 8003d10:	2000      	movs	r0, #0
			w25qxx.Lock=0;	
 8003d12:	54e2      	strb	r2, [r4, r3]
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
	return true;
}	
 8003d14:	b004      	add	sp, #16
 8003d16:	bc80      	pop	{r7}
 8003d18:	46b8      	mov	r8, r7
 8003d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			w25qxx.ID=W25Q128;
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=256;
 8003d20:	33f8      	adds	r3, #248	; 0xf8
 8003d22:	61e3      	str	r3, [r4, #28]
	w25qxx.PageSize=256;
 8003d24:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	015b      	lsls	r3, r3, #5
 8003d2a:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8003d2c:	6163      	str	r3, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	025b      	lsls	r3, r3, #9
 8003d32:	60e3      	str	r3, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8003d34:	61a3      	str	r3, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	01db      	lsls	r3, r3, #7
 8003d3a:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8003d3c:	f7ff ff36 	bl	8003bac <W25qxx_ReadUniqID>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003d40:	2090      	movs	r0, #144	; 0x90
 8003d42:	2200      	movs	r2, #0
 8003d44:	2110      	movs	r1, #16
 8003d46:	05c0      	lsls	r0, r0, #23
 8003d48:	250e      	movs	r5, #14
 8003d4a:	f000 fcaf 	bl	80046ac <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003d4e:	270a      	movs	r7, #10
 8003d50:	2305      	movs	r3, #5
 8003d52:	220f      	movs	r2, #15
 8003d54:	4e37      	ldr	r6, [pc, #220]	; (8003e34 <W25qxx_Init+0x154>)
 8003d56:	446d      	add	r5, sp
 8003d58:	702b      	strb	r3, [r5, #0]
 8003d5a:	0029      	movs	r1, r5
 8003d5c:	3b04      	subs	r3, #4
 8003d5e:	446a      	add	r2, sp
 8003d60:	0030      	movs	r0, r6
 8003d62:	9700      	str	r7, [sp, #0]
 8003d64:	f001 faa4 	bl	80052b0 <HAL_SPI_TransmitReceive>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8003d68:	23a5      	movs	r3, #165	; 0xa5
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	4698      	mov	r8, r3
 8003d6e:	702b      	strb	r3, [r5, #0]
 8003d70:	0029      	movs	r1, r5
 8003d72:	3ba4      	subs	r3, #164	; 0xa4
 8003d74:	446a      	add	r2, sp
 8003d76:	0030      	movs	r0, r6
 8003d78:	9700      	str	r7, [sp, #0]
 8003d7a:	f001 fa99 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003d7e:	466b      	mov	r3, sp
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003d80:	2090      	movs	r0, #144	; 0x90
	return ret;	
 8003d82:	7bda      	ldrb	r2, [r3, #15]
		w25qxx.StatusRegister1 = status;
 8003d84:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003d86:	2110      	movs	r1, #16
		w25qxx.StatusRegister1 = status;
 8003d88:	54e2      	strb	r2, [r4, r3]
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003d8a:	05c0      	lsls	r0, r0, #23
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f000 fc8d 	bl	80046ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003d92:	2090      	movs	r0, #144	; 0x90
 8003d94:	2200      	movs	r2, #0
 8003d96:	2110      	movs	r1, #16
 8003d98:	05c0      	lsls	r0, r0, #23
 8003d9a:	f000 fc87 	bl	80046ac <HAL_GPIO_WritePin>
		W25qxx_Spi(0x35);
 8003d9e:	2335      	movs	r3, #53	; 0x35
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003da0:	220f      	movs	r2, #15
 8003da2:	702b      	strb	r3, [r5, #0]
 8003da4:	0029      	movs	r1, r5
 8003da6:	3b34      	subs	r3, #52	; 0x34
 8003da8:	446a      	add	r2, sp
 8003daa:	0030      	movs	r0, r6
 8003dac:	9700      	str	r7, [sp, #0]
 8003dae:	f001 fa7f 	bl	80052b0 <HAL_SPI_TransmitReceive>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8003db2:	4643      	mov	r3, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003db4:	220f      	movs	r2, #15
 8003db6:	702b      	strb	r3, [r5, #0]
 8003db8:	0029      	movs	r1, r5
 8003dba:	3ba4      	subs	r3, #164	; 0xa4
 8003dbc:	446a      	add	r2, sp
 8003dbe:	0030      	movs	r0, r6
 8003dc0:	9700      	str	r7, [sp, #0]
 8003dc2:	f001 fa75 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003dc6:	466b      	mov	r3, sp
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003dc8:	2090      	movs	r0, #144	; 0x90
	return ret;	
 8003dca:	7bda      	ldrb	r2, [r3, #15]
		w25qxx.StatusRegister2 = status;
 8003dcc:	2325      	movs	r3, #37	; 0x25
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003dce:	2110      	movs	r1, #16
		w25qxx.StatusRegister2 = status;
 8003dd0:	54e2      	strb	r2, [r4, r3]
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003dd2:	05c0      	lsls	r0, r0, #23
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f000 fc69 	bl	80046ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003dda:	2090      	movs	r0, #144	; 0x90
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2110      	movs	r1, #16
 8003de0:	05c0      	lsls	r0, r0, #23
 8003de2:	f000 fc63 	bl	80046ac <HAL_GPIO_WritePin>
		W25qxx_Spi(0x15);
 8003de6:	2315      	movs	r3, #21
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003de8:	220f      	movs	r2, #15
 8003dea:	702b      	strb	r3, [r5, #0]
 8003dec:	0029      	movs	r1, r5
 8003dee:	3b14      	subs	r3, #20
 8003df0:	446a      	add	r2, sp
 8003df2:	0030      	movs	r0, r6
 8003df4:	9700      	str	r7, [sp, #0]
 8003df6:	f001 fa5b 	bl	80052b0 <HAL_SPI_TransmitReceive>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8003dfa:	4643      	mov	r3, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	702b      	strb	r3, [r5, #0]
 8003e00:	0029      	movs	r1, r5
 8003e02:	3ba4      	subs	r3, #164	; 0xa4
 8003e04:	446a      	add	r2, sp
 8003e06:	0030      	movs	r0, r6
 8003e08:	9700      	str	r7, [sp, #0]
 8003e0a:	f001 fa51 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003e0e:	466b      	mov	r3, sp
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003e10:	2090      	movs	r0, #144	; 0x90
	return ret;	
 8003e12:	7bda      	ldrb	r2, [r3, #15]
		w25qxx.StatusRegister3 = status;
 8003e14:	2326      	movs	r3, #38	; 0x26
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003e16:	05c0      	lsls	r0, r0, #23
		w25qxx.StatusRegister3 = status;
 8003e18:	54e2      	strb	r2, [r4, r3]
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003e1a:	2110      	movs	r1, #16
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f000 fc45 	bl	80046ac <HAL_GPIO_WritePin>
	w25qxx.Lock=0;	
 8003e22:	2327      	movs	r3, #39	; 0x27
 8003e24:	2200      	movs	r2, #0
	return true;
 8003e26:	2001      	movs	r0, #1
	w25qxx.Lock=0;	
 8003e28:	54e2      	strb	r2, [r4, r3]
	return true;
 8003e2a:	e773      	b.n	8003d14 <W25qxx_Init+0x34>
 8003e2c:	200013a4 	.word	0x200013a4
 8003e30:	00004018 	.word	0x00004018
 8003e34:	2000110c 	.word	0x2000110c

08003e38 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3a:	46c6      	mov	lr, r8
	while(w25qxx.Lock==1)
 8003e3c:	2327      	movs	r3, #39	; 0x27
{
 8003e3e:	b500      	push	{lr}
	while(w25qxx.Lock==1)
 8003e40:	4c42      	ldr	r4, [pc, #264]	; (8003f4c <W25qxx_EraseSector+0x114>)
{
 8003e42:	0007      	movs	r7, r0
	while(w25qxx.Lock==1)
 8003e44:	5ce3      	ldrb	r3, [r4, r3]
{
 8003e46:	b084      	sub	sp, #16
	while(w25qxx.Lock==1)
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d106      	bne.n	8003e5a <W25qxx_EraseSector+0x22>
 8003e4c:	2527      	movs	r5, #39	; 0x27
		W25qxx_Delay(1);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f000 fa20 	bl	8004294 <HAL_Delay>
	while(w25qxx.Lock==1)
 8003e54:	5d63      	ldrb	r3, [r4, r5]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d0f9      	beq.n	8003e4e <W25qxx_EraseSector+0x16>
	w25qxx.Lock=1;	
 8003e5a:	2327      	movs	r3, #39	; 0x27
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	54e2      	strb	r2, [r4, r3]
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 8003e60:	f7ff fef6 	bl	8003c50 <W25qxx_WaitForWriteEnd>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003e64:	2090      	movs	r0, #144	; 0x90
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003e66:	6923      	ldr	r3, [r4, #16]
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	05c0      	lsls	r0, r0, #23
 8003e6e:	250e      	movs	r5, #14
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003e70:	435f      	muls	r7, r3
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003e72:	f000 fc1b 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);  //write enable
 8003e76:	2306      	movs	r3, #6
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003e78:	220f      	movs	r2, #15
 8003e7a:	446d      	add	r5, sp
 8003e7c:	4e34      	ldr	r6, [pc, #208]	; (8003f50 <W25qxx_EraseSector+0x118>)
 8003e7e:	702b      	strb	r3, [r5, #0]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4698      	mov	r8, r3
 8003e84:	0029      	movs	r1, r5
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	446a      	add	r2, sp
 8003e8a:	3b09      	subs	r3, #9
 8003e8c:	0030      	movs	r0, r6
 8003e8e:	f001 fa0f 	bl	80052b0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003e92:	2090      	movs	r0, #144	; 0x90
 8003e94:	2201      	movs	r2, #1
 8003e96:	2110      	movs	r1, #16
 8003e98:	05c0      	lsls	r0, r0, #23
 8003e9a:	f000 fc07 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f000 f9f8 	bl	8004294 <HAL_Delay>
  W25qxx_WriteEnable();
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003ea4:	2090      	movs	r0, #144	; 0x90
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	05c0      	lsls	r0, r0, #23
 8003eac:	f000 fbfe 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);   //erase sector 4kbyte
 8003eb0:	2320      	movs	r3, #32
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	702b      	strb	r3, [r5, #0]
 8003eb6:	4643      	mov	r3, r8
 8003eb8:	0029      	movs	r1, r5
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	0030      	movs	r0, r6
 8003ebe:	3b09      	subs	r3, #9
 8003ec0:	446a      	add	r2, sp
 8003ec2:	f001 f9f5 	bl	80052b0 <HAL_SPI_TransmitReceive>
	if(w25qxx.ID>=W25Q256)
 8003ec6:	7823      	ldrb	r3, [r4, #0]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d832      	bhi.n	8003f32 <W25qxx_EraseSector+0xfa>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003ecc:	0c3b      	lsrs	r3, r7, #16
 8003ece:	702b      	strb	r3, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	4698      	mov	r8, r3
 8003ed6:	0029      	movs	r1, r5
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	446a      	add	r2, sp
 8003edc:	0030      	movs	r0, r6
 8003ede:	3b09      	subs	r3, #9
 8003ee0:	f001 f9e6 	bl	80052b0 <HAL_SPI_TransmitReceive>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003ee4:	0a3b      	lsrs	r3, r7, #8
 8003ee6:	702b      	strb	r3, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003ee8:	220f      	movs	r2, #15
 8003eea:	4643      	mov	r3, r8
 8003eec:	0029      	movs	r1, r5
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	446a      	add	r2, sp
 8003ef2:	0030      	movs	r0, r6
 8003ef4:	3b09      	subs	r3, #9
 8003ef6:	f001 f9db 	bl	80052b0 <HAL_SPI_TransmitReceive>
 8003efa:	4643      	mov	r3, r8
 8003efc:	220f      	movs	r2, #15
 8003efe:	0029      	movs	r1, r5
  W25qxx_Spi(SectorAddr & 0xFF);
 8003f00:	702f      	strb	r7, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003f02:	446a      	add	r2, sp
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	0030      	movs	r0, r6
 8003f08:	3b09      	subs	r3, #9
 8003f0a:	f001 f9d1 	bl	80052b0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003f0e:	2090      	movs	r0, #144	; 0x90
 8003f10:	2201      	movs	r2, #1
 8003f12:	2110      	movs	r1, #16
 8003f14:	05c0      	lsls	r0, r0, #23
 8003f16:	f000 fbc9 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8003f1a:	f7ff fe99 	bl	8003c50 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f000 f9b8 	bl	8004294 <HAL_Delay>
	w25qxx.Lock=0;
 8003f24:	2327      	movs	r3, #39	; 0x27
 8003f26:	2200      	movs	r2, #0
 8003f28:	54e2      	strb	r2, [r4, r3]
}
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	46b8      	mov	r8, r7
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003f32:	0e3b      	lsrs	r3, r7, #24
 8003f34:	702b      	strb	r3, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003f36:	220f      	movs	r2, #15
 8003f38:	4643      	mov	r3, r8
 8003f3a:	0029      	movs	r1, r5
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	0030      	movs	r0, r6
 8003f40:	3b09      	subs	r3, #9
 8003f42:	446a      	add	r2, sp
 8003f44:	f001 f9b4 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 8003f48:	e7c0      	b.n	8003ecc <W25qxx_EraseSector+0x94>
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	200013a4 	.word	0x200013a4
 8003f50:	2000110c 	.word	0x2000110c

08003f54 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	4657      	mov	r7, sl
 8003f58:	464e      	mov	r6, r9
 8003f5a:	4645      	mov	r5, r8
 8003f5c:	46de      	mov	lr, fp
 8003f5e:	4698      	mov	r8, r3
	while(w25qxx.Lock==1)
 8003f60:	2327      	movs	r3, #39	; 0x27
{
 8003f62:	b5e0      	push	{r5, r6, r7, lr}
	while(w25qxx.Lock==1)
 8003f64:	4d4f      	ldr	r5, [pc, #316]	; (80040a4 <W25qxx_WritePage+0x150>)
{
 8003f66:	4682      	mov	sl, r0
	while(w25qxx.Lock==1)
 8003f68:	5ceb      	ldrb	r3, [r5, r3]
{
 8003f6a:	000e      	movs	r6, r1
 8003f6c:	4691      	mov	r9, r2
	while(w25qxx.Lock==1)
 8003f6e:	2727      	movs	r7, #39	; 0x27
{
 8003f70:	b085      	sub	sp, #20
	while(w25qxx.Lock==1)
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <W25qxx_WritePage+0x2e>
		W25qxx_Delay(1);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 f98c 	bl	8004294 <HAL_Delay>
	while(w25qxx.Lock==1)
 8003f7c:	5dec      	ldrb	r4, [r5, r7]
 8003f7e:	2c01      	cmp	r4, #1
 8003f80:	d0f9      	beq.n	8003f76 <W25qxx_WritePage+0x22>
	w25qxx.Lock=1;
 8003f82:	2327      	movs	r3, #39	; 0x27
 8003f84:	2201      	movs	r2, #1
 8003f86:	54ea      	strb	r2, [r5, r3]
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8003f88:	4642      	mov	r2, r8
 8003f8a:	896b      	ldrh	r3, [r5, #10]
 8003f8c:	444a      	add	r2, r9
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d900      	bls.n	8003f94 <W25qxx_WritePage+0x40>
 8003f92:	e077      	b.n	8004084 <W25qxx_WritePage+0x130>
 8003f94:	4642      	mov	r2, r8
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	d100      	bne.n	8003f9c <W25qxx_WritePage+0x48>
 8003f9a:	e073      	b.n	8004084 <W25qxx_WritePage+0x130>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8003f9c:	f7ff fe58 	bl	8003c50 <W25qxx_WaitForWriteEnd>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003fa0:	2090      	movs	r0, #144	; 0x90
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2110      	movs	r1, #16
 8003fa6:	05c0      	lsls	r0, r0, #23
 8003fa8:	240e      	movs	r4, #14
 8003faa:	f000 fb7f 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);  //write enable
 8003fae:	2306      	movs	r3, #6
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	446c      	add	r4, sp
 8003fb4:	4f3c      	ldr	r7, [pc, #240]	; (80040a8 <W25qxx_WritePage+0x154>)
 8003fb6:	7023      	strb	r3, [r4, #0]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	469b      	mov	fp, r3
 8003fbc:	0021      	movs	r1, r4
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	446a      	add	r2, sp
 8003fc2:	3b09      	subs	r3, #9
 8003fc4:	0038      	movs	r0, r7
 8003fc6:	f001 f973 	bl	80052b0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 8003fca:	2090      	movs	r0, #144	; 0x90
 8003fcc:	2201      	movs	r2, #1
 8003fce:	2110      	movs	r1, #16
 8003fd0:	05c0      	lsls	r0, r0, #23
 8003fd2:	f000 fb6b 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f000 f95c 	bl	8004294 <HAL_Delay>
  W25qxx_WriteEnable();
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
 8003fdc:	2090      	movs	r0, #144	; 0x90
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2110      	movs	r1, #16
 8003fe2:	05c0      	lsls	r0, r0, #23
 8003fe4:	f000 fb62 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02); //page program
 8003fe8:	2302      	movs	r3, #2
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8003fea:	220f      	movs	r2, #15
 8003fec:	7023      	strb	r3, [r4, #0]
 8003fee:	465b      	mov	r3, fp
 8003ff0:	0021      	movs	r1, r4
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	0038      	movs	r0, r7
 8003ff6:	3b09      	subs	r3, #9
 8003ff8:	446a      	add	r2, sp
 8003ffa:	f001 f959 	bl	80052b0 <HAL_SPI_TransmitReceive>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8003ffe:	8969      	ldrh	r1, [r5, #10]
	if(w25qxx.ID>=W25Q256)
 8004000:	782b      	ldrb	r3, [r5, #0]
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8004002:	434e      	muls	r6, r1
 8004004:	444e      	add	r6, r9
	if(w25qxx.ID>=W25Q256)
 8004006:	2b08      	cmp	r3, #8
 8004008:	d840      	bhi.n	800408c <W25qxx_WritePage+0x138>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800400a:	0c33      	lsrs	r3, r6, #16
 800400c:	7023      	strb	r3, [r4, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 800400e:	230a      	movs	r3, #10
 8004010:	220f      	movs	r2, #15
 8004012:	4699      	mov	r9, r3
 8004014:	0021      	movs	r1, r4
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	446a      	add	r2, sp
 800401a:	0038      	movs	r0, r7
 800401c:	3b09      	subs	r3, #9
 800401e:	f001 f947 	bl	80052b0 <HAL_SPI_TransmitReceive>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004022:	0a33      	lsrs	r3, r6, #8
 8004024:	7023      	strb	r3, [r4, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004026:	220f      	movs	r2, #15
 8004028:	464b      	mov	r3, r9
 800402a:	0021      	movs	r1, r4
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	446a      	add	r2, sp
 8004030:	0038      	movs	r0, r7
 8004032:	3b09      	subs	r3, #9
 8004034:	f001 f93c 	bl	80052b0 <HAL_SPI_TransmitReceive>
 8004038:	464b      	mov	r3, r9
 800403a:	220f      	movs	r2, #15
 800403c:	0021      	movs	r1, r4
  W25qxx_Spi(Page_Address&0xFF);
 800403e:	7026      	strb	r6, [r4, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004040:	446a      	add	r2, sp
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	0038      	movs	r0, r7
 8004046:	3b09      	subs	r3, #9
 8004048:	f001 f932 	bl	80052b0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1,pBuffer,NumByteToWrite_up_to_PageSize,100);
 800404c:	4643      	mov	r3, r8
 800404e:	4651      	mov	r1, sl
 8004050:	b29a      	uxth	r2, r3
 8004052:	0038      	movs	r0, r7
 8004054:	2364      	movs	r3, #100	; 0x64
 8004056:	f001 f813 	bl	8005080 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
 800405a:	2090      	movs	r0, #144	; 0x90
 800405c:	2201      	movs	r2, #1
 800405e:	2110      	movs	r1, #16
 8004060:	05c0      	lsls	r0, r0, #23
 8004062:	f000 fb23 	bl	80046ac <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8004066:	f7ff fdf3 	bl	8003c50 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 800406a:	2001      	movs	r0, #1
 800406c:	f000 f912 	bl	8004294 <HAL_Delay>
	w25qxx.Lock=0;
 8004070:	2327      	movs	r3, #39	; 0x27
 8004072:	2200      	movs	r2, #0
 8004074:	54ea      	strb	r2, [r5, r3]
}
 8004076:	b005      	add	sp, #20
 8004078:	bcf0      	pop	{r4, r5, r6, r7}
 800407a:	46bb      	mov	fp, r7
 800407c:	46b2      	mov	sl, r6
 800407e:	46a9      	mov	r9, r5
 8004080:	46a0      	mov	r8, r4
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8004084:	464a      	mov	r2, r9
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	4698      	mov	r8, r3
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800408a:	e787      	b.n	8003f9c <W25qxx_WritePage+0x48>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800408c:	0e33      	lsrs	r3, r6, #24
 800408e:	7023      	strb	r3, [r4, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004090:	220f      	movs	r2, #15
 8004092:	465b      	mov	r3, fp
 8004094:	0021      	movs	r1, r4
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	0038      	movs	r0, r7
 800409a:	3b09      	subs	r3, #9
 800409c:	446a      	add	r2, sp
 800409e:	f001 f907 	bl	80052b0 <HAL_SPI_TransmitReceive>
	return ret;	
 80040a2:	e7b2      	b.n	800400a <W25qxx_WritePage+0xb6>
 80040a4:	200013a4 	.word	0x200013a4
 80040a8:	2000110c 	.word	0x2000110c

080040ac <W25qxx_ReadBytes>:
	w25qxx.Lock=0;
}
*/
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	464e      	mov	r6, r9
 80040b0:	4645      	mov	r5, r8
 80040b2:	46de      	mov	lr, fp
 80040b4:	4657      	mov	r7, sl
// uint8_t bb[4];


	while(w25qxx.Lock==1)
 80040b6:	2327      	movs	r3, #39	; 0x27
{
 80040b8:	b5e0      	push	{r5, r6, r7, lr}
	while(w25qxx.Lock==1)
 80040ba:	4c3b      	ldr	r4, [pc, #236]	; (80041a8 <W25qxx_ReadBytes+0xfc>)
{
 80040bc:	b087      	sub	sp, #28
 80040be:	9203      	str	r2, [sp, #12]
	while(w25qxx.Lock==1)
 80040c0:	5ce3      	ldrb	r3, [r4, r3]
{
 80040c2:	4681      	mov	r9, r0
 80040c4:	4688      	mov	r8, r1
	while(w25qxx.Lock==1)
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d106      	bne.n	80040d8 <W25qxx_ReadBytes+0x2c>
 80040ca:	2527      	movs	r5, #39	; 0x27
		W25qxx_Delay(1);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f000 f8e1 	bl	8004294 <HAL_Delay>
	while(w25qxx.Lock==1)
 80040d2:	5d63      	ldrb	r3, [r4, r5]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d0f9      	beq.n	80040cc <W25qxx_ReadBytes+0x20>
	w25qxx.Lock=1;

	//	HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_RESET);
	W25Q_CS_GPIO_Port->BRR=W25Q_CS_Pin;
 80040d8:	2190      	movs	r1, #144	; 0x90
 80040da:	05c9      	lsls	r1, r1, #23
 80040dc:	468a      	mov	sl, r1
 80040de:	2110      	movs	r1, #16
 80040e0:	468b      	mov	fp, r1
	w25qxx.Lock=1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	2227      	movs	r2, #39	; 0x27
	W25Q_CS_GPIO_Port->BRR=W25Q_CS_Pin;
 80040e6:	4651      	mov	r1, sl
 80040e8:	4658      	mov	r0, fp
	w25qxx.Lock=1;
 80040ea:	54a3      	strb	r3, [r4, r2]
	W25Q_CS_GPIO_Port->BRR=W25Q_CS_Pin;
 80040ec:	ab02      	add	r3, sp, #8
 80040ee:	469c      	mov	ip, r3
 80040f0:	6288      	str	r0, [r1, #40]	; 0x28

	W25qxx_Spi(0x0B);
 80040f2:	250e      	movs	r5, #14
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 80040f4:	210f      	movs	r1, #15
 80040f6:	270a      	movs	r7, #10
 80040f8:	230b      	movs	r3, #11
 80040fa:	4e2c      	ldr	r6, [pc, #176]	; (80041ac <W25qxx_ReadBytes+0x100>)
 80040fc:	4465      	add	r5, ip
 80040fe:	4461      	add	r1, ip
 8004100:	702b      	strb	r3, [r5, #0]
 8004102:	000a      	movs	r2, r1
 8004104:	0030      	movs	r0, r6
 8004106:	0029      	movs	r1, r5
 8004108:	9700      	str	r7, [sp, #0]
 800410a:	3b0a      	subs	r3, #10
 800410c:	f001 f8d0 	bl	80052b0 <HAL_SPI_TransmitReceive>
//	if(w25qxx.ID>=W25Q256)
//		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8004110:	4641      	mov	r1, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004112:	aa02      	add	r2, sp, #8
 8004114:	4694      	mov	ip, r2
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8004116:	0c0b      	lsrs	r3, r1, #16
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004118:	210f      	movs	r1, #15
 800411a:	4461      	add	r1, ip
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 800411c:	702b      	strb	r3, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 800411e:	000a      	movs	r2, r1
 8004120:	2301      	movs	r3, #1
 8004122:	0029      	movs	r1, r5
 8004124:	0030      	movs	r0, r6
 8004126:	9700      	str	r7, [sp, #0]
 8004128:	f001 f8c2 	bl	80052b0 <HAL_SPI_TransmitReceive>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 800412c:	4641      	mov	r1, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 800412e:	aa02      	add	r2, sp, #8
 8004130:	4694      	mov	ip, r2
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8004132:	0a0b      	lsrs	r3, r1, #8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004134:	210f      	movs	r1, #15
 8004136:	4461      	add	r1, ip
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8004138:	702b      	strb	r3, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 800413a:	000a      	movs	r2, r1
 800413c:	2301      	movs	r3, #1
 800413e:	0029      	movs	r1, r5
 8004140:	0030      	movs	r0, r6
 8004142:	9700      	str	r7, [sp, #0]
 8004144:	f001 f8b4 	bl	80052b0 <HAL_SPI_TransmitReceive>
  W25qxx_Spi(ReadAddr & 0xFF);
 8004148:	4641      	mov	r1, r8
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 800414a:	aa02      	add	r2, sp, #8
 800414c:	4694      	mov	ip, r2
  W25qxx_Spi(ReadAddr & 0xFF);
 800414e:	7029      	strb	r1, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004150:	210f      	movs	r1, #15
 8004152:	4461      	add	r1, ip
 8004154:	000a      	movs	r2, r1
 8004156:	2301      	movs	r3, #1
 8004158:	0029      	movs	r1, r5
 800415a:	0030      	movs	r0, r6
 800415c:	9700      	str	r7, [sp, #0]
 800415e:	f001 f8a7 	bl	80052b0 <HAL_SPI_TransmitReceive>
	W25qxx_Spi(0);
 8004162:	2100      	movs	r1, #0
	HAL_SPI_TransmitReceive(&hspi1,&Data,&ret,1,10);
 8004164:	aa02      	add	r2, sp, #8
 8004166:	4694      	mov	ip, r2
 8004168:	7029      	strb	r1, [r5, #0]
 800416a:	4688      	mov	r8, r1
 800416c:	310f      	adds	r1, #15
 800416e:	4461      	add	r1, ip
 8004170:	000a      	movs	r2, r1
 8004172:	2301      	movs	r3, #1
 8004174:	0029      	movs	r1, r5
 8004176:	0030      	movs	r0, r6
 8004178:	9700      	str	r7, [sp, #0]
 800417a:	f001 f899 	bl	80052b0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1,pBuffer, NumByteToRead, 10);
 800417e:	466b      	mov	r3, sp
 8004180:	4649      	mov	r1, r9
 8004182:	899a      	ldrh	r2, [r3, #12]
 8004184:	0030      	movs	r0, r6
 8004186:	230a      	movs	r3, #10
 8004188:	f001 fa1a 	bl	80055c0 <HAL_SPI_Receive>


//	HAL_GPIO_WritePin(W25Q_CS_GPIO_Port,W25Q_CS_Pin,GPIO_PIN_SET);
	W25Q_CS_GPIO_Port->BSRR=W25Q_CS_Pin;
 800418c:	4651      	mov	r1, sl
 800418e:	4658      	mov	r0, fp

//	W25qxx_Delay(1);
	w25qxx.Lock=0;
 8004190:	2327      	movs	r3, #39	; 0x27
 8004192:	4642      	mov	r2, r8
	W25Q_CS_GPIO_Port->BSRR=W25Q_CS_Pin;
 8004194:	6188      	str	r0, [r1, #24]
	w25qxx.Lock=0;
 8004196:	54e2      	strb	r2, [r4, r3]
}
 8004198:	b007      	add	sp, #28
 800419a:	bcf0      	pop	{r4, r5, r6, r7}
 800419c:	46bb      	mov	fp, r7
 800419e:	46b2      	mov	sl, r6
 80041a0:	46a9      	mov	r9, r5
 80041a2:	46a0      	mov	r8, r4
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200013a4 	.word	0x200013a4
 80041ac:	2000110c 	.word	0x2000110c

080041b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <LoopForever+0x6>)
  ldr r1, =_edata
 80041b6:	490e      	ldr	r1, [pc, #56]	; (80041f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041b8:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <LoopForever+0xe>)
  movs r3, #0
 80041ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041bc:	e002      	b.n	80041c4 <LoopCopyDataInit>

080041be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041c2:	3304      	adds	r3, #4

080041c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041c8:	d3f9      	bcc.n	80041be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ca:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041cc:	4c0b      	ldr	r4, [pc, #44]	; (80041fc <LoopForever+0x16>)
  movs r3, #0
 80041ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d0:	e001      	b.n	80041d6 <LoopFillZerobss>

080041d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041d4:	3204      	adds	r2, #4

080041d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041d8:	d3fb      	bcc.n	80041d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80041da:	f7ff fc91 	bl	8003b00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80041de:	f003 fec1 	bl	8007f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041e2:	f7ff f94f 	bl	8003484 <main>

080041e6 <LoopForever>:

LoopForever:
    b LoopForever
 80041e6:	e7fe      	b.n	80041e6 <LoopForever>
  ldr   r0, =_estack
 80041e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80041ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80041f4:	08008a00 	.word	0x08008a00
  ldr r2, =_sbss
 80041f8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80041fc:	20001834 	.word	0x20001834

08004200 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004200:	e7fe      	b.n	8004200 <ADC1_IRQHandler>
	...

08004204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004204:	b510      	push	{r4, lr}
 8004206:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004208:	20fa      	movs	r0, #250	; 0xfa
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_InitTick+0x40>)
 800420c:	0080      	lsls	r0, r0, #2
 800420e:	7819      	ldrb	r1, [r3, #0]
 8004210:	f7fb ff82 	bl	8000118 <__udivsi3>
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <HAL_InitTick+0x44>)
 8004216:	0001      	movs	r1, r0
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	f7fb ff7d 	bl	8000118 <__udivsi3>
 800421e:	f000 f889 	bl	8004334 <HAL_SYSTICK_Config>
 8004222:	2800      	cmp	r0, #0
 8004224:	d10c      	bne.n	8004240 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8004226:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004228:	2c03      	cmp	r4, #3
 800422a:	d900      	bls.n	800422e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800422c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800422e:	3802      	subs	r0, #2
 8004230:	2200      	movs	r2, #0
 8004232:	0021      	movs	r1, r4
 8004234:	f000 f840 	bl	80042b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_InitTick+0x48>)
 800423a:	2000      	movs	r0, #0
 800423c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800423e:	e7f5      	b.n	800422c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
 8004242:	e7f3      	b.n	800422c <HAL_InitTick+0x28>
 8004244:	20000008 	.word	0x20000008
 8004248:	20000004 	.word	0x20000004
 800424c:	2000000c 	.word	0x2000000c

08004250 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004250:	2110      	movs	r1, #16
 8004252:	4a06      	ldr	r2, [pc, #24]	; (800426c <HAL_Init+0x1c>)
{
 8004254:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004256:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004258:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800425a:	430b      	orrs	r3, r1
 800425c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800425e:	f7ff ffd1 	bl	8004204 <HAL_InitTick>
  HAL_MspInit();
 8004262:	f7ff fb4d 	bl	8003900 <HAL_MspInit>
}
 8004266:	2000      	movs	r0, #0
 8004268:	bd10      	pop	{r4, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	40022000 	.word	0x40022000

08004270 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004270:	4a03      	ldr	r2, [pc, #12]	; (8004280 <HAL_IncTick+0x10>)
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_IncTick+0x14>)
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	185b      	adds	r3, r3, r1
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	4770      	bx	lr
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	200013cc 	.word	0x200013cc
 8004284:	20000008 	.word	0x20000008

08004288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <HAL_GetTick+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
}
 800428c:	4770      	bx	lr
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	200013cc 	.word	0x200013cc

08004294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004298:	f7ff fff6 	bl	8004288 <HAL_GetTick>
 800429c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429e:	1c63      	adds	r3, r4, #1
 80042a0:	d002      	beq.n	80042a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_Delay+0x20>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80042a8:	f7ff ffee 	bl	8004288 <HAL_GetTick>
 80042ac:	1b40      	subs	r0, r0, r5
 80042ae:	42a0      	cmp	r0, r4
 80042b0:	d3fa      	bcc.n	80042a8 <HAL_Delay+0x14>
  {
  }
}
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	20000008 	.word	0x20000008

080042b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80042ba:	2800      	cmp	r0, #0
 80042bc:	db14      	blt.n	80042e8 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_NVIC_SetPriority+0x5c>)
 80042c0:	2203      	movs	r2, #3
 80042c2:	469c      	mov	ip, r3
 80042c4:	23ff      	movs	r3, #255	; 0xff
 80042c6:	0884      	lsrs	r4, r0, #2
 80042c8:	4010      	ands	r0, r2
 80042ca:	001a      	movs	r2, r3
 80042cc:	26c0      	movs	r6, #192	; 0xc0
 80042ce:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042d0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d2:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042d4:	400b      	ands	r3, r1
 80042d6:	4083      	lsls	r3, r0
 80042d8:	00a4      	lsls	r4, r4, #2
 80042da:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042dc:	00b6      	lsls	r6, r6, #2
 80042de:	59a5      	ldr	r5, [r4, r6]
 80042e0:	4395      	bics	r5, r2
 80042e2:	432b      	orrs	r3, r5
 80042e4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042e8:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <HAL_NVIC_SetPriority+0x60>)
 80042ea:	230f      	movs	r3, #15
 80042ec:	4694      	mov	ip, r2
 80042ee:	2203      	movs	r2, #3
 80042f0:	4003      	ands	r3, r0
 80042f2:	4010      	ands	r0, r2
 80042f4:	32fc      	adds	r2, #252	; 0xfc
 80042f6:	0015      	movs	r5, r2
 80042f8:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042fa:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042fc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042fe:	400a      	ands	r2, r1
 8004300:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004302:	3b08      	subs	r3, #8
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4463      	add	r3, ip
 800430a:	69dc      	ldr	r4, [r3, #28]
 800430c:	43ac      	bics	r4, r5
 800430e:	4322      	orrs	r2, r4
 8004310:	61da      	str	r2, [r3, #28]
 8004312:	e7e8      	b.n	80042e6 <HAL_NVIC_SetPriority+0x2e>
 8004314:	e000e100 	.word	0xe000e100
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800431c:	2800      	cmp	r0, #0
 800431e:	db05      	blt.n	800432c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004320:	231f      	movs	r3, #31
 8004322:	4018      	ands	r0, r3
 8004324:	3b1e      	subs	r3, #30
 8004326:	4083      	lsls	r3, r0
 8004328:	4a01      	ldr	r2, [pc, #4]	; (8004330 <HAL_NVIC_EnableIRQ+0x14>)
 800432a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800432c:	4770      	bx	lr
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	e000e100 	.word	0xe000e100

08004334 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004334:	2280      	movs	r2, #128	; 0x80
 8004336:	1e43      	subs	r3, r0, #1
 8004338:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800433a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800433c:	4293      	cmp	r3, r2
 800433e:	d20e      	bcs.n	800435e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004340:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004344:	4807      	ldr	r0, [pc, #28]	; (8004364 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004346:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004348:	6a03      	ldr	r3, [r0, #32]
 800434a:	0609      	lsls	r1, r1, #24
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	430b      	orrs	r3, r1
 8004352:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004354:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004356:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004358:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800435a:	3307      	adds	r3, #7
 800435c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800435e:	4770      	bx	lr
 8004360:	e000e010 	.word	0xe000e010
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800436c:	d027      	beq.n	80043be <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800436e:	2521      	movs	r5, #33	; 0x21
 8004370:	2302      	movs	r3, #2
 8004372:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004374:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8004378:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800437a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800437c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004382:	68e1      	ldr	r1, [r4, #12]
 8004384:	430b      	orrs	r3, r1
 8004386:	6921      	ldr	r1, [r4, #16]
 8004388:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438a:	6961      	ldr	r1, [r4, #20]
 800438c:	430b      	orrs	r3, r1
 800438e:	69a1      	ldr	r1, [r4, #24]
 8004390:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004392:	69e1      	ldr	r1, [r4, #28]
 8004394:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8004396:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004398:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_DMA_Init+0x60>)
 800439c:	2114      	movs	r1, #20
 800439e:	469c      	mov	ip, r3
 80043a0:	4460      	add	r0, ip
 80043a2:	f7fb feb9 	bl	8000118 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 80043a8:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 80043aa:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ac:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043ae:	0080      	lsls	r0, r0, #2
 80043b0:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80043b2:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b4:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80043b6:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80043b8:	321f      	adds	r2, #31
 80043ba:	54a3      	strb	r3, [r4, r2]
}  
 80043bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80043be:	2001      	movs	r0, #1
 80043c0:	e7fc      	b.n	80043bc <HAL_DMA_Init+0x54>
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	ffffc00f 	.word	0xffffc00f
 80043c8:	bffdfff8 	.word	0xbffdfff8
 80043cc:	40020000 	.word	0x40020000

080043d0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043d0:	2321      	movs	r3, #33	; 0x21
{  
 80043d2:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043d4:	5cc2      	ldrb	r2, [r0, r3]
 80043d6:	2a02      	cmp	r2, #2
 80043d8:	d003      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043da:	3b1d      	subs	r3, #29
 80043dc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80043de:	2001      	movs	r0, #1
}
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043e2:	240e      	movs	r4, #14
 80043e4:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043e6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043e8:	6811      	ldr	r1, [r2, #0]
 80043ea:	43a1      	bics	r1, r4
 80043ec:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043ee:	2101      	movs	r1, #1
 80043f0:	6814      	ldr	r4, [r2, #0]
 80043f2:	438c      	bics	r4, r1
 80043f4:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043f6:	000c      	movs	r4, r1
 80043f8:	40ac      	lsls	r4, r5
 80043fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80043fc:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80043fe:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8004400:	2200      	movs	r2, #0
 8004402:	2320      	movs	r3, #32
 8004404:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8004406:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 800440c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2000      	movs	r0, #0
 8004410:	e7e6      	b.n	80043e0 <HAL_DMA_Abort_IT+0x10>
 8004412:	2000      	movs	r0, #0
 8004414:	e7e4      	b.n	80043e0 <HAL_DMA_Abort_IT+0x10>
 8004416:	46c0      	nop			; (mov r8, r8)

08004418 <HAL_DMA_IRQHandler>:
{
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800441a:	2404      	movs	r4, #4
 800441c:	0026      	movs	r6, r4
 800441e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004420:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004422:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004424:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004426:	6801      	ldr	r1, [r0, #0]
 8004428:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800442a:	4232      	tst	r2, r6
 800442c:	d00d      	beq.n	800444a <HAL_DMA_IRQHandler+0x32>
 800442e:	423c      	tst	r4, r7
 8004430:	d00b      	beq.n	800444a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004432:	680b      	ldr	r3, [r1, #0]
 8004434:	069b      	lsls	r3, r3, #26
 8004436:	d402      	bmi.n	800443e <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004438:	680b      	ldr	r3, [r1, #0]
 800443a:	43a3      	bics	r3, r4
 800443c:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800443e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004440:	606e      	str	r6, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8004442:	2b00      	cmp	r3, #0
 8004444:	d000      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8004446:	4798      	blx	r3
}  
 8004448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800444a:	2402      	movs	r4, #2
 800444c:	0026      	movs	r6, r4
 800444e:	409e      	lsls	r6, r3
 8004450:	4232      	tst	r2, r6
 8004452:	d014      	beq.n	800447e <HAL_DMA_IRQHandler+0x66>
 8004454:	423c      	tst	r4, r7
 8004456:	d012      	beq.n	800447e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004458:	680b      	ldr	r3, [r1, #0]
 800445a:	069b      	lsls	r3, r3, #26
 800445c:	d406      	bmi.n	800446c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800445e:	220a      	movs	r2, #10
 8004460:	680b      	ldr	r3, [r1, #0]
 8004462:	4393      	bics	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8004466:	2321      	movs	r3, #33	; 0x21
 8004468:	3a09      	subs	r2, #9
 800446a:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 800446c:	2320      	movs	r3, #32
 800446e:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004470:	606e      	str	r6, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8004472:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8004474:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0e6      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 800447a:	4798      	blx	r3
 800447c:	e7e4      	b.n	8004448 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800447e:	2408      	movs	r4, #8
 8004480:	0026      	movs	r6, r4
 8004482:	409e      	lsls	r6, r3
 8004484:	4232      	tst	r2, r6
 8004486:	d0df      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30>
 8004488:	423c      	tst	r4, r7
 800448a:	d0dd      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800448c:	680a      	ldr	r2, [r1, #0]
 800448e:	3406      	adds	r4, #6
 8004490:	43a2      	bics	r2, r4
 8004492:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004494:	2201      	movs	r2, #1
 8004496:	0011      	movs	r1, r2
 8004498:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 800449a:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800449c:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800449e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80044a0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 80044a2:	2200      	movs	r2, #0
 80044a4:	3b01      	subs	r3, #1
 80044a6:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80044a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0cc      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80044ae:	4798      	blx	r3
 80044b0:	e7ca      	b.n	8004448 <HAL_DMA_IRQHandler+0x30>
 80044b2:	46c0      	nop			; (mov r8, r8)

080044b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80044b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b6:	4645      	mov	r5, r8
 80044b8:	46de      	mov	lr, fp
 80044ba:	4657      	mov	r7, sl
 80044bc:	464e      	mov	r6, r9
 80044be:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c0:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0x00u;
 80044c2:	2300      	movs	r3, #0
{ 
 80044c4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d100      	bne.n	80044cc <HAL_GPIO_Init+0x18>
 80044ca:	e081      	b.n	80045d0 <HAL_GPIO_Init+0x11c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044cc:	2201      	movs	r2, #1
 80044ce:	4692      	mov	sl, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d0:	4a6d      	ldr	r2, [pc, #436]	; (8004688 <HAL_GPIO_Init+0x1d4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d2:	46ab      	mov	fp, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d4:	4691      	mov	r9, r2
        temp = EXTI->IMR;
 80044d6:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d8:	4654      	mov	r4, sl
 80044da:	465a      	mov	r2, fp
 80044dc:	409c      	lsls	r4, r3
 80044de:	4022      	ands	r2, r4
 80044e0:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80044e2:	465a      	mov	r2, fp
 80044e4:	4222      	tst	r2, r4
 80044e6:	d06f      	beq.n	80045c8 <HAL_GPIO_Init+0x114>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e8:	4642      	mov	r2, r8
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	2510      	movs	r5, #16
 80044ee:	0011      	movs	r1, r2
 80044f0:	43a9      	bics	r1, r5
 80044f2:	9101      	str	r1, [sp, #4]
 80044f4:	2902      	cmp	r1, #2
 80044f6:	d100      	bne.n	80044fa <HAL_GPIO_Init+0x46>
 80044f8:	e071      	b.n	80045de <HAL_GPIO_Init+0x12a>
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044fa:	2603      	movs	r6, #3
 80044fc:	005d      	lsls	r5, r3, #1
 80044fe:	40ae      	lsls	r6, r5
 8004500:	46b4      	mov	ip, r6
 8004502:	4661      	mov	r1, ip
      temp = GPIOx->MODER;
 8004504:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004506:	43f6      	mvns	r6, r6
 8004508:	438f      	bics	r7, r1
 800450a:	0039      	movs	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800450c:	2703      	movs	r7, #3
 800450e:	4017      	ands	r7, r2
 8004510:	40af      	lsls	r7, r5
 8004512:	46bc      	mov	ip, r7
 8004514:	000f      	movs	r7, r1
 8004516:	4661      	mov	r1, ip
 8004518:	430f      	orrs	r7, r1
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800451a:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER = temp;
 800451c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800451e:	3901      	subs	r1, #1
 8004520:	2901      	cmp	r1, #1
 8004522:	d800      	bhi.n	8004526 <HAL_GPIO_Init+0x72>
 8004524:	e077      	b.n	8004616 <HAL_GPIO_Init+0x162>
      temp = GPIOx->PUPDR;
 8004526:	68c1      	ldr	r1, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004528:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800452a:	4641      	mov	r1, r8
 800452c:	6889      	ldr	r1, [r1, #8]
 800452e:	40a9      	lsls	r1, r5
 8004530:	430e      	orrs	r6, r1
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	0549      	lsls	r1, r1, #21
      GPIOx->PUPDR = temp;
 8004536:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004538:	420a      	tst	r2, r1
 800453a:	d045      	beq.n	80045c8 <HAL_GPIO_Init+0x114>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453c:	4649      	mov	r1, r9
 800453e:	4654      	mov	r4, sl
 8004540:	6989      	ldr	r1, [r1, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004542:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004544:	4321      	orrs	r1, r4
 8004546:	464c      	mov	r4, r9
 8004548:	61a1      	str	r1, [r4, #24]
 800454a:	69a1      	ldr	r1, [r4, #24]
 800454c:	4654      	mov	r4, sl
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800454e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004550:	4021      	ands	r1, r4
 8004552:	4c4e      	ldr	r4, [pc, #312]	; (800468c <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004554:	401d      	ands	r5, r3
 8004556:	46a4      	mov	ip, r4
 8004558:	00ad      	lsls	r5, r5, #2
 800455a:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455c:	9103      	str	r1, [sp, #12]
 800455e:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004560:	0899      	lsrs	r1, r3, #2
 8004562:	0089      	lsls	r1, r1, #2
 8004564:	4461      	add	r1, ip
 8004566:	688c      	ldr	r4, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004568:	43b4      	bics	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800456a:	2690      	movs	r6, #144	; 0x90
 800456c:	05f6      	lsls	r6, r6, #23
 800456e:	42b0      	cmp	r0, r6
 8004570:	d00e      	beq.n	8004590 <HAL_GPIO_Init+0xdc>
 8004572:	4e47      	ldr	r6, [pc, #284]	; (8004690 <HAL_GPIO_Init+0x1dc>)
 8004574:	42b0      	cmp	r0, r6
 8004576:	d100      	bne.n	800457a <HAL_GPIO_Init+0xc6>
 8004578:	e07d      	b.n	8004676 <HAL_GPIO_Init+0x1c2>
 800457a:	4e46      	ldr	r6, [pc, #280]	; (8004694 <HAL_GPIO_Init+0x1e0>)
 800457c:	42b0      	cmp	r0, r6
 800457e:	d100      	bne.n	8004582 <HAL_GPIO_Init+0xce>
 8004580:	e07d      	b.n	800467e <HAL_GPIO_Init+0x1ca>
 8004582:	4e45      	ldr	r6, [pc, #276]	; (8004698 <HAL_GPIO_Init+0x1e4>)
 8004584:	42b0      	cmp	r0, r6
 8004586:	d100      	bne.n	800458a <HAL_GPIO_Init+0xd6>
 8004588:	e071      	b.n	800466e <HAL_GPIO_Init+0x1ba>
 800458a:	2605      	movs	r6, #5
 800458c:	40ae      	lsls	r6, r5
 800458e:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004590:	608c      	str	r4, [r1, #8]
        temp = EXTI->IMR;
 8004592:	4942      	ldr	r1, [pc, #264]	; (800469c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8004594:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8004596:	6809      	ldr	r1, [r1, #0]
        temp &= ~(iocurrent);
 8004598:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800459a:	03d5      	lsls	r5, r2, #15
 800459c:	d44e      	bmi.n	800463c <HAL_GPIO_Init+0x188>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800459e:	4d3f      	ldr	r5, [pc, #252]	; (800469c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80045a0:	4021      	ands	r1, r4
        EXTI->IMR = temp;
 80045a2:	6029      	str	r1, [r5, #0]

        temp = EXTI->EMR;
 80045a4:	6869      	ldr	r1, [r5, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045a6:	0395      	lsls	r5, r2, #14
 80045a8:	d44f      	bmi.n	800464a <HAL_GPIO_Init+0x196>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80045aa:	4d3c      	ldr	r5, [pc, #240]	; (800469c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80045ac:	4021      	ands	r1, r4
        EXTI->EMR = temp;
 80045ae:	6069      	str	r1, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b0:	68a9      	ldr	r1, [r5, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b2:	02d5      	lsls	r5, r2, #11
 80045b4:	d450      	bmi.n	8004658 <HAL_GPIO_Init+0x1a4>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80045b6:	4d39      	ldr	r5, [pc, #228]	; (800469c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80045b8:	4021      	ands	r1, r4
        EXTI->RTSR = temp;
 80045ba:	60a9      	str	r1, [r5, #8]

        temp = EXTI->FTSR;
 80045bc:	68e9      	ldr	r1, [r5, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045be:	0292      	lsls	r2, r2, #10
 80045c0:	d451      	bmi.n	8004666 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 80045c2:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80045c4:	4a35      	ldr	r2, [pc, #212]	; (800469c <HAL_GPIO_Init+0x1e8>)
 80045c6:	60d1      	str	r1, [r2, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c8:	465a      	mov	r2, fp
      }
    }

    position++;
 80045ca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045cc:	40da      	lsrs	r2, r3
 80045ce:	d183      	bne.n	80044d8 <HAL_GPIO_Init+0x24>
  } 
}
 80045d0:	b005      	add	sp, #20
 80045d2:	bcf0      	pop	{r4, r5, r6, r7}
 80045d4:	46bb      	mov	fp, r7
 80045d6:	46b2      	mov	sl, r6
 80045d8:	46a9      	mov	r9, r5
 80045da:	46a0      	mov	r8, r4
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045de:	270f      	movs	r7, #15
 80045e0:	3d09      	subs	r5, #9
 80045e2:	401d      	ands	r5, r3
 80045e4:	00ad      	lsls	r5, r5, #2
 80045e6:	40af      	lsls	r7, r5
        temp = GPIOx->AFR[position >> 3u];
 80045e8:	08d9      	lsrs	r1, r3, #3
 80045ea:	0089      	lsls	r1, r1, #2
 80045ec:	1841      	adds	r1, r0, r1
 80045ee:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045f0:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045f2:	4647      	mov	r7, r8
 80045f4:	693f      	ldr	r7, [r7, #16]
 80045f6:	40af      	lsls	r7, r5
 80045f8:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 80045fa:	620e      	str	r6, [r1, #32]
      temp = GPIOx->MODER;
 80045fc:	6801      	ldr	r1, [r0, #0]
 80045fe:	005d      	lsls	r5, r3, #1
 8004600:	468c      	mov	ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004602:	2103      	movs	r1, #3
 8004604:	4667      	mov	r7, ip
 8004606:	40a9      	lsls	r1, r5
 8004608:	438f      	bics	r7, r1
 800460a:	43ce      	mvns	r6, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800460c:	2103      	movs	r1, #3
 800460e:	4011      	ands	r1, r2
 8004610:	40a9      	lsls	r1, r5
 8004612:	4339      	orrs	r1, r7
      GPIOx->MODER = temp;
 8004614:	6001      	str	r1, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8004616:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004618:	4031      	ands	r1, r6
 800461a:	468c      	mov	ip, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 800461c:	4641      	mov	r1, r8
 800461e:	68c9      	ldr	r1, [r1, #12]
 8004620:	4667      	mov	r7, ip
 8004622:	40a9      	lsls	r1, r5
 8004624:	4339      	orrs	r1, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004626:	4657      	mov	r7, sl
        GPIOx->OSPEEDR = temp;
 8004628:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 800462a:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800462c:	43a1      	bics	r1, r4
 800462e:	000c      	movs	r4, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004630:	0911      	lsrs	r1, r2, #4
 8004632:	4039      	ands	r1, r7
 8004634:	4099      	lsls	r1, r3
 8004636:	4321      	orrs	r1, r4
        GPIOx->OTYPER = temp;
 8004638:	6041      	str	r1, [r0, #4]
 800463a:	e774      	b.n	8004526 <HAL_GPIO_Init+0x72>
          temp |= iocurrent;
 800463c:	9d00      	ldr	r5, [sp, #0]
 800463e:	4329      	orrs	r1, r5
        EXTI->IMR = temp;
 8004640:	4d16      	ldr	r5, [pc, #88]	; (800469c <HAL_GPIO_Init+0x1e8>)
 8004642:	6029      	str	r1, [r5, #0]
        temp = EXTI->EMR;
 8004644:	6869      	ldr	r1, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004646:	0395      	lsls	r5, r2, #14
 8004648:	d5af      	bpl.n	80045aa <HAL_GPIO_Init+0xf6>
          temp |= iocurrent;
 800464a:	9d00      	ldr	r5, [sp, #0]
 800464c:	4329      	orrs	r1, r5
        EXTI->EMR = temp;
 800464e:	4d13      	ldr	r5, [pc, #76]	; (800469c <HAL_GPIO_Init+0x1e8>)
 8004650:	6069      	str	r1, [r5, #4]
        temp = EXTI->RTSR;
 8004652:	68a9      	ldr	r1, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004654:	02d5      	lsls	r5, r2, #11
 8004656:	d5ae      	bpl.n	80045b6 <HAL_GPIO_Init+0x102>
          temp |= iocurrent;
 8004658:	9d00      	ldr	r5, [sp, #0]
 800465a:	4329      	orrs	r1, r5
        EXTI->RTSR = temp;
 800465c:	4d0f      	ldr	r5, [pc, #60]	; (800469c <HAL_GPIO_Init+0x1e8>)
 800465e:	60a9      	str	r1, [r5, #8]
        temp = EXTI->FTSR;
 8004660:	68e9      	ldr	r1, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004662:	0292      	lsls	r2, r2, #10
 8004664:	d5ad      	bpl.n	80045c2 <HAL_GPIO_Init+0x10e>
          temp |= iocurrent;
 8004666:	9a00      	ldr	r2, [sp, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	0011      	movs	r1, r2
 800466c:	e7aa      	b.n	80045c4 <HAL_GPIO_Init+0x110>
 800466e:	2603      	movs	r6, #3
 8004670:	40ae      	lsls	r6, r5
 8004672:	4334      	orrs	r4, r6
 8004674:	e78c      	b.n	8004590 <HAL_GPIO_Init+0xdc>
 8004676:	4656      	mov	r6, sl
 8004678:	40ae      	lsls	r6, r5
 800467a:	4334      	orrs	r4, r6
 800467c:	e788      	b.n	8004590 <HAL_GPIO_Init+0xdc>
 800467e:	2602      	movs	r6, #2
 8004680:	40ae      	lsls	r6, r5
 8004682:	4334      	orrs	r4, r6
 8004684:	e784      	b.n	8004590 <HAL_GPIO_Init+0xdc>
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	40021000 	.word	0x40021000
 800468c:	40010000 	.word	0x40010000
 8004690:	48000400 	.word	0x48000400
 8004694:	48000800 	.word	0x48000800
 8004698:	48000c00 	.word	0x48000c00
 800469c:	40010400 	.word	0x40010400

080046a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046a0:	6900      	ldr	r0, [r0, #16]
 80046a2:	4008      	ands	r0, r1
 80046a4:	1e41      	subs	r1, r0, #1
 80046a6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80046a8:	b2c0      	uxtb	r0, r0
  }
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046b2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046b4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80046b6:	e7fc      	b.n	80046b2 <HAL_GPIO_WritePin+0x6>

080046b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80046ba:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	4210      	tst	r0, r2
 80046c0:	d100      	bne.n	80046c4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80046c2:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c4:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c6:	f7ff f913 	bl	80038f0 <HAL_GPIO_EXTI_Callback>
}
 80046ca:	e7fa      	b.n	80046c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80046cc:	40010400 	.word	0x40010400

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d2:	46ce      	mov	lr, r9
 80046d4:	4647      	mov	r7, r8
 80046d6:	b580      	push	{r7, lr}
 80046d8:	0004      	movs	r4, r0
 80046da:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046dc:	2800      	cmp	r0, #0
 80046de:	d100      	bne.n	80046e2 <HAL_RCC_OscConfig+0x12>
 80046e0:	e0ee      	b.n	80048c0 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	6803      	ldr	r3, [r0, #0]
 80046e4:	07da      	lsls	r2, r3, #31
 80046e6:	d535      	bpl.n	8004754 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046e8:	210c      	movs	r1, #12
 80046ea:	48c3      	ldr	r0, [pc, #780]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 80046ec:	6842      	ldr	r2, [r0, #4]
 80046ee:	400a      	ands	r2, r1
 80046f0:	2a04      	cmp	r2, #4
 80046f2:	d100      	bne.n	80046f6 <HAL_RCC_OscConfig+0x26>
 80046f4:	e101      	b.n	80048fa <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046f6:	6842      	ldr	r2, [r0, #4]
 80046f8:	4011      	ands	r1, r2
 80046fa:	2908      	cmp	r1, #8
 80046fc:	d100      	bne.n	8004700 <HAL_RCC_OscConfig+0x30>
 80046fe:	e0f8      	b.n	80048f2 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004700:	6863      	ldr	r3, [r4, #4]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d00f      	beq.n	8004726 <HAL_RCC_OscConfig+0x56>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d100      	bne.n	800470c <HAL_RCC_OscConfig+0x3c>
 800470a:	e11e      	b.n	800494a <HAL_RCC_OscConfig+0x27a>
 800470c:	2b05      	cmp	r3, #5
 800470e:	d100      	bne.n	8004712 <HAL_RCC_OscConfig+0x42>
 8004710:	e1a7      	b.n	8004a62 <HAL_RCC_OscConfig+0x392>
 8004712:	4bb9      	ldr	r3, [pc, #740]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 8004714:	49b9      	ldr	r1, [pc, #740]	; (80049fc <HAL_RCC_OscConfig+0x32c>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	400a      	ands	r2, r1
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	49b8      	ldr	r1, [pc, #736]	; (8004a00 <HAL_RCC_OscConfig+0x330>)
 8004720:	400a      	ands	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e005      	b.n	8004732 <HAL_RCC_OscConfig+0x62>
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	4ab3      	ldr	r2, [pc, #716]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	6811      	ldr	r1, [r2, #0]
 800472e:	430b      	orrs	r3, r1
 8004730:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7ff fda9 	bl	8004288 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004738:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4faf      	ldr	r7, [pc, #700]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 800473c:	02b6      	lsls	r6, r6, #10
 800473e:	e005      	b.n	800474c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004740:	f7ff fda2 	bl	8004288 <HAL_GetTick>
 8004744:	1b40      	subs	r0, r0, r5
 8004746:	2864      	cmp	r0, #100	; 0x64
 8004748:	d900      	bls.n	800474c <HAL_RCC_OscConfig+0x7c>
 800474a:	e0fc      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4233      	tst	r3, r6
 8004750:	d0f6      	beq.n	8004740 <HAL_RCC_OscConfig+0x70>
 8004752:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004754:	079a      	lsls	r2, r3, #30
 8004756:	d529      	bpl.n	80047ac <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004758:	220c      	movs	r2, #12
 800475a:	49a7      	ldr	r1, [pc, #668]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 800475c:	6848      	ldr	r0, [r1, #4]
 800475e:	4202      	tst	r2, r0
 8004760:	d100      	bne.n	8004764 <HAL_RCC_OscConfig+0x94>
 8004762:	e0a6      	b.n	80048b2 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004764:	6848      	ldr	r0, [r1, #4]
 8004766:	4002      	ands	r2, r0
 8004768:	2a08      	cmp	r2, #8
 800476a:	d100      	bne.n	800476e <HAL_RCC_OscConfig+0x9e>
 800476c:	e09d      	b.n	80048aa <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800476e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004770:	4da1      	ldr	r5, [pc, #644]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004772:	2b00      	cmp	r3, #0
 8004774:	d100      	bne.n	8004778 <HAL_RCC_OscConfig+0xa8>
 8004776:	e11f      	b.n	80049b8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8004778:	2201      	movs	r2, #1
 800477a:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800477e:	4313      	orrs	r3, r2
 8004780:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004782:	f7ff fd81 	bl	8004288 <HAL_GetTick>
 8004786:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	e005      	b.n	8004796 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478a:	f7ff fd7d 	bl	8004288 <HAL_GetTick>
 800478e:	1b80      	subs	r0, r0, r6
 8004790:	2802      	cmp	r0, #2
 8004792:	d900      	bls.n	8004796 <HAL_RCC_OscConfig+0xc6>
 8004794:	e0d7      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	421f      	tst	r7, r3
 800479a:	d0f6      	beq.n	800478a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	21f8      	movs	r1, #248	; 0xf8
 800479e:	682a      	ldr	r2, [r5, #0]
 80047a0:	6923      	ldr	r3, [r4, #16]
 80047a2:	438a      	bics	r2, r1
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ac:	071a      	lsls	r2, r3, #28
 80047ae:	d42d      	bmi.n	800480c <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	075a      	lsls	r2, r3, #29
 80047b2:	d544      	bpl.n	800483e <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b8:	4b8f      	ldr	r3, [pc, #572]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 80047ba:	0552      	lsls	r2, r2, #21
 80047bc:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80047be:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c0:	4211      	tst	r1, r2
 80047c2:	d108      	bne.n	80047d6 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	69d9      	ldr	r1, [r3, #28]
 80047c6:	4311      	orrs	r1, r2
 80047c8:	61d9      	str	r1, [r3, #28]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	401a      	ands	r2, r3
 80047ce:	9201      	str	r2, [sp, #4]
 80047d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d6:	2780      	movs	r7, #128	; 0x80
 80047d8:	4e8a      	ldr	r6, [pc, #552]	; (8004a04 <HAL_RCC_OscConfig+0x334>)
 80047da:	007f      	lsls	r7, r7, #1
 80047dc:	6833      	ldr	r3, [r6, #0]
 80047de:	423b      	tst	r3, r7
 80047e0:	d100      	bne.n	80047e4 <HAL_RCC_OscConfig+0x114>
 80047e2:	e094      	b.n	800490e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e4:	68a3      	ldr	r3, [r4, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d100      	bne.n	80047ec <HAL_RCC_OscConfig+0x11c>
 80047ea:	e0f8      	b.n	80049de <HAL_RCC_OscConfig+0x30e>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d100      	bne.n	80047f2 <HAL_RCC_OscConfig+0x122>
 80047f0:	e0c4      	b.n	800497c <HAL_RCC_OscConfig+0x2ac>
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d100      	bne.n	80047f8 <HAL_RCC_OscConfig+0x128>
 80047f6:	e140      	b.n	8004a7a <HAL_RCC_OscConfig+0x3aa>
 80047f8:	2101      	movs	r1, #1
 80047fa:	4b7f      	ldr	r3, [pc, #508]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	438a      	bics	r2, r1
 8004800:	621a      	str	r2, [r3, #32]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	3103      	adds	r1, #3
 8004806:	438a      	bics	r2, r1
 8004808:	621a      	str	r2, [r3, #32]
 800480a:	e0ec      	b.n	80049e6 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800480c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800480e:	4d7a      	ldr	r5, [pc, #488]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05b      	beq.n	80048cc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8004814:	2201      	movs	r2, #1
 8004816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004818:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800481a:	4313      	orrs	r3, r2
 800481c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800481e:	f7ff fd33 	bl	8004288 <HAL_GetTick>
 8004822:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004824:	e005      	b.n	8004832 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7ff fd2f 	bl	8004288 <HAL_GetTick>
 800482a:	1b80      	subs	r0, r0, r6
 800482c:	2802      	cmp	r0, #2
 800482e:	d900      	bls.n	8004832 <HAL_RCC_OscConfig+0x162>
 8004830:	e089      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004834:	421f      	tst	r7, r3
 8004836:	d0f6      	beq.n	8004826 <HAL_RCC_OscConfig+0x156>
 8004838:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483a:	075a      	lsls	r2, r3, #29
 800483c:	d4ba      	bmi.n	80047b4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800483e:	06db      	lsls	r3, r3, #27
 8004840:	d512      	bpl.n	8004868 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004842:	6963      	ldr	r3, [r4, #20]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d100      	bne.n	800484a <HAL_RCC_OscConfig+0x17a>
 8004848:	e13d      	b.n	8004ac6 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800484a:	3305      	adds	r3, #5
 800484c:	d000      	beq.n	8004850 <HAL_RCC_OscConfig+0x180>
 800484e:	e0e9      	b.n	8004a24 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004850:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004852:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8004854:	4a68      	ldr	r2, [pc, #416]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 8004856:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004858:	438b      	bics	r3, r1
 800485a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800485c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800485e:	69a3      	ldr	r3, [r4, #24]
 8004860:	4381      	bics	r1, r0
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	430b      	orrs	r3, r1
 8004866:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	6a23      	ldr	r3, [r4, #32]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01b      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800486e:	220c      	movs	r2, #12
 8004870:	4e61      	ldr	r6, [pc, #388]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 8004872:	6871      	ldr	r1, [r6, #4]
 8004874:	400a      	ands	r2, r1
 8004876:	2a08      	cmp	r2, #8
 8004878:	d100      	bne.n	800487c <HAL_RCC_OscConfig+0x1ac>
 800487a:	e108      	b.n	8004a8e <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487c:	2b02      	cmp	r3, #2
 800487e:	d100      	bne.n	8004882 <HAL_RCC_OscConfig+0x1b2>
 8004880:	e13f      	b.n	8004b02 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	4a60      	ldr	r2, [pc, #384]	; (8004a08 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004886:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004888:	4013      	ands	r3, r2
 800488a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800488c:	f7ff fcfc 	bl	8004288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004890:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 8004892:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004894:	e004      	b.n	80048a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004896:	f7ff fcf7 	bl	8004288 <HAL_GetTick>
 800489a:	1b00      	subs	r0, r0, r4
 800489c:	2802      	cmp	r0, #2
 800489e:	d852      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	422b      	tst	r3, r5
 80048a4:	d1f7      	bne.n	8004896 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 80048a6:	2000      	movs	r0, #0
 80048a8:	e00b      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048aa:	684a      	ldr	r2, [r1, #4]
 80048ac:	03d2      	lsls	r2, r2, #15
 80048ae:	d500      	bpl.n	80048b2 <HAL_RCC_OscConfig+0x1e2>
 80048b0:	e75d      	b.n	800476e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	4a51      	ldr	r2, [pc, #324]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	0792      	lsls	r2, r2, #30
 80048b8:	d539      	bpl.n	800492e <HAL_RCC_OscConfig+0x25e>
 80048ba:	68e2      	ldr	r2, [r4, #12]
 80048bc:	2a01      	cmp	r2, #1
 80048be:	d036      	beq.n	800492e <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80048c0:	2001      	movs	r0, #1
}
 80048c2:	b003      	add	sp, #12
 80048c4:	bcc0      	pop	{r6, r7}
 80048c6:	46b9      	mov	r9, r7
 80048c8:	46b0      	mov	r8, r6
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80048cc:	2201      	movs	r2, #1
 80048ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80048d2:	4393      	bics	r3, r2
 80048d4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80048d6:	f7ff fcd7 	bl	8004288 <HAL_GetTick>
 80048da:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048dc:	e004      	b.n	80048e8 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048de:	f7ff fcd3 	bl	8004288 <HAL_GetTick>
 80048e2:	1b80      	subs	r0, r0, r6
 80048e4:	2802      	cmp	r0, #2
 80048e6:	d82e      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048ea:	421f      	tst	r7, r3
 80048ec:	d1f7      	bne.n	80048de <HAL_RCC_OscConfig+0x20e>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	e7a3      	b.n	800483a <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048f2:	6842      	ldr	r2, [r0, #4]
 80048f4:	03d2      	lsls	r2, r2, #15
 80048f6:	d400      	bmi.n	80048fa <HAL_RCC_OscConfig+0x22a>
 80048f8:	e702      	b.n	8004700 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fa:	4a3f      	ldr	r2, [pc, #252]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	0392      	lsls	r2, r2, #14
 8004900:	d400      	bmi.n	8004904 <HAL_RCC_OscConfig+0x234>
 8004902:	e727      	b.n	8004754 <HAL_RCC_OscConfig+0x84>
 8004904:	6862      	ldr	r2, [r4, #4]
 8004906:	2a00      	cmp	r2, #0
 8004908:	d000      	beq.n	800490c <HAL_RCC_OscConfig+0x23c>
 800490a:	e723      	b.n	8004754 <HAL_RCC_OscConfig+0x84>
 800490c:	e7d8      	b.n	80048c0 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	6833      	ldr	r3, [r6, #0]
 8004910:	433b      	orrs	r3, r7
 8004912:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004914:	f7ff fcb8 	bl	8004288 <HAL_GetTick>
 8004918:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	e004      	b.n	8004926 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491c:	f7ff fcb4 	bl	8004288 <HAL_GetTick>
 8004920:	1b40      	subs	r0, r0, r5
 8004922:	2864      	cmp	r0, #100	; 0x64
 8004924:	d80f      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	6833      	ldr	r3, [r6, #0]
 8004928:	423b      	tst	r3, r7
 800492a:	d0f7      	beq.n	800491c <HAL_RCC_OscConfig+0x24c>
 800492c:	e75a      	b.n	80047e4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492e:	25f8      	movs	r5, #248	; 0xf8
 8004930:	4831      	ldr	r0, [pc, #196]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 8004932:	6922      	ldr	r2, [r4, #16]
 8004934:	6801      	ldr	r1, [r0, #0]
 8004936:	00d2      	lsls	r2, r2, #3
 8004938:	43a9      	bics	r1, r5
 800493a:	430a      	orrs	r2, r1
 800493c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	071a      	lsls	r2, r3, #28
 8004940:	d400      	bmi.n	8004944 <HAL_RCC_OscConfig+0x274>
 8004942:	e735      	b.n	80047b0 <HAL_RCC_OscConfig+0xe0>
 8004944:	e762      	b.n	800480c <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8004946:	2003      	movs	r0, #3
 8004948:	e7bb      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800494a:	4d2b      	ldr	r5, [pc, #172]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 800494c:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <HAL_RCC_OscConfig+0x32c>)
 800494e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004950:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004952:	4013      	ands	r3, r2
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495c:	4013      	ands	r3, r2
 800495e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004960:	f7ff fc92 	bl	8004288 <HAL_GetTick>
 8004964:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	e004      	b.n	8004972 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004968:	f7ff fc8e 	bl	8004288 <HAL_GetTick>
 800496c:	1b80      	subs	r0, r0, r6
 800496e:	2864      	cmp	r0, #100	; 0x64
 8004970:	d8e9      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	423b      	tst	r3, r7
 8004976:	d1f7      	bne.n	8004968 <HAL_RCC_OscConfig+0x298>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	e6eb      	b.n	8004754 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497c:	2201      	movs	r2, #1
 800497e:	4e1e      	ldr	r6, [pc, #120]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	4d22      	ldr	r5, [pc, #136]	; (8004a0c <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	6a33      	ldr	r3, [r6, #32]
 8004984:	4393      	bics	r3, r2
 8004986:	6233      	str	r3, [r6, #32]
 8004988:	6a33      	ldr	r3, [r6, #32]
 800498a:	3203      	adds	r2, #3
 800498c:	4393      	bics	r3, r2
 800498e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8004990:	f7ff fc7a 	bl	8004288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8004996:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	4698      	mov	r8, r3
 800499a:	e004      	b.n	80049a6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7ff fc74 	bl	8004288 <HAL_GetTick>
 80049a0:	1bc0      	subs	r0, r0, r7
 80049a2:	42a8      	cmp	r0, r5
 80049a4:	d8cf      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a6:	4642      	mov	r2, r8
 80049a8:	6a33      	ldr	r3, [r6, #32]
 80049aa:	421a      	tst	r2, r3
 80049ac:	d1f6      	bne.n	800499c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80049ae:	464b      	mov	r3, r9
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d04f      	beq.n	8004a54 <HAL_RCC_OscConfig+0x384>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	e742      	b.n	800483e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80049b8:	2201      	movs	r2, #1
 80049ba:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049bc:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80049be:	4393      	bics	r3, r2
 80049c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049c2:	f7ff fc61 	bl	8004288 <HAL_GetTick>
 80049c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c8:	e004      	b.n	80049d4 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ca:	f7ff fc5d 	bl	8004288 <HAL_GetTick>
 80049ce:	1b80      	subs	r0, r0, r6
 80049d0:	2802      	cmp	r0, #2
 80049d2:	d8b8      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	421f      	tst	r7, r3
 80049d8:	d1f7      	bne.n	80049ca <HAL_RCC_OscConfig+0x2fa>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	e6e6      	b.n	80047ac <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049de:	4906      	ldr	r1, [pc, #24]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
 80049e0:	6a0a      	ldr	r2, [r1, #32]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80049e6:	f7ff fc4f 	bl	8004288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80049ec:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	4698      	mov	r8, r3
 80049f0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f4:	e011      	b.n	8004a1a <HAL_RCC_OscConfig+0x34a>
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	40021000 	.word	0x40021000
 80049fc:	fffeffff 	.word	0xfffeffff
 8004a00:	fffbffff 	.word	0xfffbffff
 8004a04:	40007000 	.word	0x40007000
 8004a08:	feffffff 	.word	0xfeffffff
 8004a0c:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7ff fc3a 	bl	8004288 <HAL_GetTick>
 8004a14:	1b80      	subs	r0, r0, r6
 8004a16:	42a8      	cmp	r0, r5
 8004a18:	d895      	bhi.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	4643      	mov	r3, r8
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	421f      	tst	r7, r3
 8004a20:	d0f6      	beq.n	8004a10 <HAL_RCC_OscConfig+0x340>
 8004a22:	e7c4      	b.n	80049ae <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a24:	2204      	movs	r2, #4
 8004a26:	4d53      	ldr	r5, [pc, #332]	; (8004b74 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a28:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004a32:	3a03      	subs	r2, #3
 8004a34:	4393      	bics	r3, r2
 8004a36:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004a38:	f7ff fc26 	bl	8004288 <HAL_GetTick>
 8004a3c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a3e:	e005      	b.n	8004a4c <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a40:	f7ff fc22 	bl	8004288 <HAL_GetTick>
 8004a44:	1b80      	subs	r0, r0, r6
 8004a46:	2802      	cmp	r0, #2
 8004a48:	d900      	bls.n	8004a4c <HAL_RCC_OscConfig+0x37c>
 8004a4a:	e77c      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004a4e:	421f      	tst	r7, r3
 8004a50:	d1f6      	bne.n	8004a40 <HAL_RCC_OscConfig+0x370>
 8004a52:	e709      	b.n	8004868 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <HAL_RCC_OscConfig+0x4a4>)
 8004a56:	4948      	ldr	r1, [pc, #288]	; (8004b78 <HAL_RCC_OscConfig+0x4a8>)
 8004a58:	69d3      	ldr	r3, [r2, #28]
 8004a5a:	400b      	ands	r3, r1
 8004a5c:	61d3      	str	r3, [r2, #28]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	e6ed      	b.n	800483e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <HAL_RCC_OscConfig+0x4a4>)
 8004a66:	02d2      	lsls	r2, r2, #11
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	0252      	lsls	r2, r2, #9
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e65b      	b.n	8004732 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_RCC_OscConfig+0x4a4>)
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	621a      	str	r2, [r3, #32]
 8004a84:	6a1a      	ldr	r2, [r3, #32]
 8004a86:	3903      	subs	r1, #3
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	621a      	str	r2, [r3, #32]
 8004a8c:	e7ab      	b.n	80049e6 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d100      	bne.n	8004a94 <HAL_RCC_OscConfig+0x3c4>
 8004a92:	e715      	b.n	80048c0 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a94:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8004a96:	6872      	ldr	r2, [r6, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a9a:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8004a9e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	42ab      	cmp	r3, r5
 8004aa4:	d000      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x3d8>
 8004aa6:	e70c      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aa8:	230f      	movs	r3, #15
 8004aaa:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004aae:	428b      	cmp	r3, r1
 8004ab0:	d000      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3e4>
 8004ab2:	e706      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ab4:	20f0      	movs	r0, #240	; 0xf0
 8004ab6:	0380      	lsls	r0, r0, #14
 8004ab8:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004abc:	1a10      	subs	r0, r2, r0
 8004abe:	1e42      	subs	r2, r0, #1
 8004ac0:	4190      	sbcs	r0, r2
  return HAL_OK;
 8004ac2:	b2c0      	uxtb	r0, r0
 8004ac4:	e6fd      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	4e2a      	ldr	r6, [pc, #168]	; (8004b74 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004aca:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004acc:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	6372      	str	r2, [r6, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004ad2:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	6373      	str	r3, [r6, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004ad8:	f7ff fbd6 	bl	8004288 <HAL_GetTick>
 8004adc:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ade:	e005      	b.n	8004aec <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ae0:	f7ff fbd2 	bl	8004288 <HAL_GetTick>
 8004ae4:	1b40      	subs	r0, r0, r5
 8004ae6:	2802      	cmp	r0, #2
 8004ae8:	d900      	bls.n	8004aec <HAL_RCC_OscConfig+0x41c>
 8004aea:	e72c      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004aec:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004aee:	421f      	tst	r7, r3
 8004af0:	d0f6      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004af2:	21f8      	movs	r1, #248	; 0xf8
 8004af4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8004af6:	69a3      	ldr	r3, [r4, #24]
 8004af8:	438a      	bics	r2, r1
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4313      	orrs	r3, r2
 8004afe:	6373      	str	r3, [r6, #52]	; 0x34
 8004b00:	e6b2      	b.n	8004868 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8004b02:	6833      	ldr	r3, [r6, #0]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b06:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4013      	ands	r3, r2
 8004b0a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004b0c:	f7ff fbbc 	bl	8004288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b10:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004b12:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b14:	e005      	b.n	8004b22 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b16:	f7ff fbb7 	bl	8004288 <HAL_GetTick>
 8004b1a:	1b40      	subs	r0, r0, r5
 8004b1c:	2802      	cmp	r0, #2
 8004b1e:	d900      	bls.n	8004b22 <HAL_RCC_OscConfig+0x452>
 8004b20:	e711      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b22:	6833      	ldr	r3, [r6, #0]
 8004b24:	423b      	tst	r3, r7
 8004b26:	d1f6      	bne.n	8004b16 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b28:	220f      	movs	r2, #15
 8004b2a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b2c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2e:	4393      	bics	r3, r2
 8004b30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b32:	04ad      	lsls	r5, r5, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b34:	4313      	orrs	r3, r2
 8004b36:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004b38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b3c:	6872      	ldr	r2, [r6, #4]
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	490f      	ldr	r1, [pc, #60]	; (8004b80 <HAL_RCC_OscConfig+0x4b0>)
 8004b42:	400a      	ands	r2, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	6832      	ldr	r2, [r6, #0]
 8004b4c:	045b      	lsls	r3, r3, #17
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004b52:	f7ff fb99 	bl	8004288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b56:	4e07      	ldr	r6, [pc, #28]	; (8004b74 <HAL_RCC_OscConfig+0x4a4>)
        tickstart = HAL_GetTick();
 8004b58:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b5a:	e005      	b.n	8004b68 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7ff fb94 	bl	8004288 <HAL_GetTick>
 8004b60:	1b00      	subs	r0, r0, r4
 8004b62:	2802      	cmp	r0, #2
 8004b64:	d900      	bls.n	8004b68 <HAL_RCC_OscConfig+0x498>
 8004b66:	e6ee      	b.n	8004946 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	422b      	tst	r3, r5
 8004b6c:	d0f6      	beq.n	8004b5c <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e6a7      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f2>
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	40021000 	.word	0x40021000
 8004b78:	efffffff 	.word	0xefffffff
 8004b7c:	feffffff 	.word	0xfeffffff
 8004b80:	ffc2ffff 	.word	0xffc2ffff

08004b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	46ce      	mov	lr, r9
 8004b88:	4647      	mov	r7, r8
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	0004      	movs	r4, r0
 8004b8e:	000d      	movs	r5, r1
 8004b90:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d00d      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b96:	2301      	movs	r3, #1
 8004b98:	4950      	ldr	r1, [pc, #320]	; (8004cdc <HAL_RCC_ClockConfig+0x158>)
 8004b9a:	680a      	ldr	r2, [r1, #0]
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	42aa      	cmp	r2, r5
 8004ba0:	d20d      	bcs.n	8004bbe <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	680a      	ldr	r2, [r1, #0]
 8004ba4:	439a      	bics	r2, r3
 8004ba6:	432a      	orrs	r2, r5
 8004ba8:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	680a      	ldr	r2, [r1, #0]
 8004bac:	4013      	ands	r3, r2
 8004bae:	42ab      	cmp	r3, r5
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8004bb2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8004bb4:	b009      	add	sp, #36	; 0x24
 8004bb6:	bcc0      	pop	{r6, r7}
 8004bb8:	46b9      	mov	r9, r7
 8004bba:	46b0      	mov	r8, r6
 8004bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	079a      	lsls	r2, r3, #30
 8004bc2:	d50e      	bpl.n	8004be2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	075a      	lsls	r2, r3, #29
 8004bc6:	d505      	bpl.n	8004bd4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004bc8:	22e0      	movs	r2, #224	; 0xe0
 8004bca:	4945      	ldr	r1, [pc, #276]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
 8004bcc:	00d2      	lsls	r2, r2, #3
 8004bce:	6848      	ldr	r0, [r1, #4]
 8004bd0:	4302      	orrs	r2, r0
 8004bd2:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	20f0      	movs	r0, #240	; 0xf0
 8004bd6:	4942      	ldr	r1, [pc, #264]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
 8004bd8:	684a      	ldr	r2, [r1, #4]
 8004bda:	4382      	bics	r2, r0
 8004bdc:	68a0      	ldr	r0, [r4, #8]
 8004bde:	4302      	orrs	r2, r0
 8004be0:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be2:	07db      	lsls	r3, r3, #31
 8004be4:	d522      	bpl.n	8004c2c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be8:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bec:	2a01      	cmp	r2, #1
 8004bee:	d067      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf0:	2a02      	cmp	r2, #2
 8004bf2:	d062      	beq.n	8004cba <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	079b      	lsls	r3, r3, #30
 8004bf6:	d5dc      	bpl.n	8004bb2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf8:	2103      	movs	r1, #3
 8004bfa:	4e39      	ldr	r6, [pc, #228]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
 8004bfc:	6873      	ldr	r3, [r6, #4]
 8004bfe:	438b      	bics	r3, r1
 8004c00:	4313      	orrs	r3, r2
 8004c02:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004c04:	f7ff fb40 	bl	8004288 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c08:	230c      	movs	r3, #12
 8004c0a:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 8004c0e:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c10:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e004      	b.n	8004c1e <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7ff fb38 	bl	8004288 <HAL_GetTick>
 8004c18:	1bc0      	subs	r0, r0, r7
 8004c1a:	4548      	cmp	r0, r9
 8004c1c:	d853      	bhi.n	8004cc6 <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4643      	mov	r3, r8
 8004c20:	6872      	ldr	r2, [r6, #4]
 8004c22:	401a      	ands	r2, r3
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1f3      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4a2b      	ldr	r2, [pc, #172]	; (8004cdc <HAL_RCC_ClockConfig+0x158>)
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	400b      	ands	r3, r1
 8004c34:	42ab      	cmp	r3, r5
 8004c36:	d905      	bls.n	8004c44 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	438b      	bics	r3, r1
 8004c3c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	4219      	tst	r1, r3
 8004c42:	d1b6      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	075b      	lsls	r3, r3, #29
 8004c48:	d506      	bpl.n	8004c58 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
 8004c4c:	4926      	ldr	r1, [pc, #152]	; (8004ce8 <HAL_RCC_ClockConfig+0x164>)
 8004c4e:	6853      	ldr	r3, [r2, #4]
 8004c50:	400b      	ands	r3, r1
 8004c52:	68e1      	ldr	r1, [r4, #12]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004c58:	4669      	mov	r1, sp
 8004c5a:	000a      	movs	r2, r1
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <HAL_RCC_ClockConfig+0x168>)
 8004c5e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004c60:	c231      	stmia	r2!, {r0, r4, r5}
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c66:	aa04      	add	r2, sp, #16
 8004c68:	0010      	movs	r0, r2
 8004c6a:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <HAL_RCC_ClockConfig+0x16c>)
 8004c6c:	cb70      	ldmia	r3!, {r4, r5, r6}
 8004c6e:	c070      	stmia	r0!, {r4, r5, r6}
 8004c70:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004c72:	4c1b      	ldr	r4, [pc, #108]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c74:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c76:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004c78:	6860      	ldr	r0, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004c7a:	4003      	ands	r3, r0
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d00e      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x11a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c80:	481c      	ldr	r0, [pc, #112]	; (8004cf4 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <HAL_RCC_ClockConfig+0x15c>)
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_RCC_ClockConfig+0x174>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	0f1b      	lsrs	r3, r3, #28
 8004c8c:	5cd3      	ldrb	r3, [r2, r3]
 8004c8e:	40d8      	lsrs	r0, r3
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_ClockConfig+0x178>)
 8004c92:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f7ff fab5 	bl	8004204 <HAL_InitTick>
  return HAL_OK;
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e78a      	b.n	8004bb4 <HAL_RCC_ClockConfig+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c9e:	3307      	adds	r3, #7
 8004ca0:	0c85      	lsrs	r5, r0, #18
 8004ca2:	401d      	ands	r5, r3
 8004ca4:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ca6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ca8:	400b      	ands	r3, r1
 8004caa:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cac:	03c3      	lsls	r3, r0, #15
 8004cae:	d50c      	bpl.n	8004cca <HAL_RCC_ClockConfig+0x146>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cb0:	4810      	ldr	r0, [pc, #64]	; (8004cf4 <HAL_RCC_ClockConfig+0x170>)
 8004cb2:	f7fb fa31 	bl	8000118 <__udivsi3>
 8004cb6:	4368      	muls	r0, r5
 8004cb8:	e7e3      	b.n	8004c82 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	019b      	lsls	r3, r3, #6
 8004cbc:	d49c      	bmi.n	8004bf8 <HAL_RCC_ClockConfig+0x74>
 8004cbe:	e778      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc0:	039b      	lsls	r3, r3, #14
 8004cc2:	d499      	bmi.n	8004bf8 <HAL_RCC_ClockConfig+0x74>
 8004cc4:	e775      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004cc6:	2003      	movs	r0, #3
 8004cc8:	e774      	b.n	8004bb4 <HAL_RCC_ClockConfig+0x30>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cca:	016b      	lsls	r3, r5, #5
 8004ccc:	1b5b      	subs	r3, r3, r5
 8004cce:	0198      	lsls	r0, r3, #6
 8004cd0:	1ac0      	subs	r0, r0, r3
 8004cd2:	00c0      	lsls	r0, r0, #3
 8004cd4:	1940      	adds	r0, r0, r5
 8004cd6:	0200      	lsls	r0, r0, #8
 8004cd8:	e7d3      	b.n	8004c82 <HAL_RCC_ClockConfig+0xfe>
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	00001388 	.word	0x00001388
 8004ce8:	fffff8ff 	.word	0xfffff8ff
 8004cec:	0800893c 	.word	0x0800893c
 8004cf0:	08008950 	.word	0x08008950
 8004cf4:	007a1200 	.word	0x007a1200
 8004cf8:	08008924 	.word	0x08008924
 8004cfc:	20000004 	.word	0x20000004

08004d00 <HAL_RCC_GetSysClockFreq>:
{
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004d04:	4669      	mov	r1, sp
 8004d06:	000a      	movs	r2, r1
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8004d0a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004d0c:	c231      	stmia	r2!, {r0, r4, r5}
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6013      	str	r3, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004d12:	aa04      	add	r2, sp, #16
 8004d14:	0010      	movs	r0, r2
 8004d16:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x64>)
 8004d18:	cb70      	ldmia	r3!, {r4, r5, r6}
 8004d1a:	c070      	stmia	r0!, {r4, r5, r6}
 8004d1c:	681b      	ldr	r3, [r3, #0]
  tmpreg = RCC->CFGR;
 8004d1e:	4c12      	ldr	r4, [pc, #72]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004d20:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 8004d22:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004d24:	6860      	ldr	r0, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004d26:	4003      	ands	r3, r0
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d002      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 8004d2c:	480f      	ldr	r0, [pc, #60]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d2e:	b008      	add	sp, #32
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d32:	3307      	adds	r3, #7
 8004d34:	0c85      	lsrs	r5, r0, #18
 8004d36:	401d      	ands	r5, r3
 8004d38:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d3c:	400b      	ands	r3, r1
 8004d3e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d40:	03c3      	lsls	r3, r0, #15
 8004d42:	d504      	bpl.n	8004d4e <HAL_RCC_GetSysClockFreq+0x4e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d44:	4809      	ldr	r0, [pc, #36]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x6c>)
 8004d46:	f7fb f9e7 	bl	8000118 <__udivsi3>
 8004d4a:	4368      	muls	r0, r5
 8004d4c:	e7ef      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d4e:	016b      	lsls	r3, r5, #5
 8004d50:	1b5b      	subs	r3, r3, r5
 8004d52:	0198      	lsls	r0, r3, #6
 8004d54:	1ac0      	subs	r0, r0, r3
 8004d56:	00c0      	lsls	r0, r0, #3
 8004d58:	1940      	adds	r0, r0, r5
 8004d5a:	0200      	lsls	r0, r0, #8
 8004d5c:	e7e7      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x2e>
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	0800893c 	.word	0x0800893c
 8004d64:	08008950 	.word	0x08008950
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	007a1200 	.word	0x007a1200

08004d70 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004d72:	4a05      	ldr	r2, [pc, #20]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	055b      	lsls	r3, r3, #21
 8004d78:	0f5b      	lsrs	r3, r3, #29
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	4a03      	ldr	r2, [pc, #12]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d7e:	6810      	ldr	r0, [r2, #0]
 8004d80:	40d8      	lsrs	r0, r3
}    
 8004d82:	4770      	bx	lr
 8004d84:	40021000 	.word	0x40021000
 8004d88:	08008934 	.word	0x08008934
 8004d8c:	20000004 	.word	0x20000004

08004d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d92:	46ce      	mov	lr, r9
 8004d94:	4647      	mov	r7, r8
 8004d96:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d98:	6803      	ldr	r3, [r0, #0]
{
 8004d9a:	0004      	movs	r4, r0
 8004d9c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d9e:	03da      	lsls	r2, r3, #15
 8004da0:	d532      	bpl.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da2:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004da8:	0552      	lsls	r2, r2, #21
 8004daa:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004dac:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dae:	4211      	tst	r1, r2
 8004db0:	d042      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	2680      	movs	r6, #128	; 0x80
 8004db4:	4d3c      	ldr	r5, [pc, #240]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004db6:	0076      	lsls	r6, r6, #1
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	4233      	tst	r3, r6
 8004dbc:	d04b      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dbe:	4d39      	ldr	r5, [pc, #228]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004dc0:	22c0      	movs	r2, #192	; 0xc0
 8004dc2:	6a2b      	ldr	r3, [r5, #32]
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dca:	4213      	tst	r3, r2
 8004dcc:	d062      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004dce:	6861      	ldr	r1, [r4, #4]
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	4282      	cmp	r2, r0
 8004dd4:	d00e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dd6:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dd8:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dda:	6a2e      	ldr	r6, [r5, #32]
 8004ddc:	0252      	lsls	r2, r2, #9
 8004dde:	4332      	orrs	r2, r6
 8004de0:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004de2:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de4:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004de6:	4e32      	ldr	r6, [pc, #200]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de8:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dea:	4032      	ands	r2, r6
 8004dec:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dee:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004df0:	07c3      	lsls	r3, r0, #31
 8004df2:	d440      	bmi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df4:	4a2b      	ldr	r2, [pc, #172]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004df6:	482d      	ldr	r0, [pc, #180]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004df8:	6a13      	ldr	r3, [r2, #32]
 8004dfa:	4003      	ands	r3, r0
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e00:	4643      	mov	r3, r8
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d048      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004e06:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e08:	07da      	lsls	r2, r3, #31
 8004e0a:	d506      	bpl.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0c:	2003      	movs	r0, #3
 8004e0e:	4925      	ldr	r1, [pc, #148]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004e10:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004e12:	4382      	bics	r2, r0
 8004e14:	68a0      	ldr	r0, [r4, #8]
 8004e16:	4302      	orrs	r2, r0
 8004e18:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004e1a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e1c:	069b      	lsls	r3, r3, #26
 8004e1e:	d506      	bpl.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e20:	2110      	movs	r1, #16
 8004e22:	4a20      	ldr	r2, [pc, #128]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004e24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004e26:	438b      	bics	r3, r1
 8004e28:	68e1      	ldr	r1, [r4, #12]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004e2e:	b003      	add	sp, #12
 8004e30:	bcc0      	pop	{r6, r7}
 8004e32:	46b9      	mov	r9, r7
 8004e34:	46b0      	mov	r8, r6
 8004e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	61d9      	str	r1, [r3, #28]
 8004e40:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	4d19      	ldr	r5, [pc, #100]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e44:	401a      	ands	r2, r3
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	682b      	ldr	r3, [r5, #0]
 8004e50:	0076      	lsls	r6, r6, #1
 8004e52:	4233      	tst	r3, r6
 8004e54:	d1b3      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	4333      	orrs	r3, r6
 8004e5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004e5c:	f7ff fa14 	bl	8004288 <HAL_GetTick>
 8004e60:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	4233      	tst	r3, r6
 8004e66:	d1aa      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x2e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7ff fa0e 	bl	8004288 <HAL_GetTick>
 8004e6c:	1bc0      	subs	r0, r0, r7
 8004e6e:	2864      	cmp	r0, #100	; 0x64
 8004e70:	d9f7      	bls.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          return HAL_TIMEOUT;
 8004e72:	2003      	movs	r0, #3
 8004e74:	e7db      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8004e76:	f7ff fa07 	bl	8004288 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8004e7c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	e004      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7ff fa00 	bl	8004288 <HAL_GetTick>
 8004e88:	1b80      	subs	r0, r0, r6
 8004e8a:	4548      	cmp	r0, r9
 8004e8c:	d8f1      	bhi.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8e:	6a2b      	ldr	r3, [r5, #32]
 8004e90:	421f      	tst	r7, r3
 8004e92:	d0f7      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e94:	6861      	ldr	r1, [r4, #4]
 8004e96:	e7ad      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e98:	69d3      	ldr	r3, [r2, #28]
 8004e9a:	4907      	ldr	r1, [pc, #28]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	61d3      	str	r3, [r2, #28]
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	e7b1      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	fffffcff 	.word	0xfffffcff
 8004eb0:	fffeffff 	.word	0xfffeffff
 8004eb4:	00001388 	.word	0x00001388
 8004eb8:	efffffff 	.word	0xefffffff

08004ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while ((hspi->Instance->SR & Fifo) != State)
 8004ebe:	27c0      	movs	r7, #192	; 0xc0
{
 8004ec0:	0004      	movs	r4, r0
 8004ec2:	000d      	movs	r5, r1
 8004ec4:	0016      	movs	r6, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8004ec6:	017f      	lsls	r7, r7, #5
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	1c6a      	adds	r2, r5, #1
 8004ecc:	d114      	bne.n	8004ef8 <SPI_EndRxTxTransaction+0x3c>
 8004ece:	22c0      	movs	r2, #192	; 0xc0
 8004ed0:	0152      	lsls	r2, r2, #5
 8004ed2:	6899      	ldr	r1, [r3, #8]
 8004ed4:	4211      	tst	r1, r2
 8004ed6:	d1fc      	bne.n	8004ed2 <SPI_EndRxTxTransaction+0x16>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	4211      	tst	r1, r2
 8004ede:	d1fc      	bne.n	8004eda <SPI_EndRxTxTransaction+0x1e>
  while ((hspi->Instance->SR & Fifo) != State)
 8004ee0:	22c0      	movs	r2, #192	; 0xc0
 8004ee2:	6898      	ldr	r0, [r3, #8]
 8004ee4:	00d2      	lsls	r2, r2, #3
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	4210      	tst	r0, r2
 8004eea:	d003      	beq.n	8004ef4 <SPI_EndRxTxTransaction+0x38>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004eec:	7b1a      	ldrb	r2, [r3, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	420a      	tst	r2, r1
 8004ef2:	d1fb      	bne.n	8004eec <SPI_EndRxTxTransaction+0x30>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004ef4:	2000      	movs	r0, #0
}
 8004ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	423a      	tst	r2, r7
 8004efc:	d026      	beq.n	8004f4c <SPI_EndRxTxTransaction+0x90>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004efe:	f7ff f9c3 	bl	8004288 <HAL_GetTick>
 8004f02:	1b80      	subs	r0, r0, r6
 8004f04:	4285      	cmp	r5, r0
 8004f06:	d8df      	bhi.n	8004ec8 <SPI_EndRxTxTransaction+0xc>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	21e0      	movs	r1, #224	; 0xe0
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	438a      	bics	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f12:	2282      	movs	r2, #130	; 0x82
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	0052      	lsls	r2, r2, #1
 8004f18:	4291      	cmp	r1, r2
 8004f1a:	d030      	beq.n	8004f7e <SPI_EndRxTxTransaction+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f20:	0189      	lsls	r1, r1, #6
 8004f22:	428a      	cmp	r2, r1
 8004f24:	d106      	bne.n	8004f34 <SPI_EndRxTxTransaction+0x78>
          SPI_RESET_CRC(hspi);
 8004f26:	6819      	ldr	r1, [r3, #0]
 8004f28:	481c      	ldr	r0, [pc, #112]	; (8004f9c <SPI_EndRxTxTransaction+0xe0>)
 8004f2a:	4001      	ands	r1, r0
 8004f2c:	6019      	str	r1, [r3, #0]
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004f34:	235d      	movs	r3, #93	; 0x5d
 8004f36:	2201      	movs	r2, #1
 8004f38:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f42:	3220      	adds	r2, #32
 8004f44:	4313      	orrs	r3, r2
    return HAL_TIMEOUT;
 8004f46:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f48:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f4a:	e7d4      	b.n	8004ef6 <SPI_EndRxTxTransaction+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4c:	2780      	movs	r7, #128	; 0x80
 8004f4e:	e005      	b.n	8004f5c <SPI_EndRxTxTransaction+0xa0>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f50:	f7ff f99a 	bl	8004288 <HAL_GetTick>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f54:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f56:	1b80      	subs	r0, r0, r6
 8004f58:	4285      	cmp	r5, r0
 8004f5a:	d9d6      	bls.n	8004f0a <SPI_EndRxTxTransaction+0x4e>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	4217      	tst	r7, r2
 8004f60:	d1f6      	bne.n	8004f50 <SPI_EndRxTxTransaction+0x94>
  while ((hspi->Instance->SR & Fifo) != State)
 8004f62:	27c0      	movs	r7, #192	; 0xc0
 8004f64:	00ff      	lsls	r7, r7, #3
 8004f66:	e006      	b.n	8004f76 <SPI_EndRxTxTransaction+0xba>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f68:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f6a:	f7ff f98d 	bl	8004288 <HAL_GetTick>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f6e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f70:	1b80      	subs	r0, r0, r6
 8004f72:	4285      	cmp	r5, r0
 8004f74:	d9c9      	bls.n	8004f0a <SPI_EndRxTxTransaction+0x4e>
  while ((hspi->Instance->SR & Fifo) != State)
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	423a      	tst	r2, r7
 8004f7a:	d1f5      	bne.n	8004f68 <SPI_EndRxTxTransaction+0xac>
 8004f7c:	e7ba      	b.n	8004ef4 <SPI_EndRxTxTransaction+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	68a2      	ldr	r2, [r4, #8]
 8004f82:	0209      	lsls	r1, r1, #8
 8004f84:	428a      	cmp	r2, r1
 8004f86:	d003      	beq.n	8004f90 <SPI_EndRxTxTransaction+0xd4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	00c9      	lsls	r1, r1, #3
 8004f8c:	428a      	cmp	r2, r1
 8004f8e:	d1c5      	bne.n	8004f1c <SPI_EndRxTxTransaction+0x60>
          __HAL_SPI_DISABLE(hspi);
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	438a      	bics	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e7c0      	b.n	8004f1c <SPI_EndRxTxTransaction+0x60>
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	ffffdfff 	.word	0xffffdfff

08004fa0 <HAL_SPI_Init>:
{
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8004fa4:	d060      	beq.n	8005068 <HAL_SPI_Init+0xc8>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004faa:	335d      	adds	r3, #93	; 0x5d
 8004fac:	5cc3      	ldrb	r3, [r0, r3]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d054      	beq.n	800505e <HAL_SPI_Init+0xbe>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb4:	235d      	movs	r3, #93	; 0x5d
 8004fb6:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8004fb8:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004fba:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8004fbc:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fbe:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	438b      	bics	r3, r1
 8004fc4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc6:	23e0      	movs	r3, #224	; 0xe0
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	d92f      	bls.n	800502e <HAL_SPI_Init+0x8e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fce:	23f0      	movs	r3, #240	; 0xf0
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	429e      	cmp	r6, r3
 8004fd4:	d14a      	bne.n	800506c <HAL_SPI_Init+0xcc>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004fd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fd8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d032      	beq.n	8005044 <HAL_SPI_Init+0xa4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fde:	2100      	movs	r1, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004fe0:	68a5      	ldr	r5, [r4, #8]
 8004fe2:	6863      	ldr	r3, [r4, #4]
 8004fe4:	69a0      	ldr	r0, [r4, #24]
 8004fe6:	432b      	orrs	r3, r5
 8004fe8:	6925      	ldr	r5, [r4, #16]
 8004fea:	432b      	orrs	r3, r5
 8004fec:	6965      	ldr	r5, [r4, #20]
 8004fee:	432b      	orrs	r3, r5
 8004ff0:	69e5      	ldr	r5, [r4, #28]
 8004ff2:	432b      	orrs	r3, r5
 8004ff4:	6a25      	ldr	r5, [r4, #32]
 8004ff6:	432b      	orrs	r3, r5
 8004ff8:	2580      	movs	r5, #128	; 0x80
 8004ffa:	00ad      	lsls	r5, r5, #2
 8004ffc:	4005      	ands	r5, r0
 8004ffe:	432b      	orrs	r3, r5
 8005000:	433b      	orrs	r3, r7
 8005002:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005006:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005008:	4333      	orrs	r3, r6
 800500a:	432b      	orrs	r3, r5
 800500c:	2504      	movs	r5, #4
 800500e:	0c00      	lsrs	r0, r0, #16
 8005010:	4028      	ands	r0, r5
 8005012:	4303      	orrs	r3, r0
 8005014:	430b      	orrs	r3, r1
 8005016:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005018:	69d3      	ldr	r3, [r2, #28]
 800501a:	4918      	ldr	r1, [pc, #96]	; (800507c <HAL_SPI_Init+0xdc>)
  return HAL_OK;
 800501c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800501e:	400b      	ands	r3, r1
 8005020:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005022:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005024:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005026:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005028:	335d      	adds	r3, #93	; 0x5d
 800502a:	54e2      	strb	r2, [r4, r3]
}
 800502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502e:	429e      	cmp	r6, r3
 8005030:	d00c      	beq.n	800504c <HAL_SPI_Init+0xac>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005032:	2300      	movs	r3, #0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005034:	6b27      	ldr	r7, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005036:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005038:	2f00      	cmp	r7, #0
 800503a:	d00b      	beq.n	8005054 <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800503c:	2180      	movs	r1, #128	; 0x80
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800503e:	2700      	movs	r7, #0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005040:	0149      	lsls	r1, r1, #5
 8005042:	e7cd      	b.n	8004fe0 <HAL_SPI_Init+0x40>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005044:	2302      	movs	r3, #2
 8005046:	2100      	movs	r1, #0
 8005048:	6323      	str	r3, [r4, #48]	; 0x30
 800504a:	e7c9      	b.n	8004fe0 <HAL_SPI_Init+0x40>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800504c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800504e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_SPI_Init+0xb8>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005054:	2301      	movs	r3, #1
 8005056:	6323      	str	r3, [r4, #48]	; 0x30
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	0149      	lsls	r1, r1, #5
 800505c:	e7c0      	b.n	8004fe0 <HAL_SPI_Init+0x40>
    hspi->Lock = HAL_UNLOCKED;
 800505e:	335c      	adds	r3, #92	; 0x5c
 8005060:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8005062:	f7fe fc71 	bl	8003948 <HAL_SPI_MspInit>
 8005066:	e7a5      	b.n	8004fb4 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
 800506a:	e7df      	b.n	800502c <HAL_SPI_Init+0x8c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800506c:	2300      	movs	r3, #0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800506e:	6b27      	ldr	r7, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005072:	2f00      	cmp	r7, #0
 8005074:	d0e6      	beq.n	8005044 <HAL_SPI_Init+0xa4>
 8005076:	2700      	movs	r7, #0
 8005078:	e7b1      	b.n	8004fde <HAL_SPI_Init+0x3e>
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	fffff7ff 	.word	0xfffff7ff

08005080 <HAL_SPI_Transmit>:
{
 8005080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005082:	46c6      	mov	lr, r8
 8005084:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8005086:	235c      	movs	r3, #92	; 0x5c
{
 8005088:	b500      	push	{lr}
 800508a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800508c:	5cc2      	ldrb	r2, [r0, r3]
{
 800508e:	0004      	movs	r4, r0
 8005090:	000f      	movs	r7, r1
 8005092:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8005094:	2a01      	cmp	r2, #1
 8005096:	d100      	bne.n	800509a <HAL_SPI_Transmit+0x1a>
 8005098:	e06e      	b.n	8005178 <HAL_SPI_Transmit+0xf8>
 800509a:	2201      	movs	r2, #1
 800509c:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800509e:	f7ff f8f3 	bl	8004288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80050a2:	225d      	movs	r2, #93	; 0x5d
 80050a4:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80050a6:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80050a8:	b2d8      	uxtb	r0, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d00a      	beq.n	80050c4 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 80050ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80050b0:	235d      	movs	r3, #93	; 0x5d
 80050b2:	2201      	movs	r2, #1
 80050b4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80050b6:	2200      	movs	r2, #0
 80050b8:	3b01      	subs	r3, #1
 80050ba:	54e2      	strb	r2, [r4, r3]
}
 80050bc:	b002      	add	sp, #8
 80050be:	bc80      	pop	{r7}
 80050c0:	46b8      	mov	r8, r7
 80050c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80050c4:	2f00      	cmp	r7, #0
 80050c6:	d0f3      	beq.n	80050b0 <HAL_SPI_Transmit+0x30>
 80050c8:	4643      	mov	r3, r8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ce:	2303      	movs	r3, #3
 80050d0:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d2:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80050d4:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 80050d8:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050da:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80050dc:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050de:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050e0:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050e2:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80050e4:	3202      	adds	r2, #2
 80050e6:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80050e8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	68a2      	ldr	r2, [r4, #8]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d042      	beq.n	800517c <HAL_SPI_Transmit+0xfc>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	001a      	movs	r2, r3
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fa:	2140      	movs	r1, #64	; 0x40
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	4201      	tst	r1, r0
 8005100:	d102      	bne.n	8005108 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	4301      	orrs	r1, r0
 8005106:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	21e0      	movs	r1, #224	; 0xe0
 800510a:	68e0      	ldr	r0, [r4, #12]
 800510c:	00c9      	lsls	r1, r1, #3
 800510e:	4288      	cmp	r0, r1
 8005110:	d963      	bls.n	80051da <HAL_SPI_Transmit+0x15a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005112:	6861      	ldr	r1, [r4, #4]
 8005114:	2900      	cmp	r1, #0
 8005116:	d050      	beq.n	80051ba <HAL_SPI_Transmit+0x13a>
 8005118:	4641      	mov	r1, r8
 800511a:	2901      	cmp	r1, #1
 800511c:	d04d      	beq.n	80051ba <HAL_SPI_Transmit+0x13a>
    while (hspi->TxXferCount > 0U)
 800511e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005120:	2900      	cmp	r1, #0
 8005122:	d011      	beq.n	8005148 <HAL_SPI_Transmit+0xc8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005124:	2702      	movs	r7, #2
 8005126:	1c69      	adds	r1, r5, #1
 8005128:	d13d      	bne.n	80051a6 <HAL_SPI_Transmit+0x126>
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	4217      	tst	r7, r2
 800512e:	d04d      	beq.n	80051cc <HAL_SPI_Transmit+0x14c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005130:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005132:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005134:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005136:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005138:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800513a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800513c:	3a01      	subs	r2, #1
 800513e:	b292      	uxth	r2, r2
 8005140:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005142:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005144:	2a00      	cmp	r2, #0
 8005146:	d1f0      	bne.n	800512a <HAL_SPI_Transmit+0xaa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005148:	0032      	movs	r2, r6
 800514a:	0029      	movs	r1, r5
 800514c:	0020      	movs	r0, r4
 800514e:	f7ff feb5 	bl	8004ebc <SPI_EndRxTxTransaction>
 8005152:	2800      	cmp	r0, #0
 8005154:	d001      	beq.n	800515a <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005156:	2320      	movs	r3, #32
 8005158:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_SPI_Transmit+0xee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	9201      	str	r2, [sp, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800516e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005170:	1e43      	subs	r3, r0, #1
 8005172:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8005174:	b2c0      	uxtb	r0, r0
error:
 8005176:	e79b      	b.n	80050b0 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8005178:	2002      	movs	r0, #2
 800517a:	e79f      	b.n	80050bc <HAL_SPI_Transmit+0x3c>
    SPI_1LINE_TX(hspi);
 800517c:	2180      	movs	r1, #128	; 0x80
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	01c9      	lsls	r1, r1, #7
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	001a      	movs	r2, r3
 8005186:	4301      	orrs	r1, r0
 8005188:	6019      	str	r1, [r3, #0]
 800518a:	e7b6      	b.n	80050fa <HAL_SPI_Transmit+0x7a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800518c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800518e:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005190:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005192:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005194:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005196:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005198:	3b01      	subs	r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800519e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0d1      	beq.n	8005148 <HAL_SPI_Transmit+0xc8>
 80051a4:	6822      	ldr	r2, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051a6:	6893      	ldr	r3, [r2, #8]
 80051a8:	421f      	tst	r7, r3
 80051aa:	d1ef      	bne.n	800518c <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ac:	f7ff f86c 	bl	8004288 <HAL_GetTick>
 80051b0:	1b80      	subs	r0, r0, r6
 80051b2:	42a8      	cmp	r0, r5
 80051b4:	d3f3      	bcc.n	800519e <HAL_SPI_Transmit+0x11e>
          errorcode = HAL_TIMEOUT;
 80051b6:	2003      	movs	r0, #3
 80051b8:	e77a      	b.n	80050b0 <HAL_SPI_Transmit+0x30>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ba:	8839      	ldrh	r1, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051bc:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051be:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 80051c0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c2:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80051c4:	3901      	subs	r1, #1
 80051c6:	b289      	uxth	r1, r1
 80051c8:	87e1      	strh	r1, [r4, #62]	; 0x3e
 80051ca:	e7a8      	b.n	800511e <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051cc:	f7ff f85c 	bl	8004288 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80051d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0b8      	beq.n	8005148 <HAL_SPI_Transmit+0xc8>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	e7a7      	b.n	800512a <HAL_SPI_Transmit+0xaa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051da:	6862      	ldr	r2, [r4, #4]
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d03a      	beq.n	8005256 <HAL_SPI_Transmit+0x1d6>
 80051e0:	4642      	mov	r2, r8
 80051e2:	2a01      	cmp	r2, #1
 80051e4:	d037      	beq.n	8005256 <HAL_SPI_Transmit+0x1d6>
    while (hspi->TxXferCount > 0U)
 80051e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ad      	beq.n	8005148 <HAL_SPI_Transmit+0xc8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ec:	2702      	movs	r7, #2
 80051ee:	1c6b      	adds	r3, r5, #1
 80051f0:	d00f      	beq.n	8005212 <HAL_SPI_Transmit+0x192>
 80051f2:	e025      	b.n	8005240 <HAL_SPI_Transmit+0x1c0>
        if (hspi->TxXferCount > 1U)
 80051f4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051f6:	2a01      	cmp	r2, #1
 80051f8:	d939      	bls.n	800526e <HAL_SPI_Transmit+0x1ee>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051fc:	8811      	ldrh	r1, [r2, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	3202      	adds	r2, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005200:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 8005202:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005206:	3b02      	subs	r3, #2
 8005208:	b29b      	uxth	r3, r3
 800520a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800520c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800520e:	2b00      	cmp	r3, #0
 8005210:	d09a      	beq.n	8005148 <HAL_SPI_Transmit+0xc8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	4217      	tst	r7, r2
 8005218:	d1ec      	bne.n	80051f4 <HAL_SPI_Transmit+0x174>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521a:	f7ff f835 	bl	8004288 <HAL_GetTick>
 800521e:	e7f5      	b.n	800520c <HAL_SPI_Transmit+0x18c>
        if (hspi->TxXferCount > 1U)
 8005220:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005222:	2a01      	cmp	r2, #1
 8005224:	d92e      	bls.n	8005284 <HAL_SPI_Transmit+0x204>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005228:	8811      	ldrh	r1, [r2, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800522a:	3202      	adds	r2, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522c:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800522e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005230:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005232:	3b02      	subs	r3, #2
 8005234:	b29b      	uxth	r3, r3
 8005236:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005238:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800523a:	2b00      	cmp	r3, #0
 800523c:	d100      	bne.n	8005240 <HAL_SPI_Transmit+0x1c0>
 800523e:	e783      	b.n	8005148 <HAL_SPI_Transmit+0xc8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	4217      	tst	r7, r2
 8005246:	d1eb      	bne.n	8005220 <HAL_SPI_Transmit+0x1a0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005248:	f7ff f81e 	bl	8004288 <HAL_GetTick>
 800524c:	1b80      	subs	r0, r0, r6
 800524e:	42a8      	cmp	r0, r5
 8005250:	d3f2      	bcc.n	8005238 <HAL_SPI_Transmit+0x1b8>
          errorcode = HAL_TIMEOUT;
 8005252:	2003      	movs	r0, #3
 8005254:	e72c      	b.n	80050b0 <HAL_SPI_Transmit+0x30>
      if (hspi->TxXferCount > 1U)
 8005256:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005258:	2a01      	cmp	r2, #1
 800525a:	d91e      	bls.n	800529a <HAL_SPI_Transmit+0x21a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525c:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800525e:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005260:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005262:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005264:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005266:	3b02      	subs	r3, #2
 8005268:	b29b      	uxth	r3, r3
 800526a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800526c:	e7bb      	b.n	80051e6 <HAL_SPI_Transmit+0x166>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800526e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005274:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005276:	3301      	adds	r3, #1
 8005278:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800527a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800527c:	3b01      	subs	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005282:	e7c3      	b.n	800520c <HAL_SPI_Transmit+0x18c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005284:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800528a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800528c:	3301      	adds	r3, #1
 800528e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005298:	e7ce      	b.n	8005238 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800529a:	783a      	ldrb	r2, [r7, #0]
 800529c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800529e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052a0:	3301      	adds	r3, #1
 80052a2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80052a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80052ac:	e79b      	b.n	80051e6 <HAL_SPI_Transmit+0x166>
 80052ae:	46c0      	nop			; (mov r8, r8)

080052b0 <HAL_SPI_TransmitReceive>:
{
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	46c6      	mov	lr, r8
 80052b4:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80052b6:	235c      	movs	r3, #92	; 0x5c
{
 80052b8:	b500      	push	{lr}
 80052ba:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80052bc:	5cc2      	ldrb	r2, [r0, r3]
{
 80052be:	0004      	movs	r4, r0
 80052c0:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80052c2:	2a01      	cmp	r2, #1
 80052c4:	d100      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x18>
 80052c6:	e096      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x146>
 80052c8:	2201      	movs	r2, #1
 80052ca:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80052cc:	f7fe ffdc 	bl	8004288 <HAL_GetTick>
  tmp_state           = hspi->State;
 80052d0:	235d      	movs	r3, #93	; 0x5d
 80052d2:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 80052d4:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 80052d6:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80052d8:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d012      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x54>
 80052de:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80052e0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d008      	beq.n	80052fa <HAL_SPI_TransmitReceive+0x4a>
  hspi->State = HAL_SPI_STATE_READY;
 80052e8:	235d      	movs	r3, #93	; 0x5d
 80052ea:	2201      	movs	r2, #1
 80052ec:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80052ee:	2200      	movs	r2, #0
 80052f0:	3b01      	subs	r3, #1
 80052f2:	54e2      	strb	r2, [r4, r3]
}
 80052f4:	bc80      	pop	{r7}
 80052f6:	46b8      	mov	r8, r7
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f3      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
 8005300:	2904      	cmp	r1, #4
 8005302:	d1f1      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005304:	2f00      	cmp	r7, #0
 8005306:	d100      	bne.n	800530a <HAL_SPI_TransmitReceive+0x5a>
 8005308:	e077      	b.n	80053fa <HAL_SPI_TransmitReceive+0x14a>
 800530a:	4643      	mov	r3, r8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d074      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x14a>
 8005310:	2d00      	cmp	r5, #0
 8005312:	d072      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x14a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005314:	235d      	movs	r3, #93	; 0x5d
 8005316:	5ce1      	ldrb	r1, [r4, r3]
 8005318:	2904      	cmp	r1, #4
 800531a:	d001      	beq.n	8005320 <HAL_SPI_TransmitReceive+0x70>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800531c:	2105      	movs	r1, #5
 800531e:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005320:	4641      	mov	r1, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005322:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005324:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005326:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005328:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800532a:	5265      	strh	r5, [r4, r1]
  hspi->RxXferSize  = Size;
 800532c:	3902      	subs	r1, #2
 800532e:	5265      	strh	r5, [r4, r1]
  hspi->RxISR       = NULL;
 8005330:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005332:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005334:	23e0      	movs	r3, #224	; 0xe0
 8005336:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005338:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800533a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800533c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4299      	cmp	r1, r3
 8005342:	d85c      	bhi.n	80053fe <HAL_SPI_TransmitReceive+0x14e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005344:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005346:	2d01      	cmp	r5, #1
 8005348:	d800      	bhi.n	800534c <HAL_SPI_TransmitReceive+0x9c>
 800534a:	e0b6      	b.n	80054ba <HAL_SPI_TransmitReceive+0x20a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	489b      	ldr	r0, [pc, #620]	; (80055bc <HAL_SPI_TransmitReceive+0x30c>)
 8005350:	4001      	ands	r1, r0
 8005352:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	0649      	lsls	r1, r1, #25
 8005358:	d400      	bmi.n	800535c <HAL_SPI_TransmitReceive+0xac>
 800535a:	e0b7      	b.n	80054cc <HAL_SPI_TransmitReceive+0x21c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800535c:	2a00      	cmp	r2, #0
 800535e:	d10b      	bne.n	8005378 <HAL_SPI_TransmitReceive+0xc8>
      if (hspi->TxXferCount > 1U)
 8005360:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005362:	2a01      	cmp	r2, #1
 8005364:	d800      	bhi.n	8005368 <HAL_SPI_TransmitReceive+0xb8>
 8005366:	e0e5      	b.n	8005534 <HAL_SPI_TransmitReceive+0x284>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005368:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800536e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005370:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005372:	3b02      	subs	r3, #2
 8005374:	b29b      	uxth	r3, r3
 8005376:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005378:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537a:	2546      	movs	r5, #70	; 0x46
        txallowed = 1U;
 800537c:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537e:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005380:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <HAL_SPI_TransmitReceive+0xde>
 8005386:	5b63      	ldrh	r3, [r4, r5]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d100      	bne.n	800538e <HAL_SPI_TransmitReceive+0xde>
 800538c:	e086      	b.n	800549c <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	4217      	tst	r7, r2
 8005394:	d006      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0xf4>
 8005396:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005398:	2a00      	cmp	r2, #0
 800539a:	d003      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0xf4>
 800539c:	4642      	mov	r2, r8
 800539e:	2a01      	cmp	r2, #1
 80053a0:	d100      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0xf4>
 80053a2:	e0aa      	b.n	80054fa <HAL_SPI_TransmitReceive+0x24a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a4:	2101      	movs	r1, #1
 80053a6:	0008      	movs	r0, r1
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	4010      	ands	r0, r2
 80053ac:	4211      	tst	r1, r2
 80053ae:	d018      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x132>
 80053b0:	5b62      	ldrh	r2, [r4, r5]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d015      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x132>
        if (hspi->RxXferCount > 1U)
 80053b6:	5b62      	ldrh	r2, [r4, r5]
 80053b8:	2a01      	cmp	r2, #1
 80053ba:	d800      	bhi.n	80053be <HAL_SPI_TransmitReceive+0x10e>
 80053bc:	e091      	b.n	80054e2 <HAL_SPI_TransmitReceive+0x232>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053be:	68d9      	ldr	r1, [r3, #12]
 80053c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 80053c2:	4680      	mov	r8, r0
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053c4:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c6:	3202      	adds	r2, #2
 80053c8:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053ca:	5b62      	ldrh	r2, [r4, r5]
 80053cc:	3a02      	subs	r2, #2
 80053ce:	b292      	uxth	r2, r2
 80053d0:	5362      	strh	r2, [r4, r5]
          if (hspi->RxXferCount <= 1U)
 80053d2:	5b62      	ldrh	r2, [r4, r5]
 80053d4:	2a01      	cmp	r2, #1
 80053d6:	d804      	bhi.n	80053e2 <HAL_SPI_TransmitReceive+0x132>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	0152      	lsls	r2, r2, #5
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053e2:	f7fe ff51 	bl	8004288 <HAL_GetTick>
 80053e6:	9b06      	ldr	r3, [sp, #24]
 80053e8:	1b80      	subs	r0, r0, r6
 80053ea:	4298      	cmp	r0, r3
 80053ec:	d3c8      	bcc.n	8005380 <HAL_SPI_TransmitReceive+0xd0>
 80053ee:	3301      	adds	r3, #1
 80053f0:	d0c6      	beq.n	8005380 <HAL_SPI_TransmitReceive+0xd0>
        errorcode = HAL_TIMEOUT;
 80053f2:	2003      	movs	r0, #3
 80053f4:	e778      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80053f6:	2002      	movs	r0, #2
 80053f8:	e77c      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x44>
    errorcode = HAL_ERROR;
 80053fa:	2001      	movs	r0, #1
 80053fc:	e774      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	486e      	ldr	r0, [pc, #440]	; (80055bc <HAL_SPI_TransmitReceive+0x30c>)
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	4001      	ands	r1, r0
 8005406:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	4201      	tst	r1, r0
 800540e:	d102      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x166>
    __HAL_SPI_ENABLE(hspi);
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	4301      	orrs	r1, r0
 8005414:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005416:	2a00      	cmp	r2, #0
 8005418:	d14c      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x204>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541a:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800541c:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005420:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005422:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005424:	3b01      	subs	r3, #1
 8005426:	b29b      	uxth	r3, r3
 8005428:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800542a:	9b06      	ldr	r3, [sp, #24]
 800542c:	3301      	adds	r3, #1
 800542e:	d000      	beq.n	8005432 <HAL_SPI_TransmitReceive+0x182>
 8005430:	e08a      	b.n	8005548 <HAL_SPI_TransmitReceive+0x298>
{
 8005432:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005434:	2546      	movs	r5, #70	; 0x46
{
 8005436:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005438:	2702      	movs	r7, #2
 800543a:	e029      	b.n	8005490 <HAL_SPI_TransmitReceive+0x1e0>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	4217      	tst	r7, r2
 8005442:	d010      	beq.n	8005466 <HAL_SPI_TransmitReceive+0x1b6>
 8005444:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005446:	2a00      	cmp	r2, #0
 8005448:	d00d      	beq.n	8005466 <HAL_SPI_TransmitReceive+0x1b6>
 800544a:	4642      	mov	r2, r8
 800544c:	2a01      	cmp	r2, #1
 800544e:	d10a      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1b6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005450:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005452:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005454:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005456:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005458:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800545a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800545c:	3a01      	subs	r2, #1
 800545e:	b292      	uxth	r2, r2
 8005460:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005462:	2200      	movs	r2, #0
 8005464:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005466:	2101      	movs	r1, #1
 8005468:	0008      	movs	r0, r1
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	4010      	ands	r0, r2
 800546e:	4211      	tst	r1, r2
 8005470:	d00c      	beq.n	800548c <HAL_SPI_TransmitReceive+0x1dc>
 8005472:	5b62      	ldrh	r2, [r4, r5]
 8005474:	2a00      	cmp	r2, #0
 8005476:	d009      	beq.n	800548c <HAL_SPI_TransmitReceive+0x1dc>
        txallowed = 1U;
 8005478:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800547e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005480:	3302      	adds	r3, #2
 8005482:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005484:	5b63      	ldrh	r3, [r4, r5]
 8005486:	3b01      	subs	r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800548c:	f7fe fefc 	bl	8004288 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005490:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1d2      	bne.n	800543c <HAL_SPI_TransmitReceive+0x18c>
 8005496:	5b63      	ldrh	r3, [r4, r5]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1cf      	bne.n	800543c <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549c:	0032      	movs	r2, r6
 800549e:	0020      	movs	r0, r4
 80054a0:	9906      	ldr	r1, [sp, #24]
 80054a2:	f7ff fd0b 	bl	8004ebc <SPI_EndRxTxTransaction>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d100      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x1fc>
 80054aa:	e71d      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ac:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80054ae:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b0:	6623      	str	r3, [r4, #96]	; 0x60
 80054b2:	e719      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b4:	2d01      	cmp	r5, #1
 80054b6:	d1b8      	bne.n	800542a <HAL_SPI_TransmitReceive+0x17a>
 80054b8:	e7af      	b.n	800541a <HAL_SPI_TransmitReceive+0x16a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	6858      	ldr	r0, [r3, #4]
 80054be:	0149      	lsls	r1, r1, #5
 80054c0:	4301      	orrs	r1, r0
 80054c2:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	0649      	lsls	r1, r1, #25
 80054c8:	d500      	bpl.n	80054cc <HAL_SPI_TransmitReceive+0x21c>
 80054ca:	e749      	b.n	8005360 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80054cc:	2040      	movs	r0, #64	; 0x40
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	4301      	orrs	r1, r0
 80054d2:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d100      	bne.n	80054da <HAL_SPI_TransmitReceive+0x22a>
 80054d8:	e742      	b.n	8005360 <HAL_SPI_TransmitReceive+0xb0>
 80054da:	2d01      	cmp	r5, #1
 80054dc:	d000      	beq.n	80054e0 <HAL_SPI_TransmitReceive+0x230>
 80054de:	e74b      	b.n	8005378 <HAL_SPI_TransmitReceive+0xc8>
 80054e0:	e73e      	b.n	8005360 <HAL_SPI_TransmitReceive+0xb0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054e2:	7b1b      	ldrb	r3, [r3, #12]
 80054e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 80054e6:	4680      	mov	r8, r0
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054e8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80054ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ec:	3301      	adds	r3, #1
 80054ee:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80054f0:	5b63      	ldrh	r3, [r4, r5]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	5363      	strh	r3, [r4, r5]
 80054f8:	e773      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x132>
        if (hspi->TxXferCount > 1U)
 80054fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80054fc:	2a01      	cmp	r2, #1
 80054fe:	d90b      	bls.n	8005518 <HAL_SPI_TransmitReceive+0x268>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005502:	8811      	ldrh	r1, [r2, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005504:	3202      	adds	r2, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005506:	60d9      	str	r1, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005508:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800550a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800550c:	3a02      	subs	r2, #2
 800550e:	b292      	uxth	r2, r2
 8005510:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005512:	2200      	movs	r2, #0
 8005514:	4690      	mov	r8, r2
 8005516:	e745      	b.n	80053a4 <HAL_SPI_TransmitReceive+0xf4>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005518:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 800551e:	2200      	movs	r2, #0
          hspi->pTxBuffPtr++;
 8005520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 8005522:	4690      	mov	r8, r2
          hspi->pTxBuffPtr++;
 8005524:	3301      	adds	r3, #1
 8005526:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005528:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800552a:	3b01      	subs	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	e737      	b.n	80053a4 <HAL_SPI_TransmitReceive+0xf4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005534:	783a      	ldrb	r2, [r7, #0]
 8005536:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800553a:	3301      	adds	r3, #1
 800553c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800553e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005540:	3b01      	subs	r3, #1
 8005542:	b29b      	uxth	r3, r3
 8005544:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005546:	e717      	b.n	8005378 <HAL_SPI_TransmitReceive+0xc8>
        txallowed = 1U;
 8005548:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800554a:	2546      	movs	r5, #70	; 0x46
        txallowed = 1U;
 800554c:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800554e:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005550:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2ac>
 8005556:	5b63      	ldrh	r3, [r4, r5]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d09f      	beq.n	800549c <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	4217      	tst	r7, r2
 8005562:	d010      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x2d6>
 8005564:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005566:	2a00      	cmp	r2, #0
 8005568:	d00d      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x2d6>
 800556a:	4642      	mov	r2, r8
 800556c:	2a01      	cmp	r2, #1
 800556e:	d10a      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x2d6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005570:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005572:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005574:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005576:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005578:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800557a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800557c:	3a01      	subs	r2, #1
 800557e:	b292      	uxth	r2, r2
 8005580:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005582:	2200      	movs	r2, #0
 8005584:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005586:	2101      	movs	r1, #1
 8005588:	0008      	movs	r0, r1
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4010      	ands	r0, r2
 800558e:	4211      	tst	r1, r2
 8005590:	d00c      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x2fc>
 8005592:	5b62      	ldrh	r2, [r4, r5]
 8005594:	2a00      	cmp	r2, #0
 8005596:	d009      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x2fc>
        txallowed = 1U;
 8005598:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800559e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a0:	3302      	adds	r3, #2
 80055a2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80055a4:	5b63      	ldrh	r3, [r4, r5]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055ac:	f7fe fe6c 	bl	8004288 <HAL_GetTick>
 80055b0:	9b06      	ldr	r3, [sp, #24]
 80055b2:	1b80      	subs	r0, r0, r6
 80055b4:	4298      	cmp	r0, r3
 80055b6:	d3cb      	bcc.n	8005550 <HAL_SPI_TransmitReceive+0x2a0>
        errorcode = HAL_TIMEOUT;
 80055b8:	2003      	movs	r0, #3
 80055ba:	e695      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x38>
 80055bc:	ffffefff 	.word	0xffffefff

080055c0 <HAL_SPI_Receive>:
{
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c2:	46c6      	mov	lr, r8
 80055c4:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055c6:	2382      	movs	r3, #130	; 0x82
{
 80055c8:	b500      	push	{lr}
 80055ca:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055cc:	6842      	ldr	r2, [r0, #4]
{
 80055ce:	0004      	movs	r4, r0
 80055d0:	4688      	mov	r8, r1
 80055d2:	b082      	sub	sp, #8
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d100      	bne.n	80055dc <HAL_SPI_Receive+0x1c>
 80055da:	e07d      	b.n	80056d8 <HAL_SPI_Receive+0x118>
  __HAL_LOCK(hspi);
 80055dc:	235c      	movs	r3, #92	; 0x5c
 80055de:	5ce2      	ldrb	r2, [r4, r3]
 80055e0:	2a01      	cmp	r2, #1
 80055e2:	d100      	bne.n	80055e6 <HAL_SPI_Receive+0x26>
 80055e4:	e085      	b.n	80056f2 <HAL_SPI_Receive+0x132>
 80055e6:	2201      	movs	r2, #1
 80055e8:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 80055ea:	f7fe fe4d 	bl	8004288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80055ee:	225d      	movs	r2, #93	; 0x5d
 80055f0:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80055f2:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80055f4:	b2d8      	uxtb	r0, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d00a      	beq.n	8005610 <HAL_SPI_Receive+0x50>
    errorcode = HAL_BUSY;
 80055fa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80055fc:	235d      	movs	r3, #93	; 0x5d
 80055fe:	2201      	movs	r2, #1
 8005600:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8005602:	2200      	movs	r2, #0
 8005604:	3b01      	subs	r3, #1
 8005606:	54e2      	strb	r2, [r4, r3]
}
 8005608:	b002      	add	sp, #8
 800560a:	bc80      	pop	{r7}
 800560c:	46b8      	mov	r8, r7
 800560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8005610:	4643      	mov	r3, r8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f2      	beq.n	80055fc <HAL_SPI_Receive+0x3c>
 8005616:	2e00      	cmp	r6, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_SPI_Receive+0x3c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800561a:	2304      	movs	r3, #4
 800561c:	54a3      	strb	r3, [r4, r2]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800561e:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005620:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005622:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005624:	2244      	movs	r2, #68	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005626:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 8005628:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 800562a:	3202      	adds	r2, #2
 800562c:	52a6      	strh	r6, [r4, r2]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562e:	22e0      	movs	r2, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005630:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005632:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005634:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005636:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005638:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	00d2      	lsls	r2, r2, #3
 800563e:	4293      	cmp	r3, r2
 8005640:	d800      	bhi.n	8005644 <HAL_SPI_Receive+0x84>
 8005642:	e0c2      	b.n	80057ca <HAL_SPI_Receive+0x20a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005644:	6822      	ldr	r2, [r4, #0]
 8005646:	4895      	ldr	r0, [pc, #596]	; (800589c <HAL_SPI_Receive+0x2dc>)
 8005648:	6851      	ldr	r1, [r2, #4]
 800564a:	4001      	ands	r1, r0
 800564c:	6051      	str	r1, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	68a0      	ldr	r0, [r4, #8]
 8005652:	0209      	lsls	r1, r1, #8
 8005654:	4288      	cmp	r0, r1
 8005656:	d103      	bne.n	8005660 <HAL_SPI_Receive+0xa0>
    SPI_1LINE_RX(hspi);
 8005658:	6811      	ldr	r1, [r2, #0]
 800565a:	4891      	ldr	r0, [pc, #580]	; (80058a0 <HAL_SPI_Receive+0x2e0>)
 800565c:	4001      	ands	r1, r0
 800565e:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005660:	2140      	movs	r1, #64	; 0x40
 8005662:	6810      	ldr	r0, [r2, #0]
 8005664:	4201      	tst	r1, r0
 8005666:	d102      	bne.n	800566e <HAL_SPI_Receive+0xae>
    __HAL_SPI_ENABLE(hspi);
 8005668:	6810      	ldr	r0, [r2, #0]
 800566a:	4301      	orrs	r1, r0
 800566c:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800566e:	21e0      	movs	r1, #224	; 0xe0
 8005670:	00c9      	lsls	r1, r1, #3
 8005672:	428b      	cmp	r3, r1
 8005674:	d96a      	bls.n	800574c <HAL_SPI_Receive+0x18c>
    while (hspi->RxXferCount > 0U)
 8005676:	2346      	movs	r3, #70	; 0x46
 8005678:	5ae3      	ldrh	r3, [r4, r3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d014      	beq.n	80056a8 <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800567e:	2301      	movs	r3, #1
        hspi->RxXferCount--;
 8005680:	2646      	movs	r6, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005682:	4698      	mov	r8, r3
 8005684:	1c6b      	adds	r3, r5, #1
 8005686:	d142      	bne.n	800570e <HAL_SPI_Receive+0x14e>
 8005688:	4641      	mov	r1, r8
 800568a:	6893      	ldr	r3, [r2, #8]
 800568c:	4219      	tst	r1, r3
 800568e:	d04b      	beq.n	8005728 <HAL_SPI_Receive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005690:	68d1      	ldr	r1, [r2, #12]
 8005692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005694:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005696:	3302      	adds	r3, #2
 8005698:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800569a:	5ba1      	ldrh	r1, [r4, r6]
 800569c:	3901      	subs	r1, #1
 800569e:	b289      	uxth	r1, r1
 80056a0:	53a1      	strh	r1, [r4, r6]
    while (hspi->RxXferCount > 0U)
 80056a2:	5ba3      	ldrh	r3, [r4, r6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ef      	bne.n	8005688 <HAL_SPI_Receive+0xc8>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a8:	2382      	movs	r3, #130	; 0x82
 80056aa:	6861      	ldr	r1, [r4, #4]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d100      	bne.n	80056b4 <HAL_SPI_Receive+0xf4>
 80056b2:	e091      	b.n	80057d8 <HAL_SPI_Receive+0x218>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056b4:	2680      	movs	r6, #128	; 0x80
 80056b6:	1c6b      	adds	r3, r5, #1
 80056b8:	d13d      	bne.n	8005736 <HAL_SPI_Receive+0x176>
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	6893      	ldr	r3, [r2, #8]
 80056be:	4219      	tst	r1, r3
 80056c0:	d1fc      	bne.n	80056bc <HAL_SPI_Receive+0xfc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c2:	2382      	movs	r3, #130	; 0x82
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4299      	cmp	r1, r3
 80056ca:	d100      	bne.n	80056ce <HAL_SPI_Receive+0x10e>
 80056cc:	e093      	b.n	80057f6 <HAL_SPI_Receive+0x236>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80056d0:	1e43      	subs	r3, r0, #1
 80056d2:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 80056d4:	b2c0      	uxtb	r0, r0
error :
 80056d6:	e791      	b.n	80055fc <HAL_SPI_Receive+0x3c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056d8:	6883      	ldr	r3, [r0, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d000      	beq.n	80056e0 <HAL_SPI_Receive+0x120>
 80056de:	e77d      	b.n	80055dc <HAL_SPI_Receive+0x1c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056e0:	2204      	movs	r2, #4
 80056e2:	335d      	adds	r3, #93	; 0x5d
 80056e4:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056e6:	0033      	movs	r3, r6
 80056e8:	000a      	movs	r2, r1
 80056ea:	9500      	str	r5, [sp, #0]
 80056ec:	f7ff fde0 	bl	80052b0 <HAL_SPI_TransmitReceive>
 80056f0:	e78a      	b.n	8005608 <HAL_SPI_Receive+0x48>
  __HAL_LOCK(hspi);
 80056f2:	2002      	movs	r0, #2
 80056f4:	e788      	b.n	8005608 <HAL_SPI_Receive+0x48>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056f6:	68d1      	ldr	r1, [r2, #12]
 80056f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056fa:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056fc:	3302      	adds	r3, #2
 80056fe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005700:	5ba3      	ldrh	r3, [r4, r6]
 8005702:	3b01      	subs	r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	53a3      	strh	r3, [r4, r6]
    while (hspi->RxXferCount > 0U)
 8005708:	5ba3      	ldrh	r3, [r4, r6]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0cc      	beq.n	80056a8 <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800570e:	4641      	mov	r1, r8
 8005710:	6893      	ldr	r3, [r2, #8]
 8005712:	4219      	tst	r1, r3
 8005714:	d1ef      	bne.n	80056f6 <HAL_SPI_Receive+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005716:	f7fe fdb7 	bl	8004288 <HAL_GetTick>
 800571a:	1bc0      	subs	r0, r0, r7
 800571c:	42a8      	cmp	r0, r5
 800571e:	d301      	bcc.n	8005724 <HAL_SPI_Receive+0x164>
          errorcode = HAL_TIMEOUT;
 8005720:	2003      	movs	r0, #3
 8005722:	e76b      	b.n	80055fc <HAL_SPI_Receive+0x3c>
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	e7ef      	b.n	8005708 <HAL_SPI_Receive+0x148>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005728:	f7fe fdae 	bl	8004288 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800572c:	5ba3      	ldrh	r3, [r4, r6]
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1a9      	bne.n	8005688 <HAL_SPI_Receive+0xc8>
 8005734:	e7b8      	b.n	80056a8 <HAL_SPI_Receive+0xe8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	6893      	ldr	r3, [r2, #8]
 8005738:	421e      	tst	r6, r3
 800573a:	d0c2      	beq.n	80056c2 <HAL_SPI_Receive+0x102>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800573c:	f7fe fda4 	bl	8004288 <HAL_GetTick>
 8005740:	1bc0      	subs	r0, r0, r7
 8005742:	4285      	cmp	r5, r0
 8005744:	d800      	bhi.n	8005748 <HAL_SPI_Receive+0x188>
 8005746:	e07b      	b.n	8005840 <HAL_SPI_Receive+0x280>
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	e7b4      	b.n	80056b6 <HAL_SPI_Receive+0xf6>
    while (hspi->RxXferCount > 0U)
 800574c:	2346      	movs	r3, #70	; 0x46
 800574e:	5ae3      	ldrh	r3, [r4, r3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0a9      	beq.n	80056a8 <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005754:	2301      	movs	r3, #1
        hspi->RxXferCount--;
 8005756:	2646      	movs	r6, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005758:	4698      	mov	r8, r3
 800575a:	1c6b      	adds	r3, r5, #1
 800575c:	d12a      	bne.n	80057b4 <HAL_SPI_Receive+0x1f4>
 800575e:	4641      	mov	r1, r8
 8005760:	6893      	ldr	r3, [r2, #8]
 8005762:	4219      	tst	r1, r3
 8005764:	d011      	beq.n	800578a <HAL_SPI_Receive+0x1ca>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005766:	7b13      	ldrb	r3, [r2, #12]
 8005768:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800576a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800576c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800576e:	3301      	adds	r3, #1
 8005770:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005772:	5ba3      	ldrh	r3, [r4, r6]
 8005774:	3b01      	subs	r3, #1
 8005776:	b29b      	uxth	r3, r3
 8005778:	53a3      	strh	r3, [r4, r6]
    while (hspi->RxXferCount > 0U)
 800577a:	5ba3      	ldrh	r3, [r4, r6]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <HAL_SPI_Receive+0x1d4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005780:	4641      	mov	r1, r8
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	6893      	ldr	r3, [r2, #8]
 8005786:	4219      	tst	r1, r3
 8005788:	d1ed      	bne.n	8005766 <HAL_SPI_Receive+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fe fd7d 	bl	8004288 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800578e:	5ba3      	ldrh	r3, [r4, r6]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f5      	bne.n	8005780 <HAL_SPI_Receive+0x1c0>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	e787      	b.n	80056a8 <HAL_SPI_Receive+0xe8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005798:	7b13      	ldrb	r3, [r2, #12]
 800579a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800579c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800579e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057a0:	3301      	adds	r3, #1
 80057a2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80057a4:	5ba3      	ldrh	r3, [r4, r6]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	53a3      	strh	r3, [r4, r6]
    while (hspi->RxXferCount > 0U)
 80057ac:	5ba3      	ldrh	r3, [r4, r6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_SPI_Receive+0x1d4>
 80057b2:	6822      	ldr	r2, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057b4:	4641      	mov	r1, r8
 80057b6:	6893      	ldr	r3, [r2, #8]
 80057b8:	4219      	tst	r1, r3
 80057ba:	d1ed      	bne.n	8005798 <HAL_SPI_Receive+0x1d8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057bc:	f7fe fd64 	bl	8004288 <HAL_GetTick>
 80057c0:	1bc0      	subs	r0, r0, r7
 80057c2:	42a8      	cmp	r0, r5
 80057c4:	d3f2      	bcc.n	80057ac <HAL_SPI_Receive+0x1ec>
          errorcode = HAL_TIMEOUT;
 80057c6:	2003      	movs	r0, #3
 80057c8:	e718      	b.n	80055fc <HAL_SPI_Receive+0x3c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ca:	2180      	movs	r1, #128	; 0x80
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	0149      	lsls	r1, r1, #5
 80057d0:	6850      	ldr	r0, [r2, #4]
 80057d2:	4301      	orrs	r1, r0
 80057d4:	6051      	str	r1, [r2, #4]
 80057d6:	e73a      	b.n	800564e <HAL_SPI_Receive+0x8e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d8:	2180      	movs	r1, #128	; 0x80
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	0209      	lsls	r1, r1, #8
 80057de:	428b      	cmp	r3, r1
 80057e0:	d004      	beq.n	80057ec <HAL_SPI_Receive+0x22c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	00c9      	lsls	r1, r1, #3
 80057e6:	428b      	cmp	r3, r1
 80057e8:	d000      	beq.n	80057ec <HAL_SPI_Receive+0x22c>
 80057ea:	e763      	b.n	80056b4 <HAL_SPI_Receive+0xf4>
    __HAL_SPI_DISABLE(hspi);
 80057ec:	2140      	movs	r1, #64	; 0x40
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	438b      	bics	r3, r1
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e75e      	b.n	80056b4 <HAL_SPI_Receive+0xf4>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	0209      	lsls	r1, r1, #8
 80057fc:	428b      	cmp	r3, r1
 80057fe:	d004      	beq.n	800580a <HAL_SPI_Receive+0x24a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	00c9      	lsls	r1, r1, #3
 8005804:	428b      	cmp	r3, r1
 8005806:	d000      	beq.n	800580a <HAL_SPI_Receive+0x24a>
 8005808:	e761      	b.n	80056ce <HAL_SPI_Receive+0x10e>
  while ((hspi->Instance->SR & Fifo) != State)
 800580a:	26c0      	movs	r6, #192	; 0xc0
 800580c:	00f6      	lsls	r6, r6, #3
 800580e:	1c6b      	adds	r3, r5, #1
 8005810:	d10a      	bne.n	8005828 <HAL_SPI_Receive+0x268>
 8005812:	21c0      	movs	r1, #192	; 0xc0
 8005814:	6893      	ldr	r3, [r2, #8]
 8005816:	00c9      	lsls	r1, r1, #3
 8005818:	420b      	tst	r3, r1
 800581a:	d100      	bne.n	800581e <HAL_SPI_Receive+0x25e>
 800581c:	e757      	b.n	80056ce <HAL_SPI_Receive+0x10e>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800581e:	7b13      	ldrb	r3, [r2, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8005820:	6893      	ldr	r3, [r2, #8]
 8005822:	420b      	tst	r3, r1
 8005824:	d1fb      	bne.n	800581e <HAL_SPI_Receive+0x25e>
 8005826:	e752      	b.n	80056ce <HAL_SPI_Receive+0x10e>
 8005828:	6893      	ldr	r3, [r2, #8]
 800582a:	4233      	tst	r3, r6
 800582c:	d100      	bne.n	8005830 <HAL_SPI_Receive+0x270>
 800582e:	e74e      	b.n	80056ce <HAL_SPI_Receive+0x10e>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005830:	7b13      	ldrb	r3, [r2, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005832:	f7fe fd29 	bl	8004288 <HAL_GetTick>
 8005836:	1bc0      	subs	r0, r0, r7
 8005838:	4285      	cmp	r5, r0
 800583a:	d901      	bls.n	8005840 <HAL_SPI_Receive+0x280>
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	e7e6      	b.n	800580e <HAL_SPI_Receive+0x24e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005840:	21e0      	movs	r1, #224	; 0xe0
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	438a      	bics	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584a:	2282      	movs	r2, #130	; 0x82
 800584c:	6861      	ldr	r1, [r4, #4]
 800584e:	0052      	lsls	r2, r2, #1
 8005850:	4291      	cmp	r1, r2
 8005852:	d015      	beq.n	8005880 <HAL_SPI_Receive+0x2c0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005858:	0189      	lsls	r1, r1, #6
 800585a:	428a      	cmp	r2, r1
 800585c:	d106      	bne.n	800586c <HAL_SPI_Receive+0x2ac>
          SPI_RESET_CRC(hspi);
 800585e:	6819      	ldr	r1, [r3, #0]
 8005860:	4810      	ldr	r0, [pc, #64]	; (80058a4 <HAL_SPI_Receive+0x2e4>)
 8005862:	4001      	ands	r1, r0
 8005864:	6019      	str	r1, [r3, #0]
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800586c:	235d      	movs	r3, #93	; 0x5d
 800586e:	2201      	movs	r2, #1
 8005870:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005872:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005874:	321f      	adds	r2, #31
 8005876:	4313      	orrs	r3, r2
 8005878:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800587a:	2320      	movs	r3, #32
 800587c:	6623      	str	r3, [r4, #96]	; 0x60
 800587e:	e726      	b.n	80056ce <HAL_SPI_Receive+0x10e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	68a2      	ldr	r2, [r4, #8]
 8005884:	0209      	lsls	r1, r1, #8
 8005886:	428a      	cmp	r2, r1
 8005888:	d003      	beq.n	8005892 <HAL_SPI_Receive+0x2d2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	00c9      	lsls	r1, r1, #3
 800588e:	428a      	cmp	r2, r1
 8005890:	d1e0      	bne.n	8005854 <HAL_SPI_Receive+0x294>
          __HAL_SPI_DISABLE(hspi);
 8005892:	2140      	movs	r1, #64	; 0x40
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	438a      	bics	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e7db      	b.n	8005854 <HAL_SPI_Receive+0x294>
 800589c:	ffffefff 	.word	0xffffefff
 80058a0:	ffffbfff 	.word	0xffffbfff
 80058a4:	ffffdfff 	.word	0xffffdfff

080058a8 <HAL_SPI_ErrorCallback>:
 80058a8:	4770      	bx	lr
 80058aa:	46c0      	nop			; (mov r8, r8)

080058ac <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058ac:	2101      	movs	r1, #1
{
 80058ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058b0:	000e      	movs	r6, r1
  uint32_t itsource = hspi->Instance->CR2;
 80058b2:	6802      	ldr	r2, [r0, #0]
{
 80058b4:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80058b6:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80058b8:	6893      	ldr	r3, [r2, #8]
{
 80058ba:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058bc:	0998      	lsrs	r0, r3, #6
 80058be:	4006      	ands	r6, r0
 80058c0:	4201      	tst	r1, r0
 80058c2:	d105      	bne.n	80058d0 <HAL_SPI_IRQHandler+0x24>
 80058c4:	4219      	tst	r1, r3
 80058c6:	d003      	beq.n	80058d0 <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058c8:	09a8      	lsrs	r0, r5, #6
 80058ca:	4201      	tst	r1, r0
 80058cc:	d000      	beq.n	80058d0 <HAL_SPI_IRQHandler+0x24>
 80058ce:	e088      	b.n	80059e2 <HAL_SPI_IRQHandler+0x136>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058d0:	2101      	movs	r1, #1
 80058d2:	0798      	lsls	r0, r3, #30
 80058d4:	d503      	bpl.n	80058de <HAL_SPI_IRQHandler+0x32>
 80058d6:	09e8      	lsrs	r0, r5, #7
 80058d8:	4201      	tst	r1, r0
 80058da:	d000      	beq.n	80058de <HAL_SPI_IRQHandler+0x32>
 80058dc:	e07d      	b.n	80059da <HAL_SPI_IRQHandler+0x12e>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058de:	2001      	movs	r0, #1
 80058e0:	0007      	movs	r7, r0
 80058e2:	0959      	lsrs	r1, r3, #5
 80058e4:	400f      	ands	r7, r1
 80058e6:	4208      	tst	r0, r1
 80058e8:	d051      	beq.n	800598e <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80058ea:	0969      	lsrs	r1, r5, #5
 80058ec:	4208      	tst	r0, r1
 80058ee:	d04c      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	d00f      	beq.n	8005914 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058f4:	215d      	movs	r1, #93	; 0x5d
 80058f6:	5c61      	ldrb	r1, [r4, r1]
 80058f8:	2903      	cmp	r1, #3
 80058fa:	d100      	bne.n	80058fe <HAL_SPI_IRQHandler+0x52>
 80058fc:	e075      	b.n	80059ea <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058fe:	2004      	movs	r0, #4
 8005900:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005902:	4301      	orrs	r1, r0
 8005904:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005906:	2100      	movs	r1, #0
 8005908:	9100      	str	r1, [sp, #0]
 800590a:	68d1      	ldr	r1, [r2, #12]
 800590c:	9100      	str	r1, [sp, #0]
 800590e:	6891      	ldr	r1, [r2, #8]
 8005910:	9100      	str	r1, [sp, #0]
 8005912:	9900      	ldr	r1, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005914:	2001      	movs	r0, #1
 8005916:	6e21      	ldr	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005918:	2640      	movs	r6, #64	; 0x40
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800591a:	4301      	orrs	r1, r0
 800591c:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800591e:	2100      	movs	r1, #0
 8005920:	9102      	str	r1, [sp, #8]
 8005922:	6891      	ldr	r1, [r2, #8]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	9102      	str	r1, [sp, #8]
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	4018      	ands	r0, r3
 800592c:	43b1      	bics	r1, r6
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005932:	2800      	cmp	r0, #0
 8005934:	d147      	bne.n	80059c6 <HAL_SPI_IRQHandler+0x11a>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005936:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005938:	2b00      	cmp	r3, #0
 800593a:	d026      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800593c:	21e0      	movs	r1, #224	; 0xe0
 800593e:	6853      	ldr	r3, [r2, #4]
 8005940:	438b      	bics	r3, r1
 8005942:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005944:	235d      	movs	r3, #93	; 0x5d
 8005946:	39df      	subs	r1, #223	; 0xdf
 8005948:	54e1      	strb	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800594a:	3102      	adds	r1, #2
 800594c:	4229      	tst	r1, r5
 800594e:	d054      	beq.n	80059fa <HAL_SPI_IRQHandler+0x14e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005950:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005952:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005954:	438b      	bics	r3, r1
 8005956:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005958:	2800      	cmp	r0, #0
 800595a:	d009      	beq.n	8005970 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800595c:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <HAL_SPI_IRQHandler+0x158>)
 800595e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005960:	f7fe fd36 	bl	80043d0 <HAL_DMA_Abort_IT>
 8005964:	2800      	cmp	r0, #0
 8005966:	d003      	beq.n	8005970 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005968:	2240      	movs	r2, #64	; 0x40
 800596a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800596c:	4313      	orrs	r3, r2
 800596e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005972:	2800      	cmp	r0, #0
 8005974:	d009      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005976:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <HAL_SPI_IRQHandler+0x158>)
 8005978:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800597a:	f7fe fd29 	bl	80043d0 <HAL_DMA_Abort_IT>
 800597e:	2800      	cmp	r0, #0
 8005980:	d003      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005982:	2240      	movs	r2, #64	; 0x40
 8005984:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005986:	4313      	orrs	r3, r2
 8005988:	6623      	str	r3, [r4, #96]	; 0x60
}
 800598a:	b005      	add	sp, #20
 800598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800598e:	2e00      	cmp	r6, #0
 8005990:	d013      	beq.n	80059ba <HAL_SPI_IRQHandler+0x10e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005992:	0969      	lsrs	r1, r5, #5
 8005994:	4208      	tst	r0, r1
 8005996:	d0f8      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005998:	215d      	movs	r1, #93	; 0x5d
 800599a:	5c61      	ldrb	r1, [r4, r1]
 800599c:	2903      	cmp	r1, #3
 800599e:	d024      	beq.n	80059ea <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059a0:	2604      	movs	r6, #4
 80059a2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	4331      	orrs	r1, r6
 80059a8:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059aa:	9700      	str	r7, [sp, #0]
 80059ac:	68d1      	ldr	r1, [r2, #12]
 80059ae:	4018      	ands	r0, r3
 80059b0:	9100      	str	r1, [sp, #0]
 80059b2:	6891      	ldr	r1, [r2, #8]
 80059b4:	9100      	str	r1, [sp, #0]
 80059b6:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80059b8:	e7bb      	b.n	8005932 <HAL_SPI_IRQHandler+0x86>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	4218      	tst	r0, r3
 80059be:	d0e4      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
 80059c0:	096b      	lsrs	r3, r5, #5
 80059c2:	4218      	tst	r0, r3
 80059c4:	d0e1      	beq.n	800598a <HAL_SPI_IRQHandler+0xde>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059c6:	2108      	movs	r1, #8
 80059c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059ca:	430b      	orrs	r3, r1
 80059cc:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80059ce:	2300      	movs	r3, #0
 80059d0:	9303      	str	r3, [sp, #12]
 80059d2:	6893      	ldr	r3, [r2, #8]
 80059d4:	9303      	str	r3, [sp, #12]
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	e7ad      	b.n	8005936 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 80059da:	0020      	movs	r0, r4
 80059dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80059de:	4798      	blx	r3
    return;
 80059e0:	e7d3      	b.n	800598a <HAL_SPI_IRQHandler+0xde>
    hspi->RxISR(hspi);
 80059e2:	0020      	movs	r0, r4
 80059e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80059e6:	4798      	blx	r3
    return;
 80059e8:	e7cf      	b.n	800598a <HAL_SPI_IRQHandler+0xde>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ea:	2300      	movs	r3, #0
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	68d3      	ldr	r3, [r2, #12]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	6893      	ldr	r3, [r2, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	9b01      	ldr	r3, [sp, #4]
        return;
 80059f8:	e7c7      	b.n	800598a <HAL_SPI_IRQHandler+0xde>
        HAL_SPI_ErrorCallback(hspi);
 80059fa:	0020      	movs	r0, r4
 80059fc:	f7ff ff54 	bl	80058a8 <HAL_SPI_ErrorCallback>
 8005a00:	e7c3      	b.n	800598a <HAL_SPI_IRQHandler+0xde>
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	08005a09 	.word	0x08005a09

08005a08 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2246      	movs	r2, #70	; 0x46
{
 8005a0c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8005a10:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8005a12:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005a14:	f7ff ff48 	bl	80058a8 <HAL_SPI_ErrorCallback>
}
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)

08005a1c <HAL_SPI_GetState>:
  return hspi->State;
 8005a1c:	235d      	movs	r3, #93	; 0x5d
 8005a1e:	5cc0      	ldrb	r0, [r0, r3]
 8005a20:	b2c0      	uxtb	r0, r0
}
 8005a22:	4770      	bx	lr

08005a24 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a24:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005a26:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a28:	07da      	lsls	r2, r3, #31
 8005a2a:	d506      	bpl.n	8005a3a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a2c:	6801      	ldr	r1, [r0, #0]
 8005a2e:	4c28      	ldr	r4, [pc, #160]	; (8005ad0 <UART_AdvFeatureConfig+0xac>)
 8005a30:	684a      	ldr	r2, [r1, #4]
 8005a32:	4022      	ands	r2, r4
 8005a34:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005a36:	4322      	orrs	r2, r4
 8005a38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a3a:	079a      	lsls	r2, r3, #30
 8005a3c:	d506      	bpl.n	8005a4c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a3e:	6801      	ldr	r1, [r0, #0]
 8005a40:	4c24      	ldr	r4, [pc, #144]	; (8005ad4 <UART_AdvFeatureConfig+0xb0>)
 8005a42:	684a      	ldr	r2, [r1, #4]
 8005a44:	4022      	ands	r2, r4
 8005a46:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005a48:	4322      	orrs	r2, r4
 8005a4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a4c:	075a      	lsls	r2, r3, #29
 8005a4e:	d506      	bpl.n	8005a5e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a50:	6801      	ldr	r1, [r0, #0]
 8005a52:	4c21      	ldr	r4, [pc, #132]	; (8005ad8 <UART_AdvFeatureConfig+0xb4>)
 8005a54:	684a      	ldr	r2, [r1, #4]
 8005a56:	4022      	ands	r2, r4
 8005a58:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005a5a:	4322      	orrs	r2, r4
 8005a5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a5e:	071a      	lsls	r2, r3, #28
 8005a60:	d506      	bpl.n	8005a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a62:	6801      	ldr	r1, [r0, #0]
 8005a64:	4c1d      	ldr	r4, [pc, #116]	; (8005adc <UART_AdvFeatureConfig+0xb8>)
 8005a66:	684a      	ldr	r2, [r1, #4]
 8005a68:	4022      	ands	r2, r4
 8005a6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a6c:	4322      	orrs	r2, r4
 8005a6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a70:	06da      	lsls	r2, r3, #27
 8005a72:	d506      	bpl.n	8005a82 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a74:	6801      	ldr	r1, [r0, #0]
 8005a76:	4c1a      	ldr	r4, [pc, #104]	; (8005ae0 <UART_AdvFeatureConfig+0xbc>)
 8005a78:	688a      	ldr	r2, [r1, #8]
 8005a7a:	4022      	ands	r2, r4
 8005a7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a7e:	4322      	orrs	r2, r4
 8005a80:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a82:	069a      	lsls	r2, r3, #26
 8005a84:	d506      	bpl.n	8005a94 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a86:	6801      	ldr	r1, [r0, #0]
 8005a88:	4c16      	ldr	r4, [pc, #88]	; (8005ae4 <UART_AdvFeatureConfig+0xc0>)
 8005a8a:	688a      	ldr	r2, [r1, #8]
 8005a8c:	4022      	ands	r2, r4
 8005a8e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a90:	4322      	orrs	r2, r4
 8005a92:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a94:	065a      	lsls	r2, r3, #25
 8005a96:	d50a      	bpl.n	8005aae <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a98:	6801      	ldr	r1, [r0, #0]
 8005a9a:	4d13      	ldr	r5, [pc, #76]	; (8005ae8 <UART_AdvFeatureConfig+0xc4>)
 8005a9c:	684a      	ldr	r2, [r1, #4]
 8005a9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005aa0:	402a      	ands	r2, r5
 8005aa2:	4322      	orrs	r2, r4
 8005aa4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	0352      	lsls	r2, r2, #13
 8005aaa:	4294      	cmp	r4, r2
 8005aac:	d009      	beq.n	8005ac2 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	d506      	bpl.n	8005ac0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab2:	6802      	ldr	r2, [r0, #0]
 8005ab4:	490d      	ldr	r1, [pc, #52]	; (8005aec <UART_AdvFeatureConfig+0xc8>)
 8005ab6:	6853      	ldr	r3, [r2, #4]
 8005ab8:	400b      	ands	r3, r1
 8005aba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6053      	str	r3, [r2, #4]
  }
}
 8005ac0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac2:	684a      	ldr	r2, [r1, #4]
 8005ac4:	4c0a      	ldr	r4, [pc, #40]	; (8005af0 <UART_AdvFeatureConfig+0xcc>)
 8005ac6:	4022      	ands	r2, r4
 8005ac8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005aca:	4322      	orrs	r2, r4
 8005acc:	604a      	str	r2, [r1, #4]
 8005ace:	e7ee      	b.n	8005aae <UART_AdvFeatureConfig+0x8a>
 8005ad0:	fffdffff 	.word	0xfffdffff
 8005ad4:	fffeffff 	.word	0xfffeffff
 8005ad8:	fffbffff 	.word	0xfffbffff
 8005adc:	ffff7fff 	.word	0xffff7fff
 8005ae0:	ffffefff 	.word	0xffffefff
 8005ae4:	ffffdfff 	.word	0xffffdfff
 8005ae8:	ffefffff 	.word	0xffefffff
 8005aec:	fff7ffff 	.word	0xfff7ffff
 8005af0:	ff9fffff 	.word	0xff9fffff

08005af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	2300      	movs	r3, #0
{
 8005af8:	46c6      	mov	lr, r8
 8005afa:	0004      	movs	r4, r0
 8005afc:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afe:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b00:	f7fe fbc2 	bl	8004288 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b04:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005b06:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	0712      	lsls	r2, r2, #28
 8005b0c:	d40c      	bmi.n	8005b28 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	0752      	lsls	r2, r2, #29
 8005b12:	d432      	bmi.n	8005b7a <UART_CheckIdleState+0x86>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b14:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8005b16:	2200      	movs	r2, #0

  return HAL_OK;
 8005b18:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b1a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005b1e:	3350      	adds	r3, #80	; 0x50
 8005b20:	54e2      	strb	r2, [r4, r3]
}
 8005b22:	bc80      	pop	{r7}
 8005b24:	46b8      	mov	r8, r7
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	0292      	lsls	r2, r2, #10
 8005b2c:	d4ef      	bmi.n	8005b0e <UART_CheckIdleState+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b30:	2680      	movs	r6, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b32:	049b      	lsls	r3, r3, #18
 8005b34:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b36:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b38:	0136      	lsls	r6, r6, #4
 8005b3a:	e007      	b.n	8005b4c <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b3c:	4217      	tst	r7, r2
 8005b3e:	d002      	beq.n	8005b46 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b40:	69da      	ldr	r2, [r3, #28]
 8005b42:	4232      	tst	r2, r6
 8005b44:	d133      	bne.n	8005bae <UART_CheckIdleState+0xba>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	0292      	lsls	r2, r2, #10
 8005b4a:	d4e0      	bmi.n	8005b0e <UART_CheckIdleState+0x1a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4c:	f7fe fb9c 	bl	8004288 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b50:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b54:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	4540      	cmp	r0, r8
 8005b58:	d3f0      	bcc.n	8005b3c <UART_CheckIdleState+0x48>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b5a:	491e      	ldr	r1, [pc, #120]	; (8005bd4 <UART_CheckIdleState+0xe0>)
      return HAL_TIMEOUT;
 8005b5c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b5e:	400a      	ands	r2, r1
 8005b60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	31a3      	adds	r1, #163	; 0xa3
 8005b66:	31ff      	adds	r1, #255	; 0xff
 8005b68:	438a      	bics	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005b6c:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8005b6e:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8005b70:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b72:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005b74:	3350      	adds	r3, #80	; 0x50
 8005b76:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8005b78:	e7d3      	b.n	8005b22 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	025b      	lsls	r3, r3, #9
 8005b7e:	d4c9      	bmi.n	8005b14 <UART_CheckIdleState+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b80:	2380      	movs	r3, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b82:	2680      	movs	r6, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b84:	049b      	lsls	r3, r3, #18
 8005b86:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b88:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b8a:	0136      	lsls	r6, r6, #4
 8005b8c:	e007      	b.n	8005b9e <UART_CheckIdleState+0xaa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b8e:	4217      	tst	r7, r2
 8005b90:	d002      	beq.n	8005b98 <UART_CheckIdleState+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	4232      	tst	r2, r6
 8005b96:	d10a      	bne.n	8005bae <UART_CheckIdleState+0xba>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	025b      	lsls	r3, r3, #9
 8005b9c:	d4ba      	bmi.n	8005b14 <UART_CheckIdleState+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fe fb73 	bl	8004288 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba4:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba8:	4540      	cmp	r0, r8
 8005baa:	d3f0      	bcc.n	8005b8e <UART_CheckIdleState+0x9a>
 8005bac:	e7d5      	b.n	8005b5a <UART_CheckIdleState+0x66>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bae:	621e      	str	r6, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4908      	ldr	r1, [pc, #32]	; (8005bd4 <UART_CheckIdleState+0xe0>)
      return HAL_TIMEOUT;
 8005bb4:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb6:	400a      	ands	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	31a3      	adds	r1, #163	; 0xa3
 8005bbe:	31ff      	adds	r1, #255	; 0xff
 8005bc0:	438a      	bics	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bc4:	2320      	movs	r3, #32
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc6:	2200      	movs	r2, #0
          huart->gState = HAL_UART_STATE_READY;
 8005bc8:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005bca:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bcc:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005bce:	3350      	adds	r3, #80	; 0x50
 8005bd0:	54e2      	strb	r2, [r4, r3]
          
          return HAL_TIMEOUT;
 8005bd2:	e7a6      	b.n	8005b22 <UART_CheckIdleState+0x2e>
 8005bd4:	fffffe5f 	.word	0xfffffe5f

08005bd8 <HAL_UART_Init>:
{
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005bdc:	d100      	bne.n	8005be0 <HAL_UART_Init+0x8>
 8005bde:	e0a3      	b.n	8005d28 <HAL_UART_Init+0x150>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005be0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d05d      	beq.n	8005ca2 <HAL_UART_Init+0xca>
  huart->gState = HAL_UART_STATE_BUSY;
 8005be6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005be8:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8005bea:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005bec:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bee:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8005bf0:	681a      	ldr	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf2:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8005bf4:	438a      	bics	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bfa:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bfc:	432a      	orrs	r2, r5
 8005bfe:	6965      	ldr	r5, [r4, #20]
 8005c00:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c02:	4d5c      	ldr	r5, [pc, #368]	; (8005d74 <HAL_UART_Init+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c04:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c06:	4029      	ands	r1, r5
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	495a      	ldr	r1, [pc, #360]	; (8005d78 <HAL_UART_Init+0x1a0>)
  tmpreg |= huart->Init.OneBitSampling;
 8005c10:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c12:	400a      	ands	r2, r1
 8005c14:	68e1      	ldr	r1, [r4, #12]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8005c1a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c1c:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005c1e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c20:	4d56      	ldr	r5, [pc, #344]	; (8005d7c <HAL_UART_Init+0x1a4>)
 8005c22:	4029      	ands	r1, r5
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c28:	4a55      	ldr	r2, [pc, #340]	; (8005d80 <HAL_UART_Init+0x1a8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <HAL_UART_Init+0x66>
 8005c2e:	4a55      	ldr	r2, [pc, #340]	; (8005d84 <HAL_UART_Init+0x1ac>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <HAL_UART_Init+0x74>
  huart->RxISR = NULL;
 8005c34:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005c36:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005c38:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005c3a:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3e:	4b52      	ldr	r3, [pc, #328]	; (8005d88 <HAL_UART_Init+0x1b0>)
 8005c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c42:	2303      	movs	r3, #3
 8005c44:	4013      	ands	r3, r2
 8005c46:	3b01      	subs	r3, #1
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d92f      	bls.n	8005cac <HAL_UART_Init+0xd4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	4298      	cmp	r0, r3
 8005c52:	d03e      	beq.n	8005cd2 <HAL_UART_Init+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c54:	f7ff f88c 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	1818      	adds	r0, r3, r0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c5e:	6861      	ldr	r1, [r4, #4]
 8005c60:	f7fa fa5a 	bl	8000118 <__udivsi3>
 8005c64:	0400      	lsls	r0, r0, #16
 8005c66:	0c00      	lsrs	r0, r0, #16
        break;
 8005c68:	0003      	movs	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c6a:	4a48      	ldr	r2, [pc, #288]	; (8005d8c <HAL_UART_Init+0x1b4>)
 8005c6c:	3b10      	subs	r3, #16
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d8e0      	bhi.n	8005c34 <HAL_UART_Init+0x5c>
  huart->RxISR = NULL;
 8005c72:	2200      	movs	r2, #0
      huart->Instance->BRR = usartdiv;
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8005c78:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005c7a:	6662      	str	r2, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d145      	bne.n	8005d0e <HAL_UART_Init+0x136>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	4942      	ldr	r1, [pc, #264]	; (8005d90 <HAL_UART_Init+0x1b8>)
  return (UART_CheckIdleState(huart));
 8005c86:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005c88:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c8a:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	438a      	bics	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	3907      	subs	r1, #7
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005c9c:	f7ff ff2a 	bl	8005af4 <UART_CheckIdleState>
 8005ca0:	e7cc      	b.n	8005c3c <HAL_UART_Init+0x64>
    huart->Lock = HAL_UNLOCKED;
 8005ca2:	2270      	movs	r2, #112	; 0x70
 8005ca4:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005ca6:	f7fd fe8d 	bl	80039c4 <HAL_UART_MspInit>
 8005caa:	e79c      	b.n	8005be6 <HAL_UART_Init+0xe>
 8005cac:	4a39      	ldr	r2, [pc, #228]	; (8005d94 <HAL_UART_Init+0x1bc>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	0212      	lsls	r2, r2, #8
 8005cb4:	4290      	cmp	r0, r2
 8005cb6:	d03f      	beq.n	8005d38 <HAL_UART_Init+0x160>
    switch (clocksource)
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d037      	beq.n	8005d2c <HAL_UART_Init+0x154>
 8005cbc:	d82c      	bhi.n	8005d18 <HAL_UART_Init+0x140>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0c8      	beq.n	8005c54 <HAL_UART_Init+0x7c>
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d1b6      	bne.n	8005c34 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	0858      	lsrs	r0, r3, #1
 8005cca:	4b33      	ldr	r3, [pc, #204]	; (8005d98 <HAL_UART_Init+0x1c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005ccc:	469c      	mov	ip, r3
 8005cce:	4460      	add	r0, ip
 8005cd0:	e7c5      	b.n	8005c5e <HAL_UART_Init+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd2:	f7ff f84d 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	0040      	lsls	r0, r0, #1
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005cde:	6861      	ldr	r1, [r4, #4]
 8005ce0:	f7fa fa1a 	bl	8000118 <__udivsi3>
 8005ce4:	0400      	lsls	r0, r0, #16
 8005ce6:	0c00      	lsrs	r0, r0, #16
        break;
 8005ce8:	0003      	movs	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cea:	4a28      	ldr	r2, [pc, #160]	; (8005d8c <HAL_UART_Init+0x1b4>)
 8005cec:	3b10      	subs	r3, #16
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d8a0      	bhi.n	8005c34 <HAL_UART_Init+0x5c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf2:	230f      	movs	r3, #15
 8005cf4:	0002      	movs	r2, r0
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf6:	0700      	lsls	r0, r0, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf8:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cfa:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8005cfc:	4310      	orrs	r0, r2
  huart->RxISR = NULL;
 8005cfe:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8005d04:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005d06:	6662      	str	r2, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	d0b9      	beq.n	8005c82 <HAL_UART_Init+0xaa>
    UART_AdvFeatureConfig(huart);
 8005d0e:	0020      	movs	r0, r4
 8005d10:	f7ff fe88 	bl	8005a24 <UART_AdvFeatureConfig>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	e7b4      	b.n	8005c82 <HAL_UART_Init+0xaa>
    switch (clocksource)
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d000      	beq.n	8005d1e <HAL_UART_Init+0x146>
 8005d1c:	e78a      	b.n	8005c34 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	0858      	lsrs	r0, r3, #1
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	e7d1      	b.n	8005ccc <HAL_UART_Init+0xf4>
    return HAL_ERROR;
 8005d28:	2001      	movs	r0, #1
 8005d2a:	e787      	b.n	8005c3c <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2c:	f7fe ffe8 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	1818      	adds	r0, r3, r0
 8005d36:	e792      	b.n	8005c5e <HAL_UART_Init+0x86>
    switch (clocksource)
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d00b      	beq.n	8005d54 <HAL_UART_Init+0x17c>
 8005d3c:	d811      	bhi.n	8005d62 <HAL_UART_Init+0x18a>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0c7      	beq.n	8005cd2 <HAL_UART_Init+0xfa>
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d000      	beq.n	8005d48 <HAL_UART_Init+0x170>
 8005d46:	e775      	b.n	8005c34 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	0858      	lsrs	r0, r3, #1
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <HAL_UART_Init+0x1c4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d4e:	469c      	mov	ip, r3
 8005d50:	4460      	add	r0, ip
 8005d52:	e7c4      	b.n	8005cde <HAL_UART_Init+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d54:	f7fe ffd4 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	0040      	lsls	r0, r0, #1
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	18c0      	adds	r0, r0, r3
 8005d60:	e7bd      	b.n	8005cde <HAL_UART_Init+0x106>
    switch (clocksource)
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d000      	beq.n	8005d68 <HAL_UART_Init+0x190>
 8005d66:	e765      	b.n	8005c34 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	0858      	lsrs	r0, r3, #1
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	025b      	lsls	r3, r3, #9
 8005d70:	e7ed      	b.n	8005d4e <HAL_UART_Init+0x176>
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	ffff69f3 	.word	0xffff69f3
 8005d78:	ffffcfff 	.word	0xffffcfff
 8005d7c:	fffff4ff 	.word	0xfffff4ff
 8005d80:	40013800 	.word	0x40013800
 8005d84:	40004400 	.word	0x40004400
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	0000ffef 	.word	0x0000ffef
 8005d90:	fffff7ff 	.word	0xfffff7ff
 8005d94:	08008964 	.word	0x08008964
 8005d98:	007a1200 	.word	0x007a1200
 8005d9c:	00f42400 	.word	0x00f42400

08005da0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005da0:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005da2:	4903      	ldr	r1, [pc, #12]	; (8005db0 <MX_FATFS_Init+0x10>)
 8005da4:	4803      	ldr	r0, [pc, #12]	; (8005db4 <MX_FATFS_Init+0x14>)
 8005da6:	f002 f8bb 	bl	8007f20 <FATFS_LinkDriver>
 8005daa:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <MX_FATFS_Init+0x18>)
 8005dac:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005dae:	bd10      	pop	{r4, pc}
 8005db0:	200013d0 	.word	0x200013d0
 8005db4:	20000010 	.word	0x20000010
 8005db8:	200013d4 	.word	0x200013d4

08005dbc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	4770      	bx	lr

08005dc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005dc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005dc2:	f7fc fe1b 	bl	80029fc <SD_disk_initialize>
 8005dc6:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)

08005dcc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005dcc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005dce:	f7fc ff35 	bl	8002c3c <SD_disk_status>
 8005dd2:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)

08005dd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005dd8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005dda:	f7fc ff39 	bl	8002c50 <SD_disk_read>
 8005dde:	b2c0      	uxtb	r0, r0
  /* USER CODE END READ */
}
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)

08005de4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8005de4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005de6:	f7fd f831 	bl	8002e4c <SD_disk_write>
 8005dea:	b2c0      	uxtb	r0, r0
  /* USER CODE END WRITE */
}
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)

08005df0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005df0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005df2:	f7fd f907 	bl	8003004 <SD_disk_ioctl>
 8005df6:	b2c0      	uxtb	r0, r0
  /* USER CODE END IOCTL */
}
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)

08005dfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005dfc:	0003      	movs	r3, r0
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dfe:	4a05      	ldr	r2, [pc, #20]	; (8005e14 <disk_status+0x18>)
{
 8005e00:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	1811      	adds	r1, r2, r0
 8005e0a:	7a08      	ldrb	r0, [r1, #8]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4798      	blx	r3
  return stat;
}
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	20000070 	.word	0x20000070

08005e18 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8005e18:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <disk_initialize+0x24>)
{
 8005e1a:	0003      	movs	r3, r0
  if(disk.is_initialized[pdrv] == 0)
 8005e1c:	5c11      	ldrb	r1, [r2, r0]
{
 8005e1e:	b510      	push	{r4, lr}
  DSTATUS stat = RES_OK;
 8005e20:	2000      	movs	r0, #0
  if(disk.is_initialized[pdrv] == 0)
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d108      	bne.n	8005e38 <disk_initialize+0x20>
  { 
    disk.is_initialized[pdrv] = 1;
 8005e26:	3101      	adds	r1, #1
 8005e28:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e2a:	18d1      	adds	r1, r2, r3
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	18d3      	adds	r3, r2, r3
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	7a08      	ldrb	r0, [r1, #8]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4798      	blx	r3
  }
  return stat;
}
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	20000070 	.word	0x20000070

08005e40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	0004      	movs	r4, r0
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e44:	4d04      	ldr	r5, [pc, #16]	; (8005e58 <disk_read+0x18>)
 8005e46:	00a4      	lsls	r4, r4, #2
 8005e48:	192c      	adds	r4, r5, r4
 8005e4a:	6864      	ldr	r4, [r4, #4]
 8005e4c:	1828      	adds	r0, r5, r0
 8005e4e:	68a4      	ldr	r4, [r4, #8]
 8005e50:	7a00      	ldrb	r0, [r0, #8]
 8005e52:	47a0      	blx	r4
  return res;
}
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	20000070 	.word	0x20000070

08005e5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	0004      	movs	r4, r0
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e60:	4d04      	ldr	r5, [pc, #16]	; (8005e74 <disk_write+0x18>)
 8005e62:	00a4      	lsls	r4, r4, #2
 8005e64:	192c      	adds	r4, r5, r4
 8005e66:	6864      	ldr	r4, [r4, #4]
 8005e68:	1828      	adds	r0, r5, r0
 8005e6a:	68e4      	ldr	r4, [r4, #12]
 8005e6c:	7a00      	ldrb	r0, [r0, #8]
 8005e6e:	47a0      	blx	r4
  return res;
}
 8005e70:	bd70      	pop	{r4, r5, r6, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	20000070 	.word	0x20000070

08005e78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e78:	0003      	movs	r3, r0
 8005e7a:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e7c:	4c04      	ldr	r4, [pc, #16]	; (8005e90 <disk_ioctl+0x18>)
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	18e3      	adds	r3, r4, r3
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	1820      	adds	r0, r4, r0
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	7a00      	ldrb	r0, [r0, #8]
 8005e8a:	4798      	blx	r3
  return res;
}
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	20000070 	.word	0x20000070

08005e94 <move_window.part.0>:
}
#endif


static
FRESULT move_window (
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	4647      	mov	r7, r8
 8005e98:	46ce      	mov	lr, r9
 8005e9a:	b580      	push	{r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e9c:	2781      	movs	r7, #129	; 0x81
 8005e9e:	00bf      	lsls	r7, r7, #2
 8005ea0:	5dc3      	ldrb	r3, [r0, r7]
FRESULT move_window (
 8005ea2:	0004      	movs	r4, r0
 8005ea4:	000d      	movs	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d113      	bne.n	8005ed2 <move_window.part.0+0x3e>
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005eaa:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <move_window.part.0+0x98>)
 8005eac:	002a      	movs	r2, r5
 8005eae:	5ce0      	ldrb	r0, [r4, r3]
 8005eb0:	0021      	movs	r1, r4
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f7ff ffc4 	bl	8005e40 <disk_read>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d106      	bne.n	8005eca <move_window.part.0+0x36>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
 8005ebc:	238b      	movs	r3, #139	; 0x8b
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	50e5      	str	r5, [r4, r3]
		}
	}
	return res;
}
 8005ec2:	bcc0      	pop	{r6, r7}
 8005ec4:	46b9      	mov	r9, r7
 8005ec6:	46b0      	mov	r8, r6
 8005ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005eca:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8005ecc:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ece:	426d      	negs	r5, r5
 8005ed0:	e7f4      	b.n	8005ebc <move_window.part.0+0x28>
		wsect = fs->winsect;	/* Current sector number */
 8005ed2:	238b      	movs	r3, #139	; 0x8b
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	58c6      	ldr	r6, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <move_window.part.0+0x98>)
 8005eda:	0032      	movs	r2, r6
 8005edc:	5cc0      	ldrb	r0, [r0, r3]
 8005ede:	4698      	mov	r8, r3
 8005ee0:	0021      	movs	r1, r4
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f7ff ffba 	bl	8005e5c <disk_write>
 8005ee8:	0003      	movs	r3, r0
			res = FR_DISK_ERR;
 8005eea:	2001      	movs	r0, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e8      	bne.n	8005ec2 <move_window.part.0+0x2e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ef0:	2286      	movs	r2, #134	; 0x86
 8005ef2:	2188      	movs	r1, #136	; 0x88
			fs->wflag = 0;
 8005ef4:	55e3      	strb	r3, [r4, r7]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ef6:	0092      	lsls	r2, r2, #2
 8005ef8:	0089      	lsls	r1, r1, #2
 8005efa:	5861      	ldr	r1, [r4, r1]
 8005efc:	58a3      	ldr	r3, [r4, r2]
 8005efe:	1a71      	subs	r1, r6, r1
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d2d2      	bcs.n	8005eaa <move_window.part.0+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f04:	490a      	ldr	r1, [pc, #40]	; (8005f30 <move_window.part.0+0x9c>)
 8005f06:	5c67      	ldrb	r7, [r4, r1]
 8005f08:	2f01      	cmp	r7, #1
 8005f0a:	d9ce      	bls.n	8005eaa <move_window.part.0+0x16>
 8005f0c:	4691      	mov	r9, r2
 8005f0e:	e001      	b.n	8005f14 <move_window.part.0+0x80>
 8005f10:	464b      	mov	r3, r9
 8005f12:	58e3      	ldr	r3, [r4, r3]
					wsect += fs->fsize;
 8005f14:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005f16:	4643      	mov	r3, r8
 8005f18:	0032      	movs	r2, r6
 8005f1a:	5ce0      	ldrb	r0, [r4, r3]
 8005f1c:	0021      	movs	r1, r4
 8005f1e:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f20:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005f22:	f7ff ff9b 	bl	8005e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f26:	2f01      	cmp	r7, #1
 8005f28:	d1f2      	bne.n	8005f10 <move_window.part.0+0x7c>
 8005f2a:	e7be      	b.n	8005eaa <move_window.part.0+0x16>
 8005f2c:	00000201 	.word	0x00000201
 8005f30:	00000203 	.word	0x00000203

08005f34 <get_fat.part.0>:
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/
/* Hidden API for hacks and disk tools */

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	46c6      	mov	lr, r8
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
 8005f38:	2380      	movs	r3, #128	; 0x80
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8005f3a:	b500      	push	{lr}
		switch (fs->fs_type) {
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	5cc3      	ldrb	r3, [r0, r3]
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8005f40:	0004      	movs	r4, r0
 8005f42:	000d      	movs	r5, r1
		switch (fs->fs_type) {
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d007      	beq.n	8005f58 <get_fat.part.0+0x24>
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d04a      	beq.n	8005fe2 <get_fat.part.0+0xae>
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d01a      	beq.n	8005f88 <get_fat.part.0+0x54>
			val = 1;	/* Internal error */
		}
	}

	return val;
}
 8005f52:	bc80      	pop	{r7}
 8005f54:	46b8      	mov	r8, r7
 8005f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f58:	2288      	movs	r2, #136	; 0x88
 8005f5a:	0092      	lsls	r2, r2, #2
 8005f5c:	5882      	ldr	r2, [r0, r2]
 8005f5e:	0a0b      	lsrs	r3, r1, #8
 8005f60:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f62:	238b      	movs	r3, #139	; 0x8b
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	58c3      	ldr	r3, [r0, r3]
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	d003      	beq.n	8005f74 <get_fat.part.0+0x40>
 8005f6c:	f7ff ff92 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d156      	bne.n	8006022 <get_fat.part.0+0xee>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005f74:	21ff      	movs	r1, #255	; 0xff
 8005f76:	006d      	lsls	r5, r5, #1
 8005f78:	0049      	lsls	r1, r1, #1
 8005f7a:	400d      	ands	r5, r1
			val = LD_WORD(p);
 8005f7c:	1963      	adds	r3, r4, r5
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	5d60      	ldrb	r0, [r4, r5]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	4318      	orrs	r0, r3
			break;
 8005f86:	e7e4      	b.n	8005f52 <get_fat.part.0+0x1e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f88:	2788      	movs	r7, #136	; 0x88
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f8a:	238b      	movs	r3, #139	; 0x8b
			bc = (UINT)clst; bc += bc / 2;
 8005f8c:	084e      	lsrs	r6, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f8e:	00bf      	lsls	r7, r7, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f90:	009b      	lsls	r3, r3, #2
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f92:	59e2      	ldr	r2, [r4, r7]
			bc = (UINT)clst; bc += bc / 2;
 8005f94:	1876      	adds	r6, r6, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f96:	4698      	mov	r8, r3
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f98:	0a71      	lsrs	r1, r6, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f9a:	58e3      	ldr	r3, [r4, r3]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f9c:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	d007      	beq.n	8005fb2 <get_fat.part.0+0x7e>
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	f7ff ff76 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d13a      	bne.n	8006022 <get_fat.part.0+0xee>
 8005fac:	4643      	mov	r3, r8
 8005fae:	59e2      	ldr	r2, [r4, r7]
 8005fb0:	58e3      	ldr	r3, [r4, r3]
			wc = fs->win.d8[bc++ % SS(fs)];
 8005fb2:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fb4:	0a79      	lsrs	r1, r7, #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8005fb6:	05f6      	lsls	r6, r6, #23
 8005fb8:	0df6      	lsrs	r6, r6, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fba:	1889      	adds	r1, r1, r2
			wc = fs->win.d8[bc++ % SS(fs)];
 8005fbc:	5da6      	ldrb	r6, [r4, r6]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	d004      	beq.n	8005fcc <get_fat.part.0+0x98>
 8005fc2:	0020      	movs	r0, r4
 8005fc4:	f7ff ff66 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d12a      	bne.n	8006022 <get_fat.part.0+0xee>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005fcc:	05ff      	lsls	r7, r7, #23
 8005fce:	0dff      	lsrs	r7, r7, #23
 8005fd0:	5de3      	ldrb	r3, [r4, r7]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	4333      	orrs	r3, r6
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005fd6:	0918      	lsrs	r0, r3, #4
 8005fd8:	07ea      	lsls	r2, r5, #31
 8005fda:	d4ba      	bmi.n	8005f52 <get_fat.part.0+0x1e>
 8005fdc:	0518      	lsls	r0, r3, #20
 8005fde:	0d00      	lsrs	r0, r0, #20
 8005fe0:	e7b7      	b.n	8005f52 <get_fat.part.0+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fe2:	2288      	movs	r2, #136	; 0x88
 8005fe4:	0092      	lsls	r2, r2, #2
 8005fe6:	5882      	ldr	r2, [r0, r2]
 8005fe8:	09cb      	lsrs	r3, r1, #7
 8005fea:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fec:	238b      	movs	r3, #139	; 0x8b
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	58c3      	ldr	r3, [r0, r3]
 8005ff2:	4299      	cmp	r1, r3
 8005ff4:	d003      	beq.n	8005ffe <get_fat.part.0+0xca>
 8005ff6:	f7ff ff4d 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d111      	bne.n	8006022 <get_fat.part.0+0xee>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005ffe:	21fe      	movs	r1, #254	; 0xfe
 8006000:	00ad      	lsls	r5, r5, #2
 8006002:	0049      	lsls	r1, r1, #1
 8006004:	400d      	ands	r5, r1
 8006006:	1963      	adds	r3, r4, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006008:	78d8      	ldrb	r0, [r3, #3]
 800600a:	789a      	ldrb	r2, [r3, #2]
 800600c:	0600      	lsls	r0, r0, #24
 800600e:	0412      	lsls	r2, r2, #16
 8006010:	4310      	orrs	r0, r2
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	5d62      	ldrb	r2, [r4, r5]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	4310      	orrs	r0, r2
 800601a:	4318      	orrs	r0, r3
 800601c:	0100      	lsls	r0, r0, #4
 800601e:	0900      	lsrs	r0, r0, #4
			break;
 8006020:	e797      	b.n	8005f52 <get_fat.part.0+0x1e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006022:	2001      	movs	r0, #1
 8006024:	4240      	negs	r0, r0
 8006026:	e794      	b.n	8005f52 <get_fat.part.0+0x1e>

08006028 <f_read.part.0>:

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8006028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602a:	464e      	mov	r6, r9
 800602c:	46de      	mov	lr, fp
 800602e:	4645      	mov	r5, r8
 8006030:	4657      	mov	r7, sl
 8006032:	469b      	mov	fp, r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)								/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8006034:	2382      	movs	r3, #130	; 0x82
FRESULT f_read (
 8006036:	b5e0      	push	{r5, r6, r7, lr}
	remain = fp->fsize - fp->fptr;
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	58c4      	ldr	r4, [r0, r3]
 800603c:	3304      	adds	r3, #4
 800603e:	58c3      	ldr	r3, [r0, r3]
FRESULT f_read (
 8006040:	0005      	movs	r5, r0
	remain = fp->fsize - fp->fptr;
 8006042:	1b1b      	subs	r3, r3, r4
FRESULT f_read (
 8006044:	000e      	movs	r6, r1
	remain = fp->fsize - fp->fptr;
 8006046:	4699      	mov	r9, r3
FRESULT f_read (
 8006048:	b083      	sub	sp, #12
 800604a:	4293      	cmp	r3, r2
 800604c:	d900      	bls.n	8006050 <f_read.part.0+0x28>
 800604e:	4691      	mov	r9, r2
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8006050:	464b      	mov	r3, r9
 8006052:	2b00      	cmp	r3, #0
 8006054:	d100      	bne.n	8006058 <f_read.part.0+0x30>
 8006056:	e0c3      	b.n	80061e0 <f_read.part.0+0x1b8>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	469a      	mov	sl, r3
 800605e:	0021      	movs	r1, r4
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006060:	05cb      	lsls	r3, r1, #23
 8006062:	0ddf      	lsrs	r7, r3, #23
 8006064:	2b00      	cmp	r3, #0
 8006066:	d16f      	bne.n	8006148 <f_read.part.0+0x120>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006068:	4653      	mov	r3, sl
 800606a:	4a98      	ldr	r2, [pc, #608]	; (80062cc <f_read.part.0+0x2a4>)
 800606c:	58eb      	ldr	r3, [r5, r3]
 800606e:	0a48      	lsrs	r0, r1, #9
 8006070:	5c9a      	ldrb	r2, [r3, r2]
 8006072:	1e54      	subs	r4, r2, #1
 8006074:	4004      	ands	r4, r0
 8006076:	b2e4      	uxtb	r4, r4
			if (!csect) {						/* On the cluster boundary? */
 8006078:	2c00      	cmp	r4, #0
 800607a:	d100      	bne.n	800607e <f_read.part.0+0x56>
 800607c:	e0b2      	b.n	80061e4 <f_read.part.0+0x1bc>
 800607e:	2285      	movs	r2, #133	; 0x85
 8006080:	0092      	lsls	r2, r2, #2
 8006082:	58a8      	ldr	r0, [r5, r2]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006084:	2285      	movs	r2, #133	; 0x85
 8006086:	0092      	lsls	r2, r2, #2
 8006088:	589a      	ldr	r2, [r3, r2]
	clst -= 2;
 800608a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800608c:	3a02      	subs	r2, #2
 800608e:	4290      	cmp	r0, r2
 8006090:	d300      	bcc.n	8006094 <f_read.part.0+0x6c>
 8006092:	e0bd      	b.n	8006210 <f_read.part.0+0x1e8>
	return clst * fs->csize + fs->database;
 8006094:	218a      	movs	r1, #138	; 0x8a
 8006096:	4a8d      	ldr	r2, [pc, #564]	; (80062cc <f_read.part.0+0x2a4>)
 8006098:	0089      	lsls	r1, r1, #2
 800609a:	5c9a      	ldrb	r2, [r3, r2]
 800609c:	5859      	ldr	r1, [r3, r1]
 800609e:	4350      	muls	r0, r2
 80060a0:	1840      	adds	r0, r0, r1
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d100      	bne.n	80060a8 <f_read.part.0+0x80>
 80060a6:	e0b3      	b.n	8006210 <f_read.part.0+0x1e8>
			sect += csect;
 80060a8:	4680      	mov	r8, r0
 80060aa:	44a0      	add	r8, r4
			if (cc) {							/* Read maximum contiguous sectors directly */
 80060ac:	45d1      	cmp	r9, sl
 80060ae:	d321      	bcc.n	80060f4 <f_read.part.0+0xcc>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80060b0:	4649      	mov	r1, r9
 80060b2:	0a49      	lsrs	r1, r1, #9
 80060b4:	9101      	str	r1, [sp, #4]
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80060b6:	1861      	adds	r1, r4, r1
 80060b8:	428a      	cmp	r2, r1
 80060ba:	d201      	bcs.n	80060c0 <f_read.part.0+0x98>
					cc = fp->fs->csize - csect;
 80060bc:	1b12      	subs	r2, r2, r4
 80060be:	9201      	str	r2, [sp, #4]
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80060c0:	4a83      	ldr	r2, [pc, #524]	; (80062d0 <f_read.part.0+0x2a8>)
 80060c2:	0031      	movs	r1, r6
 80060c4:	5c98      	ldrb	r0, [r3, r2]
 80060c6:	4642      	mov	r2, r8
 80060c8:	9b01      	ldr	r3, [sp, #4]
 80060ca:	f7ff feb9 	bl	8005e40 <disk_read>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d000      	beq.n	80060d4 <f_read.part.0+0xac>
 80060d2:	e0b9      	b.n	8006248 <f_read.part.0+0x220>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80060d4:	4b7f      	ldr	r3, [pc, #508]	; (80062d4 <f_read.part.0+0x2ac>)
 80060d6:	5ceb      	ldrb	r3, [r5, r3]
 80060d8:	065b      	lsls	r3, r3, #25
 80060da:	d508      	bpl.n	80060ee <f_read.part.0+0xc6>
 80060dc:	2386      	movs	r3, #134	; 0x86
 80060de:	4642      	mov	r2, r8
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	58eb      	ldr	r3, [r5, r3]
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	9a01      	ldr	r2, [sp, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d900      	bls.n	80060ee <f_read.part.0+0xc6>
 80060ec:	e0ce      	b.n	800628c <f_read.part.0+0x264>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	025a      	lsls	r2, r3, #9
				continue;
 80060f2:	e065      	b.n	80061c0 <f_read.part.0+0x198>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80060f4:	2286      	movs	r2, #134	; 0x86
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	58aa      	ldr	r2, [r5, r2]
 80060fa:	4590      	cmp	r8, r2
 80060fc:	d01c      	beq.n	8006138 <f_read.part.0+0x110>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80060fe:	2740      	movs	r7, #64	; 0x40
 8006100:	4c74      	ldr	r4, [pc, #464]	; (80062d4 <f_read.part.0+0x2ac>)
 8006102:	5d29      	ldrb	r1, [r5, r4]
 8006104:	420f      	tst	r7, r1
 8006106:	d00d      	beq.n	8006124 <f_read.part.0+0xfc>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006108:	4971      	ldr	r1, [pc, #452]	; (80062d0 <f_read.part.0+0x2a8>)
 800610a:	5c58      	ldrb	r0, [r3, r1]
 800610c:	2301      	movs	r3, #1
 800610e:	0029      	movs	r1, r5
 8006110:	f7ff fea4 	bl	8005e5c <disk_write>
 8006114:	2800      	cmp	r0, #0
 8006116:	d000      	beq.n	800611a <f_read.part.0+0xf2>
 8006118:	e096      	b.n	8006248 <f_read.part.0+0x220>
					fp->flag &= ~FA__DIRTY;
 800611a:	5d2b      	ldrb	r3, [r5, r4]
 800611c:	43bb      	bics	r3, r7
 800611e:	552b      	strb	r3, [r5, r4]
 8006120:	4653      	mov	r3, sl
 8006122:	58eb      	ldr	r3, [r5, r3]
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006124:	4a6a      	ldr	r2, [pc, #424]	; (80062d0 <f_read.part.0+0x2a8>)
 8006126:	0029      	movs	r1, r5
 8006128:	5c98      	ldrb	r0, [r3, r2]
 800612a:	2301      	movs	r3, #1
 800612c:	4642      	mov	r2, r8
 800612e:	f7ff fe87 	bl	8005e40 <disk_read>
 8006132:	2800      	cmp	r0, #0
 8006134:	d000      	beq.n	8006138 <f_read.part.0+0x110>
 8006136:	e087      	b.n	8006248 <f_read.part.0+0x220>
			fp->dsect = sect;
 8006138:	2386      	movs	r3, #134	; 0x86
 800613a:	4642      	mov	r2, r8
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	50ea      	str	r2, [r5, r3]
 8006140:	3b10      	subs	r3, #16
 8006142:	58ef      	ldr	r7, [r5, r3]
 8006144:	05ff      	lsls	r7, r7, #23
 8006146:	0dff      	lsrs	r7, r7, #23
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006148:	4653      	mov	r3, sl
 800614a:	1bda      	subs	r2, r3, r7
		if (rcnt > btr) rcnt = btr;
 800614c:	454a      	cmp	r2, r9
 800614e:	d900      	bls.n	8006152 <f_read.part.0+0x12a>
 8006150:	464a      	mov	r2, r9
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006152:	2000      	movs	r0, #0
 8006154:	2300      	movs	r3, #0
 8006156:	19e9      	adds	r1, r5, r7
	while (cnt--)
 8006158:	3704      	adds	r7, #4
 800615a:	19ef      	adds	r7, r5, r7
 800615c:	42be      	cmp	r6, r7
 800615e:	4143      	adcs	r3, r0
 8006160:	2700      	movs	r7, #0
 8006162:	469c      	mov	ip, r3
 8006164:	2300      	movs	r3, #0
 8006166:	1d30      	adds	r0, r6, #4
 8006168:	4281      	cmp	r1, r0
 800616a:	417b      	adcs	r3, r7
 800616c:	0018      	movs	r0, r3
 800616e:	4663      	mov	r3, ip
 8006170:	4303      	orrs	r3, r0
 8006172:	2008      	movs	r0, #8
 8006174:	4684      	mov	ip, r0
 8006176:	1e54      	subs	r4, r2, #1
 8006178:	45a4      	cmp	ip, r4
 800617a:	4180      	sbcs	r0, r0
 800617c:	4240      	negs	r0, r0
 800617e:	4218      	tst	r0, r3
 8006180:	d067      	beq.n	8006252 <f_read.part.0+0x22a>
 8006182:	0033      	movs	r3, r6
 8006184:	430b      	orrs	r3, r1
 8006186:	079b      	lsls	r3, r3, #30
 8006188:	d163      	bne.n	8006252 <f_read.part.0+0x22a>
 800618a:	2300      	movs	r3, #0
 800618c:	0890      	lsrs	r0, r2, #2
 800618e:	0080      	lsls	r0, r0, #2
		*d++ = *s++;
 8006190:	58cf      	ldr	r7, [r1, r3]
 8006192:	50f7      	str	r7, [r6, r3]
	while (cnt--)
 8006194:	3304      	adds	r3, #4
 8006196:	4298      	cmp	r0, r3
 8006198:	d1fa      	bne.n	8006190 <f_read.part.0+0x168>
 800619a:	2303      	movs	r3, #3
 800619c:	0010      	movs	r0, r2
 800619e:	4398      	bics	r0, r3
 80061a0:	0003      	movs	r3, r0
 80061a2:	1809      	adds	r1, r1, r0
 80061a4:	1ae4      	subs	r4, r4, r3
 80061a6:	1830      	adds	r0, r6, r0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d009      	beq.n	80061c0 <f_read.part.0+0x198>
		*d++ = *s++;
 80061ac:	780b      	ldrb	r3, [r1, #0]
 80061ae:	7003      	strb	r3, [r0, #0]
	while (cnt--)
 80061b0:	2c00      	cmp	r4, #0
 80061b2:	d005      	beq.n	80061c0 <f_read.part.0+0x198>
		*d++ = *s++;
 80061b4:	784b      	ldrb	r3, [r1, #1]
 80061b6:	7043      	strb	r3, [r0, #1]
	while (cnt--)
 80061b8:	2c01      	cmp	r4, #1
 80061ba:	d001      	beq.n	80061c0 <f_read.part.0+0x198>
		*d++ = *s++;
 80061bc:	788b      	ldrb	r3, [r1, #2]
 80061be:	7083      	strb	r3, [r0, #2]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80061c0:	2382      	movs	r3, #130	; 0x82
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	58e9      	ldr	r1, [r5, r3]
 80061c6:	4658      	mov	r0, fp
 80061c8:	1851      	adds	r1, r2, r1
 80061ca:	50e9      	str	r1, [r5, r3]
 80061cc:	465b      	mov	r3, fp
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	18b6      	adds	r6, r6, r2
 80061d2:	189b      	adds	r3, r3, r2
 80061d4:	6003      	str	r3, [r0, #0]
 80061d6:	464b      	mov	r3, r9
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	4699      	mov	r9, r3
	for ( ;  btr;								/* Repeat until all data read */
 80061dc:	d000      	beq.n	80061e0 <f_read.part.0+0x1b8>
 80061de:	e73f      	b.n	8006060 <f_read.part.0+0x38>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80061e0:	2000      	movs	r0, #0
 80061e2:	e019      	b.n	8006218 <f_read.part.0+0x1f0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80061e4:	2900      	cmp	r1, #0
 80061e6:	d11e      	bne.n	8006226 <f_read.part.0+0x1fe>
					clst = fp->sclust;			/* Follow from the origin */
 80061e8:	2384      	movs	r3, #132	; 0x84
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	58e8      	ldr	r0, [r5, r3]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80061ee:	2801      	cmp	r0, #1
 80061f0:	d90e      	bls.n	8006210 <f_read.part.0+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d028      	beq.n	8006248 <f_read.part.0+0x220>
				fp->clust = clst;				/* Update current cluster */
 80061f6:	2385      	movs	r3, #133	; 0x85
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	50e8      	str	r0, [r5, r3]
 80061fc:	4653      	mov	r3, sl
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80061fe:	2285      	movs	r2, #133	; 0x85
 8006200:	58eb      	ldr	r3, [r5, r3]
 8006202:	0092      	lsls	r2, r2, #2
 8006204:	589a      	ldr	r2, [r3, r2]
	clst -= 2;
 8006206:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006208:	3a02      	subs	r2, #2
 800620a:	4290      	cmp	r0, r2
 800620c:	d200      	bcs.n	8006210 <f_read.part.0+0x1e8>
 800620e:	e741      	b.n	8006094 <f_read.part.0+0x6c>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006210:	2202      	movs	r2, #2
 8006212:	2002      	movs	r0, #2
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <f_read.part.0+0x2b0>)
 8006216:	54ea      	strb	r2, [r5, r3]
}
 8006218:	b003      	add	sp, #12
 800621a:	bcf0      	pop	{r4, r5, r6, r7}
 800621c:	46bb      	mov	fp, r7
 800621e:	46b2      	mov	sl, r6
 8006220:	46a9      	mov	r9, r5
 8006222:	46a0      	mov	r8, r4
 8006224:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (fp->cltbl)
 8006226:	2189      	movs	r1, #137	; 0x89
 8006228:	0089      	lsls	r1, r1, #2
 800622a:	5869      	ldr	r1, [r5, r1]
 800622c:	2900      	cmp	r1, #0
 800622e:	d117      	bne.n	8006260 <f_read.part.0+0x238>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006230:	2285      	movs	r2, #133	; 0x85
 8006232:	0092      	lsls	r2, r2, #2
 8006234:	58a9      	ldr	r1, [r5, r2]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006236:	2901      	cmp	r1, #1
 8006238:	d9ea      	bls.n	8006210 <f_read.part.0+0x1e8>
 800623a:	589a      	ldr	r2, [r3, r2]
 800623c:	4291      	cmp	r1, r2
 800623e:	d2e7      	bcs.n	8006210 <f_read.part.0+0x1e8>
 8006240:	0018      	movs	r0, r3
 8006242:	f7ff fe77 	bl	8005f34 <get_fat.part.0>
	return val;
 8006246:	e7d2      	b.n	80061ee <f_read.part.0+0x1c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006248:	2201      	movs	r2, #1
 800624a:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <f_read.part.0+0x2b0>)
 800624c:	2001      	movs	r0, #1
 800624e:	54ea      	strb	r2, [r5, r3]
 8006250:	e7e2      	b.n	8006218 <f_read.part.0+0x1f0>
	while (cnt--)
 8006252:	2300      	movs	r3, #0
		*d++ = *s++;
 8006254:	5cc8      	ldrb	r0, [r1, r3]
 8006256:	54f0      	strb	r0, [r6, r3]
	while (cnt--)
 8006258:	3301      	adds	r3, #1
 800625a:	429a      	cmp	r2, r3
 800625c:	d1fa      	bne.n	8006254 <f_read.part.0+0x22c>
 800625e:	e7af      	b.n	80061c0 <f_read.part.0+0x198>
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006260:	1d0b      	adds	r3, r1, #4
 8006262:	9101      	str	r1, [sp, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006264:	0011      	movs	r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006266:	4698      	mov	r8, r3
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006268:	f7f9 ff56 	bl	8000118 <__udivsi3>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800626c:	9901      	ldr	r1, [sp, #4]
 800626e:	684b      	ldr	r3, [r1, #4]
		if (!ncl) return 0;		/* End of table? (error) */
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0cd      	beq.n	8006210 <f_read.part.0+0x1e8>
 8006274:	4642      	mov	r2, r8
 8006276:	e004      	b.n	8006282 <f_read.part.0+0x25a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006278:	3208      	adds	r2, #8
 800627a:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800627c:	6813      	ldr	r3, [r2, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0c6      	beq.n	8006210 <f_read.part.0+0x1e8>
		if (cl < ncl) break;	/* In this fragment? */
 8006282:	4298      	cmp	r0, r3
 8006284:	d2f8      	bcs.n	8006278 <f_read.part.0+0x250>
	return cl + *tbl;	/* Return the cluster number */
 8006286:	6853      	ldr	r3, [r2, #4]
 8006288:	18c0      	adds	r0, r0, r3
 800628a:	e7b0      	b.n	80061ee <f_read.part.0+0x1c6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800628c:	0001      	movs	r1, r0
 800628e:	025b      	lsls	r3, r3, #9
 8006290:	18f2      	adds	r2, r6, r3
	while (cnt--)
 8006292:	3304      	adds	r3, #4
 8006294:	18f3      	adds	r3, r6, r3
 8006296:	429d      	cmp	r5, r3
 8006298:	4141      	adcs	r1, r0
 800629a:	000b      	movs	r3, r1
 800629c:	1d29      	adds	r1, r5, #4
 800629e:	428a      	cmp	r2, r1
 80062a0:	4140      	adcs	r0, r0
 80062a2:	4318      	orrs	r0, r3
 80062a4:	b2c0      	uxtb	r0, r0
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d009      	beq.n	80062be <f_read.part.0+0x296>
 80062aa:	0013      	movs	r3, r2
 80062ac:	432b      	orrs	r3, r5
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d105      	bne.n	80062be <f_read.part.0+0x296>
		*d++ = *s++;
 80062b2:	59eb      	ldr	r3, [r5, r7]
 80062b4:	51d3      	str	r3, [r2, r7]
	while (cnt--)
 80062b6:	3704      	adds	r7, #4
 80062b8:	4557      	cmp	r7, sl
 80062ba:	d1fa      	bne.n	80062b2 <f_read.part.0+0x28a>
 80062bc:	e717      	b.n	80060ee <f_read.part.0+0xc6>
		*d++ = *s++;
 80062be:	5deb      	ldrb	r3, [r5, r7]
 80062c0:	55d3      	strb	r3, [r2, r7]
	while (cnt--)
 80062c2:	3701      	adds	r7, #1
 80062c4:	4557      	cmp	r7, sl
 80062c6:	d1fa      	bne.n	80062be <f_read.part.0+0x296>
 80062c8:	e711      	b.n	80060ee <f_read.part.0+0xc6>
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	00000202 	.word	0x00000202
 80062d0:	00000201 	.word	0x00000201
 80062d4:	00000206 	.word	0x00000206
 80062d8:	00000207 	.word	0x00000207

080062dc <put_fat.part.0>:
FRESULT put_fat (
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	46ce      	mov	lr, r9
 80062e0:	4647      	mov	r7, r8
		switch (fs->fs_type) {
 80062e2:	2380      	movs	r3, #128	; 0x80
FRESULT put_fat (
 80062e4:	b580      	push	{r7, lr}
		switch (fs->fs_type) {
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	5cc3      	ldrb	r3, [r0, r3]
FRESULT put_fat (
 80062ea:	0004      	movs	r4, r0
 80062ec:	000d      	movs	r5, r1
 80062ee:	0016      	movs	r6, r2
		switch (fs->fs_type) {
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d008      	beq.n	8006306 <put_fat.part.0+0x2a>
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d055      	beq.n	80063a4 <put_fat.part.0+0xc8>
 80062f8:	2002      	movs	r0, #2
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d01b      	beq.n	8006336 <put_fat.part.0+0x5a>
}
 80062fe:	bcc0      	pop	{r6, r7}
 8006300:	46b9      	mov	r9, r7
 8006302:	46b0      	mov	r8, r6
 8006304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006306:	2288      	movs	r2, #136	; 0x88
 8006308:	0092      	lsls	r2, r2, #2
 800630a:	5882      	ldr	r2, [r0, r2]
 800630c:	0a0b      	lsrs	r3, r1, #8
 800630e:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006310:	238b      	movs	r3, #139	; 0x8b
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	58c3      	ldr	r3, [r0, r3]
 8006316:	4299      	cmp	r1, r3
 8006318:	d003      	beq.n	8006322 <put_fat.part.0+0x46>
 800631a:	f7ff fdbb 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 800631e:	2800      	cmp	r0, #0
 8006320:	d1ed      	bne.n	80062fe <put_fat.part.0+0x22>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006322:	21ff      	movs	r1, #255	; 0xff
 8006324:	006d      	lsls	r5, r5, #1
 8006326:	0049      	lsls	r1, r1, #1
 8006328:	400d      	ands	r5, r1
			ST_WORD(p, (WORD)val);
 800632a:	5566      	strb	r6, [r4, r5]
 800632c:	b2b6      	uxth	r6, r6
 800632e:	1965      	adds	r5, r4, r5
 8006330:	0a36      	lsrs	r6, r6, #8
 8006332:	706e      	strb	r6, [r5, #1]
 8006334:	e055      	b.n	80063e2 <put_fat.part.0+0x106>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006336:	2388      	movs	r3, #136	; 0x88
			bc = (UINT)clst; bc += bc / 2;
 8006338:	084f      	lsrs	r7, r1, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	58e2      	ldr	r2, [r4, r3]
 800633e:	4699      	mov	r9, r3
			bc = (UINT)clst; bc += bc / 2;
 8006340:	187f      	adds	r7, r7, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006342:	330c      	adds	r3, #12
 8006344:	4698      	mov	r8, r3
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006346:	0a79      	lsrs	r1, r7, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006348:	58e3      	ldr	r3, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800634a:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800634c:	4299      	cmp	r1, r3
 800634e:	d008      	beq.n	8006362 <put_fat.part.0+0x86>
 8006350:	0020      	movs	r0, r4
 8006352:	f7ff fd9f 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 8006356:	2800      	cmp	r0, #0
 8006358:	d1d1      	bne.n	80062fe <put_fat.part.0+0x22>
 800635a:	464b      	mov	r3, r9
 800635c:	58e2      	ldr	r2, [r4, r3]
 800635e:	4643      	mov	r3, r8
 8006360:	58e3      	ldr	r3, [r4, r3]
			p = &fs->win.d8[bc++ % SS(fs)];
 8006362:	1c79      	adds	r1, r7, #1
 8006364:	4688      	mov	r8, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006366:	2101      	movs	r1, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 8006368:	05ff      	lsls	r7, r7, #23
 800636a:	0dff      	lsrs	r7, r7, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800636c:	4229      	tst	r1, r5
 800636e:	d03e      	beq.n	80063ee <put_fat.part.0+0x112>
 8006370:	200f      	movs	r0, #15
 8006372:	5de5      	ldrb	r5, [r4, r7]
 8006374:	4005      	ands	r5, r0
 8006376:	0130      	lsls	r0, r6, #4
 8006378:	4328      	orrs	r0, r5
 800637a:	55e0      	strb	r0, [r4, r7]
			fs->wflag = 1;
 800637c:	2081      	movs	r0, #129	; 0x81
 800637e:	0080      	lsls	r0, r0, #2
 8006380:	5421      	strb	r1, [r4, r0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006382:	4641      	mov	r1, r8
 8006384:	0a49      	lsrs	r1, r1, #9
 8006386:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006388:	4299      	cmp	r1, r3
 800638a:	d004      	beq.n	8006396 <put_fat.part.0+0xba>
 800638c:	0020      	movs	r0, r4
 800638e:	f7ff fd81 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 8006392:	2800      	cmp	r0, #0
 8006394:	d1b3      	bne.n	80062fe <put_fat.part.0+0x22>
			p = &fs->win.d8[bc % SS(fs)];
 8006396:	4643      	mov	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006398:	0936      	lsrs	r6, r6, #4
			p = &fs->win.d8[bc % SS(fs)];
 800639a:	05d9      	lsls	r1, r3, #23
 800639c:	0dc9      	lsrs	r1, r1, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800639e:	b2f6      	uxtb	r6, r6
 80063a0:	5466      	strb	r6, [r4, r1]
			fs->wflag = 1;
 80063a2:	e01e      	b.n	80063e2 <put_fat.part.0+0x106>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063a4:	2288      	movs	r2, #136	; 0x88
 80063a6:	0092      	lsls	r2, r2, #2
 80063a8:	5882      	ldr	r2, [r0, r2]
 80063aa:	09cb      	lsrs	r3, r1, #7
 80063ac:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063ae:	238b      	movs	r3, #139	; 0x8b
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	58c3      	ldr	r3, [r0, r3]
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d003      	beq.n	80063c0 <put_fat.part.0+0xe4>
 80063b8:	f7ff fd6c 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 80063bc:	2800      	cmp	r0, #0
 80063be:	d19e      	bne.n	80062fe <put_fat.part.0+0x22>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80063c0:	21fe      	movs	r1, #254	; 0xfe
 80063c2:	00ad      	lsls	r5, r5, #2
 80063c4:	0049      	lsls	r1, r1, #1
 80063c6:	400d      	ands	r5, r1
 80063c8:	1963      	adds	r3, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 80063ca:	78da      	ldrb	r2, [r3, #3]
 80063cc:	0912      	lsrs	r2, r2, #4
 80063ce:	0712      	lsls	r2, r2, #28
 80063d0:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
 80063d2:	b2b2      	uxth	r2, r6
 80063d4:	0a12      	lsrs	r2, r2, #8
 80063d6:	5566      	strb	r6, [r4, r5]
 80063d8:	705a      	strb	r2, [r3, #1]
 80063da:	0c32      	lsrs	r2, r6, #16
 80063dc:	0e36      	lsrs	r6, r6, #24
 80063de:	709a      	strb	r2, [r3, #2]
 80063e0:	70de      	strb	r6, [r3, #3]
			fs->wflag = 1;
 80063e2:	2381      	movs	r3, #129	; 0x81
 80063e4:	2201      	movs	r2, #1
 80063e6:	009b      	lsls	r3, r3, #2
			break;
 80063e8:	2000      	movs	r0, #0
			fs->wflag = 1;
 80063ea:	54e2      	strb	r2, [r4, r3]
			break;
 80063ec:	e787      	b.n	80062fe <put_fat.part.0+0x22>
			fs->wflag = 1;
 80063ee:	2081      	movs	r0, #129	; 0x81
 80063f0:	0080      	lsls	r0, r0, #2
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80063f2:	55e6      	strb	r6, [r4, r7]
			fs->wflag = 1;
 80063f4:	5421      	strb	r1, [r4, r0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063f6:	4641      	mov	r1, r8
 80063f8:	0a49      	lsrs	r1, r1, #9
 80063fa:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d005      	beq.n	800640c <put_fat.part.0+0x130>
 8006400:	0020      	movs	r0, r4
 8006402:	f7ff fd47 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 8006406:	2800      	cmp	r0, #0
 8006408:	d000      	beq.n	800640c <put_fat.part.0+0x130>
 800640a:	e778      	b.n	80062fe <put_fat.part.0+0x22>
			p = &fs->win.d8[bc % SS(fs)];
 800640c:	4643      	mov	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800640e:	200f      	movs	r0, #15
			p = &fs->win.d8[bc % SS(fs)];
 8006410:	05d9      	lsls	r1, r3, #23
 8006412:	0dc9      	lsrs	r1, r1, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006414:	5c63      	ldrb	r3, [r4, r1]
 8006416:	0a36      	lsrs	r6, r6, #8
 8006418:	4383      	bics	r3, r0
 800641a:	4006      	ands	r6, r0
 800641c:	431e      	orrs	r6, r3
 800641e:	5466      	strb	r6, [r4, r1]
			fs->wflag = 1;
 8006420:	e7df      	b.n	80063e2 <put_fat.part.0+0x106>
 8006422:	46c0      	nop			; (mov r8, r8)

08006424 <sync_fs>:
{
 8006424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006426:	46c6      	mov	lr, r8
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006428:	2681      	movs	r6, #129	; 0x81
{
 800642a:	b500      	push	{lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800642c:	00b6      	lsls	r6, r6, #2
 800642e:	5d83      	ldrb	r3, [r0, r6]
{
 8006430:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006432:	2b00      	cmp	r3, #0
 8006434:	d110      	bne.n	8006458 <sync_fs+0x34>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006436:	2280      	movs	r2, #128	; 0x80
 8006438:	0092      	lsls	r2, r2, #2
 800643a:	5ca3      	ldrb	r3, [r4, r2]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d036      	beq.n	80064ae <sync_fs+0x8a>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006440:	4b2f      	ldr	r3, [pc, #188]	; (8006500 <sync_fs+0xdc>)
 8006442:	2200      	movs	r2, #0
 8006444:	5ce0      	ldrb	r0, [r4, r3]
 8006446:	2100      	movs	r1, #0
 8006448:	f7ff fd16 	bl	8005e78 <disk_ioctl>
 800644c:	1e43      	subs	r3, r0, #1
 800644e:	4198      	sbcs	r0, r3
			res = FR_DISK_ERR;
 8006450:	b2c0      	uxtb	r0, r0
}
 8006452:	bc80      	pop	{r7}
 8006454:	46b8      	mov	r8, r7
 8006456:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8006458:	238b      	movs	r3, #139	; 0x8b
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	58c5      	ldr	r5, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800645e:	4f28      	ldr	r7, [pc, #160]	; (8006500 <sync_fs+0xdc>)
 8006460:	2301      	movs	r3, #1
 8006462:	002a      	movs	r2, r5
 8006464:	0021      	movs	r1, r4
 8006466:	5dc0      	ldrb	r0, [r0, r7]
 8006468:	f7ff fcf8 	bl	8005e5c <disk_write>
 800646c:	0003      	movs	r3, r0
			res = FR_DISK_ERR;
 800646e:	2001      	movs	r0, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1ee      	bne.n	8006452 <sync_fs+0x2e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006474:	2286      	movs	r2, #134	; 0x86
 8006476:	2188      	movs	r1, #136	; 0x88
			fs->wflag = 0;
 8006478:	55a3      	strb	r3, [r4, r6]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	0089      	lsls	r1, r1, #2
 800647e:	5861      	ldr	r1, [r4, r1]
 8006480:	58a3      	ldr	r3, [r4, r2]
 8006482:	1a69      	subs	r1, r5, r1
 8006484:	4299      	cmp	r1, r3
 8006486:	d2d6      	bcs.n	8006436 <sync_fs+0x12>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006488:	491e      	ldr	r1, [pc, #120]	; (8006504 <sync_fs+0xe0>)
 800648a:	5c66      	ldrb	r6, [r4, r1]
 800648c:	2e01      	cmp	r6, #1
 800648e:	d9d2      	bls.n	8006436 <sync_fs+0x12>
 8006490:	4690      	mov	r8, r2
 8006492:	e001      	b.n	8006498 <sync_fs+0x74>
 8006494:	4643      	mov	r3, r8
 8006496:	58e3      	ldr	r3, [r4, r3]
					wsect += fs->fsize;
 8006498:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800649a:	002a      	movs	r2, r5
 800649c:	2301      	movs	r3, #1
 800649e:	0021      	movs	r1, r4
 80064a0:	5de0      	ldrb	r0, [r4, r7]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064a2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80064a4:	f7ff fcda 	bl	8005e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064a8:	2e01      	cmp	r6, #1
 80064aa:	d1f3      	bne.n	8006494 <sync_fs+0x70>
 80064ac:	e7c3      	b.n	8006436 <sync_fs+0x12>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064ae:	4d16      	ldr	r5, [pc, #88]	; (8006508 <sync_fs+0xe4>)
 80064b0:	5d63      	ldrb	r3, [r4, r5]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d1c4      	bne.n	8006440 <sync_fs+0x1c>
	while (cnt--)
 80064b6:	2100      	movs	r1, #0
 80064b8:	0020      	movs	r0, r4
 80064ba:	f001 fd77 	bl	8007fac <memset>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80064be:	23ff      	movs	r3, #255	; 0xff
 80064c0:	4a12      	ldr	r2, [pc, #72]	; (800650c <sync_fs+0xe8>)
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	52e2      	strh	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <sync_fs+0xec>)
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80064c8:	4a12      	ldr	r2, [pc, #72]	; (8006514 <sync_fs+0xf0>)
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80064ca:	6023      	str	r3, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80064cc:	23f2      	movs	r3, #242	; 0xf2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80064d2:	332c      	adds	r3, #44	; 0x2c
 80064d4:	58e2      	ldr	r2, [r4, r3]
 80064d6:	3b28      	subs	r3, #40	; 0x28
 80064d8:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80064da:	3324      	adds	r3, #36	; 0x24
 80064dc:	58e2      	ldr	r2, [r4, r3]
 80064de:	3b20      	subs	r3, #32
 80064e0:	50e2      	str	r2, [r4, r3]
			fs->winsect = fs->volbase + 1;
 80064e2:	3330      	adds	r3, #48	; 0x30
 80064e4:	58e2      	ldr	r2, [r4, r3]
 80064e6:	3310      	adds	r3, #16
 80064e8:	3201      	adds	r2, #1
 80064ea:	50e2      	str	r2, [r4, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <sync_fs+0xdc>)
 80064ee:	0021      	movs	r1, r4
 80064f0:	5ce0      	ldrb	r0, [r4, r3]
 80064f2:	2301      	movs	r3, #1
 80064f4:	f7ff fcb2 	bl	8005e5c <disk_write>
			fs->fsi_flag = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	5563      	strb	r3, [r4, r5]
 80064fc:	e7a0      	b.n	8006440 <sync_fs+0x1c>
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	00000201 	.word	0x00000201
 8006504:	00000203 	.word	0x00000203
 8006508:	00000205 	.word	0x00000205
 800650c:	ffffaa55 	.word	0xffffaa55
 8006510:	41615252 	.word	0x41615252
 8006514:	61417272 	.word	0x61417272

08006518 <check_fs>:
{
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800651a:	2381      	movs	r3, #129	; 0x81
 800651c:	268b      	movs	r6, #139	; 0x8b
 800651e:	2701      	movs	r7, #1
 8006520:	2200      	movs	r2, #0
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	00b6      	lsls	r6, r6, #2
 8006526:	427f      	negs	r7, r7
 8006528:	54c2      	strb	r2, [r0, r3]
{
 800652a:	0004      	movs	r4, r0
 800652c:	000d      	movs	r5, r1
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800652e:	5187      	str	r7, [r0, r6]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006530:	1c4b      	adds	r3, r1, #1
 8006532:	d00c      	beq.n	800654e <check_fs+0x36>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006534:	4b18      	ldr	r3, [pc, #96]	; (8006598 <check_fs+0x80>)
 8006536:	000a      	movs	r2, r1
 8006538:	5cc0      	ldrb	r0, [r0, r3]
 800653a:	0021      	movs	r1, r4
 800653c:	2301      	movs	r3, #1
 800653e:	f7ff fc7f 	bl	8005e40 <disk_read>
 8006542:	2800      	cmp	r0, #0
 8006544:	d002      	beq.n	800654c <check_fs+0x34>
		return 3;
 8006546:	2003      	movs	r0, #3
			fs->winsect = sector;
 8006548:	51a7      	str	r7, [r4, r6]
	return res;
 800654a:	e020      	b.n	800658e <check_fs+0x76>
			fs->winsect = sector;
 800654c:	51a5      	str	r5, [r4, r6]
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <check_fs+0x84>)
 8006550:	5ce2      	ldrb	r2, [r4, r3]
 8006552:	3b01      	subs	r3, #1
 8006554:	5ce3      	ldrb	r3, [r4, r3]
 8006556:	0212      	lsls	r2, r2, #8
 8006558:	4313      	orrs	r3, r2
 800655a:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <check_fs+0x88>)
 800655c:	b21b      	sxth	r3, r3
 800655e:	4293      	cmp	r3, r2
 8006560:	d116      	bne.n	8006590 <check_fs+0x78>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006562:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8006564:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	4313      	orrs	r3, r2
 800656a:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <check_fs+0x8c>)
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	4293      	cmp	r3, r2
 8006572:	d00f      	beq.n	8006594 <check_fs+0x7c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006574:	3452      	adds	r4, #82	; 0x52
 8006576:	8860      	ldrh	r0, [r4, #2]
 8006578:	8823      	ldrh	r3, [r4, #0]
 800657a:	0400      	lsls	r0, r0, #16
 800657c:	4318      	orrs	r0, r3
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <check_fs+0x90>)
 8006580:	0200      	lsls	r0, r0, #8
 8006582:	469c      	mov	ip, r3
 8006584:	0a00      	lsrs	r0, r0, #8
 8006586:	4460      	add	r0, ip
 8006588:	1e43      	subs	r3, r0, #1
 800658a:	4198      	sbcs	r0, r3
		return 3;
 800658c:	b2c0      	uxtb	r0, r0
}
 800658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 2;
 8006590:	2002      	movs	r0, #2
 8006592:	e7fc      	b.n	800658e <check_fs+0x76>
		return 0;
 8006594:	2000      	movs	r0, #0
 8006596:	e7fa      	b.n	800658e <check_fs+0x76>
 8006598:	00000201 	.word	0x00000201
 800659c:	000001ff 	.word	0x000001ff
 80065a0:	ffffaa55 	.word	0xffffaa55
 80065a4:	00544146 	.word	0x00544146
 80065a8:	ffabbeba 	.word	0xffabbeba

080065ac <find_volume>:
{
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	4645      	mov	r5, r8
 80065b0:	46de      	mov	lr, fp
 80065b2:	4657      	mov	r7, sl
 80065b4:	464e      	mov	r6, r9
	*rfs = 0;
 80065b6:	2300      	movs	r3, #0
{
 80065b8:	b5e0      	push	{r5, r6, r7, lr}
	*rfs = 0;
 80065ba:	6003      	str	r3, [r0, #0]
	if (*path) {	/* If the pointer is not a null */
 80065bc:	680b      	ldr	r3, [r1, #0]
{
 80065be:	0015      	movs	r5, r2
 80065c0:	b083      	sub	sp, #12
	if (*path) {	/* If the pointer is not a null */
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d100      	bne.n	80065c8 <find_volume+0x1c>
 80065c6:	e1fc      	b.n	80069c2 <find_volume+0x416>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065c8:	781e      	ldrb	r6, [r3, #0]
 80065ca:	001c      	movs	r4, r3
 80065cc:	0032      	movs	r2, r6
 80065ce:	2e20      	cmp	r6, #32
 80065d0:	d804      	bhi.n	80065dc <find_volume+0x30>
 80065d2:	e015      	b.n	8006600 <find_volume+0x54>
 80065d4:	7862      	ldrb	r2, [r4, #1]
 80065d6:	3401      	adds	r4, #1
 80065d8:	2a20      	cmp	r2, #32
 80065da:	d911      	bls.n	8006600 <find_volume+0x54>
 80065dc:	2a3a      	cmp	r2, #58	; 0x3a
 80065de:	d1f9      	bne.n	80065d4 <find_volume+0x28>
			i = *tp++ - '0'; 
 80065e0:	3301      	adds	r3, #1
	if (vol < 0) return FR_INVALID_DRIVE;
 80065e2:	270b      	movs	r7, #11
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d007      	beq.n	80065f8 <find_volume+0x4c>
}
 80065e8:	0038      	movs	r0, r7
 80065ea:	b003      	add	sp, #12
 80065ec:	bcf0      	pop	{r4, r5, r6, r7}
 80065ee:	46bb      	mov	fp, r7
 80065f0:	46b2      	mov	sl, r6
 80065f2:	46a9      	mov	r9, r5
 80065f4:	46a0      	mov	r8, r4
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065f8:	2e30      	cmp	r6, #48	; 0x30
 80065fa:	d1f5      	bne.n	80065e8 <find_volume+0x3c>
					*path = ++tt;
 80065fc:	3401      	adds	r4, #1
 80065fe:	600c      	str	r4, [r1, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006600:	4bc9      	ldr	r3, [pc, #804]	; (8006928 <find_volume+0x37c>)
 8006602:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006604:	2c00      	cmp	r4, #0
 8006606:	d100      	bne.n	800660a <find_volume+0x5e>
 8006608:	e135      	b.n	8006876 <find_volume+0x2ca>
	if (fs->fs_type) {					/* If the volume has been mounted */
 800660a:	2380      	movs	r3, #128	; 0x80
	*rfs = fs;							/* Return pointer to the file system object */
 800660c:	6004      	str	r4, [r0, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	5ce3      	ldrb	r3, [r4, r3]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00f      	beq.n	8006636 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8006616:	4bc5      	ldr	r3, [pc, #788]	; (800692c <find_volume+0x380>)
 8006618:	5ce0      	ldrb	r0, [r4, r3]
 800661a:	f7ff fbef 	bl	8005dfc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800661e:	07c3      	lsls	r3, r0, #31
 8006620:	d409      	bmi.n	8006636 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006622:	2d00      	cmp	r5, #0
 8006624:	d100      	bne.n	8006628 <find_volume+0x7c>
 8006626:	e128      	b.n	800687a <find_volume+0x2ce>
 8006628:	2304      	movs	r3, #4
 800662a:	001f      	movs	r7, r3
 800662c:	4007      	ands	r7, r0
 800662e:	4203      	tst	r3, r0
 8006630:	d0da      	beq.n	80065e8 <find_volume+0x3c>
				return FR_WRITE_PROTECTED;
 8006632:	270a      	movs	r7, #10
 8006634:	e7d8      	b.n	80065e8 <find_volume+0x3c>
	fs->fs_type = 0;					/* Clear the file system object */
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	2200      	movs	r2, #0
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	52e2      	strh	r2, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800663e:	2000      	movs	r0, #0
 8006640:	f7ff fbea 	bl	8005e18 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006644:	07c3      	lsls	r3, r0, #31
 8006646:	d500      	bpl.n	800664a <find_volume+0x9e>
 8006648:	e113      	b.n	8006872 <find_volume+0x2c6>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800664a:	2d00      	cmp	r5, #0
 800664c:	d001      	beq.n	8006652 <find_volume+0xa6>
 800664e:	0743      	lsls	r3, r0, #29
 8006650:	d4ef      	bmi.n	8006632 <find_volume+0x86>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006652:	2100      	movs	r1, #0
 8006654:	0020      	movs	r0, r4
 8006656:	f7ff ff5f 	bl	8006518 <check_fs>
 800665a:	0007      	movs	r7, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800665c:	2801      	cmp	r0, #1
 800665e:	d100      	bne.n	8006662 <find_volume+0xb6>
 8006660:	e0ab      	b.n	80067ba <find_volume+0x20e>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006662:	2803      	cmp	r0, #3
 8006664:	d100      	bne.n	8006668 <find_volume+0xbc>
 8006666:	e145      	b.n	80068f4 <find_volume+0x348>
	bsect = 0;
 8006668:	2600      	movs	r6, #0
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800666a:	2800      	cmp	r0, #0
 800666c:	d000      	beq.n	8006670 <find_volume+0xc4>
 800666e:	e0fe      	b.n	800686e <find_volume+0x2c2>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006670:	7b22      	ldrb	r2, [r4, #12]
 8006672:	7ae3      	ldrb	r3, [r4, #11]
 8006674:	0212      	lsls	r2, r2, #8
 8006676:	4313      	orrs	r3, r2
 8006678:	2280      	movs	r2, #128	; 0x80
 800667a:	b21b      	sxth	r3, r3
 800667c:	0092      	lsls	r2, r2, #2
 800667e:	4293      	cmp	r3, r2
 8006680:	d000      	beq.n	8006684 <find_volume+0xd8>
 8006682:	e0f4      	b.n	800686e <find_volume+0x2c2>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006684:	7de3      	ldrb	r3, [r4, #23]
 8006686:	7da5      	ldrb	r5, [r4, #22]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800668c:	d100      	bne.n	8006690 <find_volume+0xe4>
 800668e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8006690:	2386      	movs	r3, #134	; 0x86
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	50e5      	str	r5, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006696:	7c22      	ldrb	r2, [r4, #16]
 8006698:	4ba5      	ldr	r3, [pc, #660]	; (8006930 <find_volume+0x384>)
 800669a:	54e2      	strb	r2, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800669c:	1e53      	subs	r3, r2, #1
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d900      	bls.n	80066a4 <find_volume+0xf8>
 80066a2:	e0e4      	b.n	800686e <find_volume+0x2c2>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80066a4:	7b67      	ldrb	r7, [r4, #13]
 80066a6:	4ba3      	ldr	r3, [pc, #652]	; (8006934 <find_volume+0x388>)
 80066a8:	54e7      	strb	r7, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80066aa:	2f00      	cmp	r7, #0
 80066ac:	d100      	bne.n	80066b0 <find_volume+0x104>
 80066ae:	e0de      	b.n	800686e <find_volume+0x2c2>
 80066b0:	1e7b      	subs	r3, r7, #1
 80066b2:	421f      	tst	r7, r3
 80066b4:	d000      	beq.n	80066b8 <find_volume+0x10c>
 80066b6:	e0da      	b.n	800686e <find_volume+0x2c2>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80066b8:	7ca3      	ldrb	r3, [r4, #18]
 80066ba:	7c61      	ldrb	r1, [r4, #17]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	4319      	orrs	r1, r3
 80066c0:	2382      	movs	r3, #130	; 0x82
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	52e1      	strh	r1, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80066c6:	000b      	movs	r3, r1
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80066c8:	4689      	mov	r9, r1
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	d000      	beq.n	80066d0 <find_volume+0x124>
 80066ce:	e0ce      	b.n	800686e <find_volume+0x2c2>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80066d0:	7d21      	ldrb	r1, [r4, #20]
 80066d2:	7ce3      	ldrb	r3, [r4, #19]
 80066d4:	0209      	lsls	r1, r1, #8
 80066d6:	430b      	orrs	r3, r1
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80066d8:	d100      	bne.n	80066dc <find_volume+0x130>
 80066da:	6a23      	ldr	r3, [r4, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80066dc:	7be1      	ldrb	r1, [r4, #15]
 80066de:	7ba0      	ldrb	r0, [r4, #14]
 80066e0:	0209      	lsls	r1, r1, #8
 80066e2:	4308      	orrs	r0, r1
 80066e4:	4682      	mov	sl, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80066e6:	d100      	bne.n	80066ea <find_volume+0x13e>
 80066e8:	e0c1      	b.n	800686e <find_volume+0x2c2>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80066ea:	436a      	muls	r2, r5
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80066ec:	4649      	mov	r1, r9
 80066ee:	4693      	mov	fp, r2
 80066f0:	0909      	lsrs	r1, r1, #4
 80066f2:	4451      	add	r1, sl
 80066f4:	448b      	add	fp, r1
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80066f6:	9201      	str	r2, [sp, #4]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80066f8:	455b      	cmp	r3, fp
 80066fa:	d200      	bcs.n	80066fe <find_volume+0x152>
 80066fc:	e0b7      	b.n	800686e <find_volume+0x2c2>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80066fe:	465a      	mov	r2, fp
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	4698      	mov	r8, r3
 8006704:	0039      	movs	r1, r7
 8006706:	0018      	movs	r0, r3
 8006708:	f7f9 fd06 	bl	8000118 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800670c:	45b8      	cmp	r8, r7
 800670e:	d200      	bcs.n	8006712 <find_volume+0x166>
 8006710:	e0ad      	b.n	800686e <find_volume+0x2c2>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006712:	4b89      	ldr	r3, [pc, #548]	; (8006938 <find_volume+0x38c>)
 8006714:	4298      	cmp	r0, r3
 8006716:	d800      	bhi.n	800671a <find_volume+0x16e>
 8006718:	e122      	b.n	8006960 <find_volume+0x3b4>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800671a:	4b88      	ldr	r3, [pc, #544]	; (800693c <find_volume+0x390>)
 800671c:	4298      	cmp	r0, r3
 800671e:	d800      	bhi.n	8006722 <find_volume+0x176>
 8006720:	e156      	b.n	80069d0 <find_volume+0x424>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006722:	2385      	movs	r3, #133	; 0x85
 8006724:	3002      	adds	r0, #2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	50e0      	str	r0, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 800672a:	3308      	adds	r3, #8
 800672c:	50e6      	str	r6, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800672e:	4653      	mov	r3, sl
 8006730:	199a      	adds	r2, r3, r6
 8006732:	2388      	movs	r3, #136	; 0x88
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	50e2      	str	r2, [r4, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8006738:	465b      	mov	r3, fp
 800673a:	199a      	adds	r2, r3, r6
 800673c:	238a      	movs	r3, #138	; 0x8a
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	50e2      	str	r2, [r4, r3]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006742:	464b      	mov	r3, r9
 8006744:	2b00      	cmp	r3, #0
 8006746:	d000      	beq.n	800674a <find_volume+0x19e>
 8006748:	e091      	b.n	800686e <find_volume+0x2c2>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800674a:	2389      	movs	r3, #137	; 0x89
 800674c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	50e2      	str	r2, [r4, r3]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006752:	4b7b      	ldr	r3, [pc, #492]	; (8006940 <find_volume+0x394>)
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006754:	0080      	lsls	r0, r0, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006756:	469c      	mov	ip, r3
 8006758:	4460      	add	r0, ip
 800675a:	0a40      	lsrs	r0, r0, #9
 800675c:	4285      	cmp	r5, r0
 800675e:	d200      	bcs.n	8006762 <find_volume+0x1b6>
 8006760:	e085      	b.n	800686e <find_volume+0x2c2>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006762:	2301      	movs	r3, #1
 8006764:	2284      	movs	r2, #132	; 0x84
 8006766:	425b      	negs	r3, r3
 8006768:	0092      	lsls	r2, r2, #2
 800676a:	50a3      	str	r3, [r4, r2]
 800676c:	3a04      	subs	r2, #4
 800676e:	50a3      	str	r3, [r4, r2]
	fs->fsi_flag = 0x80;
 8006770:	4b74      	ldr	r3, [pc, #464]	; (8006944 <find_volume+0x398>)
 8006772:	3a8d      	subs	r2, #141	; 0x8d
 8006774:	3aff      	subs	r2, #255	; 0xff
 8006776:	54e2      	strb	r2, [r4, r3]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006778:	3bd5      	subs	r3, #213	; 0xd5
 800677a:	3bff      	subs	r3, #255	; 0xff
 800677c:	5ce2      	ldrb	r2, [r4, r3]
 800677e:	3b01      	subs	r3, #1
 8006780:	5ce3      	ldrb	r3, [r4, r3]
 8006782:	0212      	lsls	r2, r2, #8
 8006784:	4313      	orrs	r3, r2
 8006786:	2b01      	cmp	r3, #1
 8006788:	d100      	bne.n	800678c <find_volume+0x1e0>
 800678a:	e083      	b.n	8006894 <find_volume+0x2e8>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800678c:	2303      	movs	r3, #3
	fs->fs_type = fmt;	/* FAT sub-type */
 800678e:	2280      	movs	r2, #128	; 0x80
 8006790:	0092      	lsls	r2, r2, #2
 8006792:	54a3      	strb	r3, [r4, r2]
	fs->id = ++Fsid;	/* File system mount ID */
 8006794:	4a6c      	ldr	r2, [pc, #432]	; (8006948 <find_volume+0x39c>)
 8006796:	8813      	ldrh	r3, [r2, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	8013      	strh	r3, [r2, #0]
 800679e:	4a6b      	ldr	r2, [pc, #428]	; (800694c <find_volume+0x3a0>)
 80067a0:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067a2:	4b6b      	ldr	r3, [pc, #428]	; (8006950 <find_volume+0x3a4>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	42a2      	cmp	r2, r4
 80067a8:	d100      	bne.n	80067ac <find_volume+0x200>
 80067aa:	e10c      	b.n	80069c6 <find_volume+0x41a>
 80067ac:	68da      	ldr	r2, [r3, #12]
	return FR_OK;
 80067ae:	2700      	movs	r7, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067b0:	4294      	cmp	r4, r2
 80067b2:	d000      	beq.n	80067b6 <find_volume+0x20a>
 80067b4:	e718      	b.n	80065e8 <find_volume+0x3c>
 80067b6:	60df      	str	r7, [r3, #12]
 80067b8:	e716      	b.n	80065e8 <find_volume+0x3c>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80067ba:	23e1      	movs	r3, #225	; 0xe1
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	5ce3      	ldrb	r3, [r4, r3]
 80067c0:	2500      	movs	r5, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <find_volume+0x234>
 80067c6:	23e3      	movs	r3, #227	; 0xe3
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	18e2      	adds	r2, r4, r3
 80067cc:	5ce5      	ldrb	r5, [r4, r3]
 80067ce:	7853      	ldrb	r3, [r2, #1]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	432b      	orrs	r3, r5
 80067d4:	7895      	ldrb	r5, [r2, #2]
 80067d6:	042d      	lsls	r5, r5, #16
 80067d8:	432b      	orrs	r3, r5
 80067da:	78d5      	ldrb	r5, [r2, #3]
 80067dc:	062d      	lsls	r5, r5, #24
 80067de:	431d      	orrs	r5, r3
 80067e0:	23e9      	movs	r3, #233	; 0xe9
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	5ce3      	ldrb	r3, [r4, r3]
 80067e6:	2600      	movs	r6, #0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00c      	beq.n	8006806 <find_volume+0x25a>
 80067ec:	23eb      	movs	r3, #235	; 0xeb
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	18e2      	adds	r2, r4, r3
 80067f2:	5ce6      	ldrb	r6, [r4, r3]
 80067f4:	7853      	ldrb	r3, [r2, #1]
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	4333      	orrs	r3, r6
 80067fa:	7896      	ldrb	r6, [r2, #2]
 80067fc:	0436      	lsls	r6, r6, #16
 80067fe:	4333      	orrs	r3, r6
 8006800:	78d6      	ldrb	r6, [r2, #3]
 8006802:	0636      	lsls	r6, r6, #24
 8006804:	431e      	orrs	r6, r3
 8006806:	23f1      	movs	r3, #241	; 0xf1
 8006808:	2200      	movs	r2, #0
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	5ce3      	ldrb	r3, [r4, r3]
 800680e:	4690      	mov	r8, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <find_volume+0x284>
 8006814:	23f3      	movs	r3, #243	; 0xf3
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	18e1      	adds	r1, r4, r3
 800681a:	5ce2      	ldrb	r2, [r4, r3]
 800681c:	784b      	ldrb	r3, [r1, #1]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	431a      	orrs	r2, r3
 8006822:	788b      	ldrb	r3, [r1, #2]
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	4313      	orrs	r3, r2
 8006828:	78ca      	ldrb	r2, [r1, #3]
 800682a:	0612      	lsls	r2, r2, #24
 800682c:	431a      	orrs	r2, r3
 800682e:	4690      	mov	r8, r2
 8006830:	23f9      	movs	r3, #249	; 0xf9
 8006832:	2200      	movs	r2, #0
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	5ce3      	ldrb	r3, [r4, r3]
 8006838:	4691      	mov	r9, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <find_volume+0x2ae>
 800683e:	23fb      	movs	r3, #251	; 0xfb
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	18e1      	adds	r1, r4, r3
 8006844:	5ce2      	ldrb	r2, [r4, r3]
 8006846:	784b      	ldrb	r3, [r1, #1]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	431a      	orrs	r2, r3
 800684c:	788b      	ldrb	r3, [r1, #2]
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	4313      	orrs	r3, r2
 8006852:	78ca      	ldrb	r2, [r1, #3]
 8006854:	0612      	lsls	r2, r2, #24
 8006856:	431a      	orrs	r2, r3
 8006858:	4691      	mov	r9, r2
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800685a:	2d00      	cmp	r5, #0
 800685c:	d14c      	bne.n	80068f8 <find_volume+0x34c>
 800685e:	2e00      	cmp	r6, #0
 8006860:	d152      	bne.n	8006908 <find_volume+0x35c>
 8006862:	4643      	mov	r3, r8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d156      	bne.n	8006916 <find_volume+0x36a>
 8006868:	464b      	mov	r3, r9
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <find_volume+0x2d2>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800686e:	270d      	movs	r7, #13
 8006870:	e6ba      	b.n	80065e8 <find_volume+0x3c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006872:	2703      	movs	r7, #3
 8006874:	e6b8      	b.n	80065e8 <find_volume+0x3c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006876:	270c      	movs	r7, #12
 8006878:	e6b6      	b.n	80065e8 <find_volume+0x3c>
			return FR_OK;				/* The file system object is valid */
 800687a:	2700      	movs	r7, #0
 800687c:	e6b4      	b.n	80065e8 <find_volume+0x3c>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800687e:	4649      	mov	r1, r9
 8006880:	0020      	movs	r0, r4
 8006882:	f7ff fe49 	bl	8006518 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006886:	2800      	cmp	r0, #0
 8006888:	d100      	bne.n	800688c <find_volume+0x2e0>
 800688a:	e09f      	b.n	80069cc <find_volume+0x420>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800688c:	2803      	cmp	r0, #3
 800688e:	d100      	bne.n	8006892 <find_volume+0x2e6>
 8006890:	e6aa      	b.n	80065e8 <find_volume+0x3c>
 8006892:	e7ec      	b.n	800686e <find_volume+0x2c2>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006894:	238b      	movs	r3, #139	; 0x8b
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	58e3      	ldr	r3, [r4, r3]
		&& move_window(fs, bsect + 1) == FR_OK)
 800689a:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800689c:	4299      	cmp	r1, r3
 800689e:	d005      	beq.n	80068ac <find_volume+0x300>
 80068a0:	0020      	movs	r0, r4
 80068a2:	f7ff faf7 	bl	8005e94 <move_window.part.0>
		&& move_window(fs, bsect + 1) == FR_OK)
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d000      	beq.n	80068ac <find_volume+0x300>
 80068aa:	e76f      	b.n	800678c <find_volume+0x1e0>
		fs->fsi_flag = 0;
 80068ac:	2200      	movs	r2, #0
 80068ae:	4b25      	ldr	r3, [pc, #148]	; (8006944 <find_volume+0x398>)
 80068b0:	54e2      	strb	r2, [r4, r3]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80068b2:	4b23      	ldr	r3, [pc, #140]	; (8006940 <find_volume+0x394>)
 80068b4:	5ce2      	ldrb	r2, [r4, r3]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	5ce3      	ldrb	r3, [r4, r3]
 80068ba:	0212      	lsls	r2, r2, #8
 80068bc:	4313      	orrs	r3, r2
 80068be:	4a25      	ldr	r2, [pc, #148]	; (8006954 <find_volume+0x3a8>)
 80068c0:	b21b      	sxth	r3, r3
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d000      	beq.n	80068c8 <find_volume+0x31c>
 80068c6:	e761      	b.n	800678c <find_volume+0x1e0>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <find_volume+0x3ac>)
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d000      	beq.n	80068d2 <find_volume+0x326>
 80068d0:	e75c      	b.n	800678c <find_volume+0x1e0>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80068d2:	22f2      	movs	r2, #242	; 0xf2
 80068d4:	0052      	lsls	r2, r2, #1
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <find_volume+0x3b0>)
 80068d8:	58a2      	ldr	r2, [r4, r2]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d000      	beq.n	80068e0 <find_volume+0x334>
 80068de:	e755      	b.n	800678c <find_volume+0x1e0>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80068e0:	23f4      	movs	r3, #244	; 0xf4
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	58e2      	ldr	r2, [r4, r3]
 80068e6:	3304      	adds	r3, #4
 80068e8:	58e1      	ldr	r1, [r4, r3]
 80068ea:	3320      	adds	r3, #32
 80068ec:	50e1      	str	r1, [r4, r3]
 80068ee:	3304      	adds	r3, #4
 80068f0:	50e2      	str	r2, [r4, r3]
 80068f2:	e74b      	b.n	800678c <find_volume+0x1e0>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068f4:	2701      	movs	r7, #1
 80068f6:	e677      	b.n	80065e8 <find_volume+0x3c>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80068f8:	0029      	movs	r1, r5
 80068fa:	0020      	movs	r0, r4
 80068fc:	f7ff fe0c 	bl	8006518 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006900:	2800      	cmp	r0, #0
 8006902:	d1ac      	bne.n	800685e <find_volume+0x2b2>
 8006904:	002e      	movs	r6, r5
 8006906:	e6b3      	b.n	8006670 <find_volume+0xc4>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006908:	0031      	movs	r1, r6
 800690a:	0020      	movs	r0, r4
 800690c:	f7ff fe04 	bl	8006518 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006910:	2800      	cmp	r0, #0
 8006912:	d1a6      	bne.n	8006862 <find_volume+0x2b6>
 8006914:	e6ac      	b.n	8006670 <find_volume+0xc4>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006916:	4641      	mov	r1, r8
 8006918:	0020      	movs	r0, r4
 800691a:	f7ff fdfd 	bl	8006518 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800691e:	2800      	cmp	r0, #0
 8006920:	d1a2      	bne.n	8006868 <find_volume+0x2bc>
 8006922:	4646      	mov	r6, r8
 8006924:	e6a4      	b.n	8006670 <find_volume+0xc4>
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	20000050 	.word	0x20000050
 800692c:	00000201 	.word	0x00000201
 8006930:	00000203 	.word	0x00000203
 8006934:	00000202 	.word	0x00000202
 8006938:	00000ff5 	.word	0x00000ff5
 800693c:	0000fff5 	.word	0x0000fff5
 8006940:	000001ff 	.word	0x000001ff
 8006944:	00000205 	.word	0x00000205
 8006948:	2000006c 	.word	0x2000006c
 800694c:	00000206 	.word	0x00000206
 8006950:	20000054 	.word	0x20000054
 8006954:	ffffaa55 	.word	0xffffaa55
 8006958:	41615252 	.word	0x41615252
 800695c:	61417272 	.word	0x61417272
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006960:	2385      	movs	r3, #133	; 0x85
 8006962:	1c82      	adds	r2, r0, #2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	50e2      	str	r2, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8006968:	3308      	adds	r3, #8
 800696a:	50e6      	str	r6, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800696c:	2188      	movs	r1, #136	; 0x88
 800696e:	4653      	mov	r3, sl
 8006970:	0089      	lsls	r1, r1, #2
 8006972:	199b      	adds	r3, r3, r6
 8006974:	5063      	str	r3, [r4, r1]
	fs->database = bsect + sysect;						/* Data start sector */
 8006976:	445e      	add	r6, fp
 8006978:	3108      	adds	r1, #8
 800697a:	5066      	str	r6, [r4, r1]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800697c:	4649      	mov	r1, r9
 800697e:	2900      	cmp	r1, #0
 8006980:	d100      	bne.n	8006984 <find_volume+0x3d8>
 8006982:	e774      	b.n	800686e <find_volume+0x2c2>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006984:	9901      	ldr	r1, [sp, #4]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006986:	0050      	lsls	r0, r2, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006988:	468c      	mov	ip, r1
 800698a:	2189      	movs	r1, #137	; 0x89
 800698c:	4463      	add	r3, ip
 800698e:	0089      	lsls	r1, r1, #2
 8006990:	5063      	str	r3, [r4, r1]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006992:	2301      	movs	r3, #1
 8006994:	1880      	adds	r0, r0, r2
 8006996:	0840      	lsrs	r0, r0, #1
 8006998:	401a      	ands	r2, r3
 800699a:	1880      	adds	r0, r0, r2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800699c:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <find_volume+0x45c>)
 800699e:	4694      	mov	ip, r2
 80069a0:	4460      	add	r0, ip
 80069a2:	0a40      	lsrs	r0, r0, #9
 80069a4:	4285      	cmp	r5, r0
 80069a6:	d200      	bcs.n	80069aa <find_volume+0x3fe>
 80069a8:	e761      	b.n	800686e <find_volume+0x2c2>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80069aa:	2201      	movs	r2, #1
 80069ac:	2184      	movs	r1, #132	; 0x84
 80069ae:	4252      	negs	r2, r2
 80069b0:	0089      	lsls	r1, r1, #2
 80069b2:	5062      	str	r2, [r4, r1]
 80069b4:	3904      	subs	r1, #4
 80069b6:	5062      	str	r2, [r4, r1]
	fs->fsi_flag = 0x80;
 80069b8:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <find_volume+0x460>)
 80069ba:	398d      	subs	r1, #141	; 0x8d
 80069bc:	39ff      	subs	r1, #255	; 0xff
 80069be:	54a1      	strb	r1, [r4, r2]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80069c0:	e6e5      	b.n	800678e <find_volume+0x1e2>
	if (vol < 0) return FR_INVALID_DRIVE;
 80069c2:	270b      	movs	r7, #11
 80069c4:	e610      	b.n	80065e8 <find_volume+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	e6ef      	b.n	80067ac <find_volume+0x200>
 80069cc:	464e      	mov	r6, r9
 80069ce:	e64f      	b.n	8006670 <find_volume+0xc4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80069d0:	2385      	movs	r3, #133	; 0x85
 80069d2:	3002      	adds	r0, #2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	50e0      	str	r0, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 80069d8:	3308      	adds	r3, #8
 80069da:	50e6      	str	r6, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80069dc:	2288      	movs	r2, #136	; 0x88
 80069de:	4653      	mov	r3, sl
 80069e0:	0092      	lsls	r2, r2, #2
 80069e2:	199b      	adds	r3, r3, r6
 80069e4:	50a3      	str	r3, [r4, r2]
	fs->database = bsect + sysect;						/* Data start sector */
 80069e6:	445e      	add	r6, fp
 80069e8:	3208      	adds	r2, #8
 80069ea:	50a6      	str	r6, [r4, r2]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80069ec:	464a      	mov	r2, r9
 80069ee:	2a00      	cmp	r2, #0
 80069f0:	d100      	bne.n	80069f4 <find_volume+0x448>
 80069f2:	e73c      	b.n	800686e <find_volume+0x2c2>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80069f4:	9a01      	ldr	r2, [sp, #4]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069f6:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80069f8:	4694      	mov	ip, r2
 80069fa:	2289      	movs	r2, #137	; 0x89
 80069fc:	4463      	add	r3, ip
 80069fe:	0092      	lsls	r2, r2, #2
 8006a00:	50a3      	str	r3, [r4, r2]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006a02:	2302      	movs	r3, #2
 8006a04:	e7ca      	b.n	800699c <find_volume+0x3f0>
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	000001ff 	.word	0x000001ff
 8006a0c:	00000205 	.word	0x00000205

08006a10 <create_chain>:
{
 8006a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a12:	4645      	mov	r5, r8
 8006a14:	46de      	mov	lr, fp
 8006a16:	4657      	mov	r7, sl
 8006a18:	464e      	mov	r6, r9
 8006a1a:	b5e0      	push	{r5, r6, r7, lr}
 8006a1c:	4688      	mov	r8, r1
 8006a1e:	0005      	movs	r5, r0
 8006a20:	b083      	sub	sp, #12
	if (clst == 0) {		/* Create a new chain */
 8006a22:	2900      	cmp	r1, #0
 8006a24:	d120      	bne.n	8006a68 <create_chain+0x58>
		scl = fs->last_clust;			/* Get suggested start point */
 8006a26:	2383      	movs	r3, #131	; 0x83
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006a2c:	2e00      	cmp	r6, #0
 8006a2e:	d12f      	bne.n	8006a90 <create_chain+0x80>
 8006a30:	3308      	adds	r3, #8
 8006a32:	58c3      	ldr	r3, [r0, r3]
 8006a34:	3601      	adds	r6, #1
		switch (fs->fs_type) {
 8006a36:	2280      	movs	r2, #128	; 0x80
 8006a38:	0034      	movs	r4, r6
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	4691      	mov	r9, r2
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a3e:	3220      	adds	r2, #32
 8006a40:	4693      	mov	fp, r2
		ncl++;							/* Next cluster */
 8006a42:	3401      	adds	r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a44:	320c      	adds	r2, #12
 8006a46:	4692      	mov	sl, r2
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d367      	bcc.n	8006b1c <create_chain+0x10c>
			if (ncl > scl) return 0;	/* No free cluster */
 8006a4c:	2e01      	cmp	r6, #1
 8006a4e:	d800      	bhi.n	8006a52 <create_chain+0x42>
 8006a50:	e0b5      	b.n	8006bbe <create_chain+0x1ae>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d823      	bhi.n	8006a9e <create_chain+0x8e>
		switch (fs->fs_type) {
 8006a56:	2401      	movs	r4, #1
}
 8006a58:	0020      	movs	r0, r4
 8006a5a:	b003      	add	sp, #12
 8006a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8006a5e:	46bb      	mov	fp, r7
 8006a60:	46b2      	mov	sl, r6
 8006a62:	46a9      	mov	r9, r5
 8006a64:	46a0      	mov	r8, r4
 8006a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a68:	2901      	cmp	r1, #1
 8006a6a:	d9f4      	bls.n	8006a56 <create_chain+0x46>
 8006a6c:	2685      	movs	r6, #133	; 0x85
 8006a6e:	00b6      	lsls	r6, r6, #2
 8006a70:	5983      	ldr	r3, [r0, r6]
 8006a72:	4299      	cmp	r1, r3
 8006a74:	d2ef      	bcs.n	8006a56 <create_chain+0x46>
 8006a76:	f7ff fa5d 	bl	8005f34 <get_fat.part.0>
 8006a7a:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8006a7c:	2801      	cmp	r0, #1
 8006a7e:	d9ea      	bls.n	8006a56 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d100      	bne.n	8006a86 <create_chain+0x76>
 8006a84:	e098      	b.n	8006bb8 <create_chain+0x1a8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a86:	59ab      	ldr	r3, [r5, r6]
 8006a88:	4283      	cmp	r3, r0
 8006a8a:	d8e5      	bhi.n	8006a58 <create_chain+0x48>
 8006a8c:	4646      	mov	r6, r8
 8006a8e:	e7d2      	b.n	8006a36 <create_chain+0x26>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006a90:	2385      	movs	r3, #133	; 0x85
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	58c3      	ldr	r3, [r0, r3]
 8006a96:	42b3      	cmp	r3, r6
 8006a98:	d8cd      	bhi.n	8006a36 <create_chain+0x26>
 8006a9a:	2601      	movs	r6, #1
 8006a9c:	e7cb      	b.n	8006a36 <create_chain+0x26>
		switch (fs->fs_type) {
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	5ceb      	ldrb	r3, [r5, r3]
			ncl = 2;
 8006aa2:	2402      	movs	r4, #2
		switch (fs->fs_type) {
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d03f      	beq.n	8006b28 <create_chain+0x118>
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d055      	beq.n	8006b58 <create_chain+0x148>
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d1d2      	bne.n	8006a56 <create_chain+0x46>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab0:	465b      	mov	r3, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ab2:	4652      	mov	r2, sl
			bc = (UINT)clst; bc += bc / 2;
 8006ab4:	0867      	lsrs	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab6:	58eb      	ldr	r3, [r5, r3]
			bc = (UINT)clst; bc += bc / 2;
 8006ab8:	193f      	adds	r7, r7, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aba:	0a79      	lsrs	r1, r7, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006abc:	58aa      	ldr	r2, [r5, r2]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006abe:	18c9      	adds	r1, r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ac0:	4291      	cmp	r1, r2
 8006ac2:	d008      	beq.n	8006ad6 <create_chain+0xc6>
 8006ac4:	0028      	movs	r0, r5
 8006ac6:	f7ff f9e5 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d174      	bne.n	8006bb8 <create_chain+0x1a8>
 8006ace:	465b      	mov	r3, fp
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	58eb      	ldr	r3, [r5, r3]
 8006ad4:	58aa      	ldr	r2, [r5, r2]
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ad6:	1c79      	adds	r1, r7, #1
 8006ad8:	9101      	str	r1, [sp, #4]
 8006ada:	05ff      	lsls	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006adc:	0a49      	lsrs	r1, r1, #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ade:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ae0:	18c9      	adds	r1, r1, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ae2:	5def      	ldrb	r7, [r5, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ae4:	4291      	cmp	r1, r2
 8006ae6:	d004      	beq.n	8006af2 <create_chain+0xe2>
 8006ae8:	0028      	movs	r0, r5
 8006aea:	f7ff f9d3 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d162      	bne.n	8006bb8 <create_chain+0x1a8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	05db      	lsls	r3, r3, #23
 8006af6:	0ddb      	lsrs	r3, r3, #23
 8006af8:	5ceb      	ldrb	r3, [r5, r3]
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006afe:	093b      	lsrs	r3, r7, #4
 8006b00:	07e2      	lsls	r2, r4, #31
 8006b02:	d55e      	bpl.n	8006bc2 <create_chain+0x1b2>
		if (cs == 0) break;				/* Found a free cluster */
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d047      	beq.n	8006b98 <create_chain+0x188>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d0a4      	beq.n	8006a56 <create_chain+0x46>
		if (ncl == scl) return 0;		/* No free cluster */
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d056      	beq.n	8006bbe <create_chain+0x1ae>
 8006b10:	2385      	movs	r3, #133	; 0x85
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	58eb      	ldr	r3, [r5, r3]
		ncl++;							/* Next cluster */
 8006b16:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	d297      	bcs.n	8006a4c <create_chain+0x3c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006b1c:	2c01      	cmp	r4, #1
 8006b1e:	d99a      	bls.n	8006a56 <create_chain+0x46>
		switch (fs->fs_type) {
 8006b20:	464b      	mov	r3, r9
 8006b22:	5ceb      	ldrb	r3, [r5, r3]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d1bf      	bne.n	8006aa8 <create_chain+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b28:	465b      	mov	r3, fp
 8006b2a:	58eb      	ldr	r3, [r5, r3]
 8006b2c:	0a21      	lsrs	r1, r4, #8
 8006b2e:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b30:	4653      	mov	r3, sl
 8006b32:	58eb      	ldr	r3, [r5, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b34:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b36:	4299      	cmp	r1, r3
 8006b38:	d004      	beq.n	8006b44 <create_chain+0x134>
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	f7ff f9aa 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d139      	bne.n	8006bb8 <create_chain+0x1a8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b44:	23ff      	movs	r3, #255	; 0xff
 8006b46:	0062      	lsls	r2, r4, #1
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	401a      	ands	r2, r3
			val = LD_WORD(p);
 8006b4c:	18ab      	adds	r3, r5, r2
 8006b4e:	785f      	ldrb	r7, [r3, #1]
 8006b50:	5cab      	ldrb	r3, [r5, r2]
 8006b52:	023f      	lsls	r7, r7, #8
 8006b54:	433b      	orrs	r3, r7
			break;
 8006b56:	e7d5      	b.n	8006b04 <create_chain+0xf4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b58:	465b      	mov	r3, fp
 8006b5a:	58eb      	ldr	r3, [r5, r3]
 8006b5c:	09e1      	lsrs	r1, r4, #7
 8006b5e:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b60:	4653      	mov	r3, sl
 8006b62:	58eb      	ldr	r3, [r5, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b64:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b66:	4299      	cmp	r1, r3
 8006b68:	d004      	beq.n	8006b74 <create_chain+0x164>
 8006b6a:	0028      	movs	r0, r5
 8006b6c:	f7ff f992 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d121      	bne.n	8006bb8 <create_chain+0x1a8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006b74:	23fe      	movs	r3, #254	; 0xfe
 8006b76:	00a2      	lsls	r2, r4, #2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	18a9      	adds	r1, r5, r2
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006b7e:	78cb      	ldrb	r3, [r1, #3]
 8006b80:	7888      	ldrb	r0, [r1, #2]
 8006b82:	5caa      	ldrb	r2, [r5, r2]
 8006b84:	784f      	ldrb	r7, [r1, #1]
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	0400      	lsls	r0, r0, #16
 8006b8a:	4303      	orrs	r3, r0
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	023f      	lsls	r7, r7, #8
 8006b90:	433b      	orrs	r3, r7
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	091b      	lsrs	r3, r3, #4
			break;
 8006b96:	e7b5      	b.n	8006b04 <create_chain+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006b98:	2685      	movs	r6, #133	; 0x85
 8006b9a:	00b6      	lsls	r6, r6, #2
 8006b9c:	59ab      	ldr	r3, [r5, r6]
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	d800      	bhi.n	8006ba4 <create_chain+0x194>
 8006ba2:	e758      	b.n	8006a56 <create_chain+0x46>
 8006ba4:	0021      	movs	r1, r4
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <create_chain+0x1fc>)
 8006baa:	f7ff fb97 	bl	80062dc <put_fat.part.0>
	if (res == FR_OK && clst != 0) {
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d00a      	beq.n	8006bc8 <create_chain+0x1b8>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006bb2:	2801      	cmp	r0, #1
 8006bb4:	d000      	beq.n	8006bb8 <create_chain+0x1a8>
 8006bb6:	e74e      	b.n	8006a56 <create_chain+0x46>
 8006bb8:	2401      	movs	r4, #1
 8006bba:	4264      	negs	r4, r4
 8006bbc:	e74c      	b.n	8006a58 <create_chain+0x48>
			if (ncl > scl) return 0;	/* No free cluster */
 8006bbe:	2400      	movs	r4, #0
 8006bc0:	e74a      	b.n	8006a58 <create_chain+0x48>
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006bc2:	053f      	lsls	r7, r7, #20
 8006bc4:	0d3b      	lsrs	r3, r7, #20
 8006bc6:	e79d      	b.n	8006b04 <create_chain+0xf4>
	if (res == FR_OK && clst != 0) {
 8006bc8:	4643      	mov	r3, r8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <create_chain+0x1da>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d800      	bhi.n	8006bd4 <create_chain+0x1c4>
 8006bd2:	e740      	b.n	8006a56 <create_chain+0x46>
 8006bd4:	59ab      	ldr	r3, [r5, r6]
 8006bd6:	4598      	cmp	r8, r3
 8006bd8:	d300      	bcc.n	8006bdc <create_chain+0x1cc>
 8006bda:	e73c      	b.n	8006a56 <create_chain+0x46>
 8006bdc:	0022      	movs	r2, r4
 8006bde:	4641      	mov	r1, r8
 8006be0:	0028      	movs	r0, r5
 8006be2:	f7ff fb7b 	bl	80062dc <put_fat.part.0>
	if (res == FR_OK) {
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d1e3      	bne.n	8006bb2 <create_chain+0x1a2>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006bea:	2383      	movs	r3, #131	; 0x83
		if (fs->free_clust != 0xFFFFFFFF) {
 8006bec:	2284      	movs	r2, #132	; 0x84
		fs->last_clust = ncl;			/* Update FSINFO */
 8006bee:	009b      	lsls	r3, r3, #2
		if (fs->free_clust != 0xFFFFFFFF) {
 8006bf0:	0092      	lsls	r2, r2, #2
		fs->last_clust = ncl;			/* Update FSINFO */
 8006bf2:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006bf4:	58ab      	ldr	r3, [r5, r2]
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	d100      	bne.n	8006bfc <create_chain+0x1ec>
 8006bfa:	e72d      	b.n	8006a58 <create_chain+0x48>
			fs->fsi_flag |= 1;
 8006bfc:	2101      	movs	r1, #1
			fs->free_clust--;
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 8006c02:	4a03      	ldr	r2, [pc, #12]	; (8006c10 <create_chain+0x200>)
 8006c04:	5cab      	ldrb	r3, [r5, r2]
 8006c06:	430b      	orrs	r3, r1
 8006c08:	54ab      	strb	r3, [r5, r2]
 8006c0a:	e725      	b.n	8006a58 <create_chain+0x48>
 8006c0c:	0fffffff 	.word	0x0fffffff
 8006c10:	00000205 	.word	0x00000205

08006c14 <dir_sdi>:
{
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	4657      	mov	r7, sl
 8006c18:	464e      	mov	r6, r9
 8006c1a:	4645      	mov	r5, r8
 8006c1c:	46de      	mov	lr, fp
	dp->index = (WORD)idx;	/* Current index */
 8006c1e:	4b72      	ldr	r3, [pc, #456]	; (8006de8 <dir_sdi+0x1d4>)
{
 8006c20:	b5e0      	push	{r5, r6, r7, lr}
	dp->index = (WORD)idx;	/* Current index */
 8006c22:	52c1      	strh	r1, [r0, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006c24:	3302      	adds	r3, #2
 8006c26:	58c6      	ldr	r6, [r0, r3]
{
 8006c28:	0007      	movs	r7, r0
 8006c2a:	000d      	movs	r5, r1
 8006c2c:	b083      	sub	sp, #12
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006c2e:	2e01      	cmp	r6, #1
 8006c30:	d02a      	beq.n	8006c88 <dir_sdi+0x74>
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	2385      	movs	r3, #133	; 0x85
 8006c36:	0092      	lsls	r2, r2, #2
 8006c38:	5884      	ldr	r4, [r0, r2]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	58e3      	ldr	r3, [r4, r3]
 8006c3e:	42b3      	cmp	r3, r6
 8006c40:	d922      	bls.n	8006c88 <dir_sdi+0x74>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d12e      	bne.n	8006ca4 <dir_sdi+0x90>
 8006c46:	5ca2      	ldrb	r2, [r4, r2]
 8006c48:	2a03      	cmp	r2, #3
 8006c4a:	d025      	beq.n	8006c98 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006c4c:	2382      	movs	r3, #130	; 0x82
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	5ae3      	ldrh	r3, [r4, r3]
 8006c52:	42ab      	cmp	r3, r5
 8006c54:	d918      	bls.n	8006c88 <dir_sdi+0x74>
		sect = dp->fs->dirbase;
 8006c56:	2389      	movs	r3, #137	; 0x89
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	58e3      	ldr	r3, [r4, r3]
	dp->clust = clst;	/* Current cluster# */
 8006c5c:	2283      	movs	r2, #131	; 0x83
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	50be      	str	r6, [r7, r2]
	if (!sect) return FR_INT_ERR;
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <dir_sdi+0x74>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006c66:	092a      	lsrs	r2, r5, #4
 8006c68:	18d3      	adds	r3, r2, r3
 8006c6a:	2284      	movs	r2, #132	; 0x84
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006c6c:	210f      	movs	r1, #15
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	50bb      	str	r3, [r7, r2]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006c72:	2385      	movs	r3, #133	; 0x85
 8006c74:	400d      	ands	r5, r1
 8006c76:	016d      	lsls	r5, r5, #5
 8006c78:	1964      	adds	r4, r4, r5
 8006c7a:	009b      	lsls	r3, r3, #2
	return FR_OK;
 8006c7c:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006c7e:	50fc      	str	r4, [r7, r3]
	return FR_OK;
 8006c80:	e003      	b.n	8006c8a <dir_sdi+0x76>
	dp->clust = clst;	/* Current cluster# */
 8006c82:	2383      	movs	r3, #131	; 0x83
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	50fe      	str	r6, [r7, r3]
	if (!sect) return FR_INT_ERR;
 8006c88:	2002      	movs	r0, #2
}
 8006c8a:	b003      	add	sp, #12
 8006c8c:	bcf0      	pop	{r4, r5, r6, r7}
 8006c8e:	46bb      	mov	fp, r7
 8006c90:	46b2      	mov	sl, r6
 8006c92:	46a9      	mov	r9, r5
 8006c94:	46a0      	mov	r8, r4
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		clst = dp->fs->dirbase;
 8006c98:	2289      	movs	r2, #137	; 0x89
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	58a2      	ldr	r2, [r4, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	d0d4      	beq.n	8006c4c <dir_sdi+0x38>
 8006ca2:	0016      	movs	r6, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006ca4:	4a51      	ldr	r2, [pc, #324]	; (8006dec <dir_sdi+0x1d8>)
 8006ca6:	5ca2      	ldrb	r2, [r4, r2]
 8006ca8:	0112      	lsls	r2, r2, #4
 8006caa:	4690      	mov	r8, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8006cac:	4295      	cmp	r5, r2
 8006cae:	d200      	bcs.n	8006cb2 <dir_sdi+0x9e>
 8006cb0:	e08d      	b.n	8006dce <dir_sdi+0x1ba>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006cb2:	2e01      	cmp	r6, #1
 8006cb4:	d9e8      	bls.n	8006c88 <dir_sdi+0x74>
		switch (fs->fs_type) {
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	4691      	mov	r9, r2
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cbc:	3220      	adds	r2, #32
 8006cbe:	4693      	mov	fp, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cc0:	320c      	adds	r2, #12
 8006cc2:	4692      	mov	sl, r2
 8006cc4:	e046      	b.n	8006d54 <dir_sdi+0x140>
		switch (fs->fs_type) {
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	5ce3      	ldrb	r3, [r4, r3]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d065      	beq.n	8006d9a <dir_sdi+0x186>
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d043      	beq.n	8006d5a <dir_sdi+0x146>
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d1d8      	bne.n	8006c88 <dir_sdi+0x74>
			bc = (UINT)clst; bc += bc / 2;
 8006cd6:	0873      	lsrs	r3, r6, #1
 8006cd8:	199b      	adds	r3, r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cda:	465a      	mov	r2, fp
 8006cdc:	0a59      	lsrs	r1, r3, #9
			bc = (UINT)clst; bc += bc / 2;
 8006cde:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ce0:	4653      	mov	r3, sl
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ce2:	58a2      	ldr	r2, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ce4:	58e0      	ldr	r0, [r4, r3]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ce6:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ce8:	4281      	cmp	r1, r0
 8006cea:	d008      	beq.n	8006cfe <dir_sdi+0xea>
 8006cec:	0020      	movs	r0, r4
 8006cee:	f7ff f8d1 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d169      	bne.n	8006dca <dir_sdi+0x1b6>
 8006cf6:	465b      	mov	r3, fp
 8006cf8:	58e2      	ldr	r2, [r4, r3]
 8006cfa:	4653      	mov	r3, sl
 8006cfc:	58e0      	ldr	r0, [r4, r3]
			wc = fs->win.d8[bc++ % SS(fs)];
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	1c59      	adds	r1, r3, #1
 8006d02:	05db      	lsls	r3, r3, #23
 8006d04:	0ddb      	lsrs	r3, r3, #23
 8006d06:	5ce3      	ldrb	r3, [r4, r3]
 8006d08:	9100      	str	r1, [sp, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d0a:	0a49      	lsrs	r1, r1, #9
 8006d0c:	1889      	adds	r1, r1, r2
			wc = fs->win.d8[bc++ % SS(fs)];
 8006d0e:	9301      	str	r3, [sp, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d10:	4281      	cmp	r1, r0
 8006d12:	d004      	beq.n	8006d1e <dir_sdi+0x10a>
 8006d14:	0020      	movs	r0, r4
 8006d16:	f7ff f8bd 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d155      	bne.n	8006dca <dir_sdi+0x1b6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006d1e:	9b00      	ldr	r3, [sp, #0]
 8006d20:	9a01      	ldr	r2, [sp, #4]
 8006d22:	05db      	lsls	r3, r3, #23
 8006d24:	0ddb      	lsrs	r3, r3, #23
 8006d26:	5ce3      	ldrb	r3, [r4, r3]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	4313      	orrs	r3, r2
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	4032      	ands	r2, r6
 8006d30:	091e      	lsrs	r6, r3, #4
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d101      	bne.n	8006d3a <dir_sdi+0x126>
 8006d36:	051e      	lsls	r6, r3, #20
 8006d38:	0d36      	lsrs	r6, r6, #20
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006d3a:	2e01      	cmp	r6, #1
 8006d3c:	d9a4      	bls.n	8006c88 <dir_sdi+0x74>
 8006d3e:	464b      	mov	r3, r9
 8006d40:	58fc      	ldr	r4, [r7, r3]
 8006d42:	2385      	movs	r3, #133	; 0x85
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	58e3      	ldr	r3, [r4, r3]
 8006d48:	42b3      	cmp	r3, r6
 8006d4a:	d99d      	bls.n	8006c88 <dir_sdi+0x74>
			idx -= ic;
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	1aad      	subs	r5, r5, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8006d50:	45a8      	cmp	r8, r5
 8006d52:	d83c      	bhi.n	8006dce <dir_sdi+0x1ba>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006d54:	429e      	cmp	r6, r3
 8006d56:	d297      	bcs.n	8006c88 <dir_sdi+0x74>
 8006d58:	e7b5      	b.n	8006cc6 <dir_sdi+0xb2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d5a:	465b      	mov	r3, fp
 8006d5c:	58e3      	ldr	r3, [r4, r3]
 8006d5e:	09f1      	lsrs	r1, r6, #7
 8006d60:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d62:	4653      	mov	r3, sl
 8006d64:	58e3      	ldr	r3, [r4, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d66:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d004      	beq.n	8006d76 <dir_sdi+0x162>
 8006d6c:	0020      	movs	r0, r4
 8006d6e:	f7ff f891 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d129      	bne.n	8006dca <dir_sdi+0x1b6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006d76:	23fe      	movs	r3, #254	; 0xfe
 8006d78:	00b6      	lsls	r6, r6, #2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4033      	ands	r3, r6
 8006d7e:	18e2      	adds	r2, r4, r3
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006d80:	78d6      	ldrb	r6, [r2, #3]
 8006d82:	7891      	ldrb	r1, [r2, #2]
 8006d84:	5ce3      	ldrb	r3, [r4, r3]
 8006d86:	0636      	lsls	r6, r6, #24
 8006d88:	0409      	lsls	r1, r1, #16
 8006d8a:	430e      	orrs	r6, r1
 8006d8c:	431e      	orrs	r6, r3
 8006d8e:	7853      	ldrb	r3, [r2, #1]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	431e      	orrs	r6, r3
 8006d94:	0136      	lsls	r6, r6, #4
 8006d96:	0936      	lsrs	r6, r6, #4
			break;
 8006d98:	e7cf      	b.n	8006d3a <dir_sdi+0x126>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	58e3      	ldr	r3, [r4, r3]
 8006d9e:	0a31      	lsrs	r1, r6, #8
 8006da0:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006da2:	4653      	mov	r3, sl
 8006da4:	58e3      	ldr	r3, [r4, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006da6:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006da8:	4299      	cmp	r1, r3
 8006daa:	d004      	beq.n	8006db6 <dir_sdi+0x1a2>
 8006dac:	0020      	movs	r0, r4
 8006dae:	f7ff f871 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d109      	bne.n	8006dca <dir_sdi+0x1b6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006db6:	23ff      	movs	r3, #255	; 0xff
 8006db8:	0076      	lsls	r6, r6, #1
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4033      	ands	r3, r6
			val = LD_WORD(p);
 8006dbe:	18e2      	adds	r2, r4, r3
 8006dc0:	7856      	ldrb	r6, [r2, #1]
 8006dc2:	5ce3      	ldrb	r3, [r4, r3]
 8006dc4:	0236      	lsls	r6, r6, #8
 8006dc6:	431e      	orrs	r6, r3
			break;
 8006dc8:	e7b7      	b.n	8006d3a <dir_sdi+0x126>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e75d      	b.n	8006c8a <dir_sdi+0x76>
	clst -= 2;
 8006dce:	1eb2      	subs	r2, r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006dd0:	3b02      	subs	r3, #2
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d300      	bcc.n	8006dd8 <dir_sdi+0x1c4>
 8006dd6:	e754      	b.n	8006c82 <dir_sdi+0x6e>
	return clst * fs->csize + fs->database;
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <dir_sdi+0x1d8>)
 8006dda:	5ce3      	ldrb	r3, [r4, r3]
 8006ddc:	4353      	muls	r3, r2
 8006dde:	228a      	movs	r2, #138	; 0x8a
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	58a2      	ldr	r2, [r4, r2]
 8006de4:	189b      	adds	r3, r3, r2
 8006de6:	e739      	b.n	8006c5c <dir_sdi+0x48>
 8006de8:	00000206 	.word	0x00000206
 8006dec:	00000202 	.word	0x00000202

08006df0 <follow_path>:
{
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	4645      	mov	r5, r8
 8006df4:	46de      	mov	lr, fp
 8006df6:	4657      	mov	r7, sl
 8006df8:	464e      	mov	r6, r9
 8006dfa:	b5e0      	push	{r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006dfc:	780b      	ldrb	r3, [r1, #0]
{
 8006dfe:	0005      	movs	r5, r0
 8006e00:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006e02:	2b2f      	cmp	r3, #47	; 0x2f
 8006e04:	d057      	beq.n	8006eb6 <follow_path+0xc6>
 8006e06:	2b5c      	cmp	r3, #92	; 0x5c
 8006e08:	d055      	beq.n	8006eb6 <follow_path+0xc6>
	dp->sclust = 0;							/* Always start from the root directory */
 8006e0a:	2382      	movs	r3, #130	; 0x82
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	50ec      	str	r4, [r5, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e12:	4643      	mov	r3, r8
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b1f      	cmp	r3, #31
 8006e18:	d958      	bls.n	8006ecc <follow_path+0xdc>
 8006e1a:	2386      	movs	r3, #134	; 0x86
		*d++ = (BYTE)val;
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4691      	mov	r9, r2
 8006e22:	46c2      	mov	sl, r8
 8006e24:	58eb      	ldr	r3, [r5, r3]
 8006e26:	e002      	b.n	8006e2e <follow_path+0x3e>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4694      	mov	ip, r2
 8006e2c:	44e2      	add	sl, ip
 8006e2e:	4652      	mov	r2, sl
 8006e30:	7812      	ldrb	r2, [r2, #0]
 8006e32:	2a2f      	cmp	r2, #47	; 0x2f
 8006e34:	d0f8      	beq.n	8006e28 <follow_path+0x38>
 8006e36:	2a5c      	cmp	r2, #92	; 0x5c
 8006e38:	d0f6      	beq.n	8006e28 <follow_path+0x38>
		*d++ = (BYTE)val;
 8006e3a:	464a      	mov	r2, r9
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	705a      	strb	r2, [r3, #1]
 8006e40:	709a      	strb	r2, [r3, #2]
 8006e42:	70da      	strb	r2, [r3, #3]
 8006e44:	711a      	strb	r2, [r3, #4]
 8006e46:	715a      	strb	r2, [r3, #5]
 8006e48:	719a      	strb	r2, [r3, #6]
 8006e4a:	71da      	strb	r2, [r3, #7]
 8006e4c:	721a      	strb	r2, [r3, #8]
 8006e4e:	725a      	strb	r2, [r3, #9]
 8006e50:	729a      	strb	r2, [r3, #10]
		c = (BYTE)p[si++];
 8006e52:	4652      	mov	r2, sl
 8006e54:	7812      	ldrb	r2, [r2, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006e56:	2a20      	cmp	r2, #32
 8006e58:	d913      	bls.n	8006e82 <follow_path+0x92>
				b |= 2;
 8006e5a:	2702      	movs	r7, #2
 8006e5c:	46bb      	mov	fp, r7
		c = (BYTE)p[si++];
 8006e5e:	2701      	movs	r7, #1
	si = i = b = 0; ni = 8;
 8006e60:	2400      	movs	r4, #0
		c = (BYTE)p[si++];
 8006e62:	427f      	negs	r7, r7
 8006e64:	4457      	add	r7, sl
 8006e66:	469c      	mov	ip, r3
	si = i = b = 0; ni = 8;
 8006e68:	2100      	movs	r1, #0
 8006e6a:	2608      	movs	r6, #8
		c = (BYTE)p[si++];
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	46b8      	mov	r8, r7
 8006e70:	0023      	movs	r3, r4
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006e72:	2a2f      	cmp	r2, #47	; 0x2f
 8006e74:	d056      	beq.n	8006f24 <follow_path+0x134>
 8006e76:	2a5c      	cmp	r2, #92	; 0x5c
 8006e78:	d054      	beq.n	8006f24 <follow_path+0x134>
		if (c == '.' || i >= ni) {
 8006e7a:	2a2e      	cmp	r2, #46	; 0x2e
 8006e7c:	d02e      	beq.n	8006edc <follow_path+0xec>
 8006e7e:	429e      	cmp	r6, r3
 8006e80:	d806      	bhi.n	8006e90 <follow_path+0xa0>
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006e82:	2006      	movs	r0, #6
}
 8006e84:	bcf0      	pop	{r4, r5, r6, r7}
 8006e86:	46bb      	mov	fp, r7
 8006e88:	46b2      	mov	sl, r6
 8006e8a:	46a9      	mov	r9, r5
 8006e8c:	46a0      	mov	r8, r4
 8006e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (c >= 0x80) {				/* Extended character? */
 8006e90:	b254      	sxtb	r4, r2
 8006e92:	2c00      	cmp	r4, #0
 8006e94:	da05      	bge.n	8006ea2 <follow_path+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006e96:	2403      	movs	r4, #3
 8006e98:	4321      	orrs	r1, r4
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006e9a:	4cc3      	ldr	r4, [pc, #780]	; (80071a8 <follow_path+0x3b8>)
 8006e9c:	3a80      	subs	r2, #128	; 0x80
 8006e9e:	5ca2      	ldrb	r2, [r4, r2]
			b |= 3;						/* Eliminate NT flag */
 8006ea0:	b2c9      	uxtb	r1, r1
	while (*str && *str != chr) str++;
 8006ea2:	2422      	movs	r4, #34	; 0x22
 8006ea4:	4fc1      	ldr	r7, [pc, #772]	; (80071ac <follow_path+0x3bc>)
 8006ea6:	e003      	b.n	8006eb0 <follow_path+0xc0>
 8006ea8:	787c      	ldrb	r4, [r7, #1]
 8006eaa:	3701      	adds	r7, #1
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	d024      	beq.n	8006efa <follow_path+0x10a>
 8006eb0:	42a2      	cmp	r2, r4
 8006eb2:	d1f9      	bne.n	8006ea8 <follow_path+0xb8>
 8006eb4:	e7e5      	b.n	8006e82 <follow_path+0x92>
		path++;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	469c      	mov	ip, r3
	dp->sclust = 0;							/* Always start from the root directory */
 8006eba:	2382      	movs	r3, #130	; 0x82
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	009b      	lsls	r3, r3, #2
		path++;
 8006ec0:	44e0      	add	r8, ip
	dp->sclust = 0;							/* Always start from the root directory */
 8006ec2:	50ec      	str	r4, [r5, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ec4:	4643      	mov	r3, r8
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b1f      	cmp	r3, #31
 8006eca:	d8a6      	bhi.n	8006e1a <follow_path+0x2a>
		res = dir_sdi(dp, 0);
 8006ecc:	2100      	movs	r1, #0
 8006ece:	0028      	movs	r0, r5
 8006ed0:	f7ff fea0 	bl	8006c14 <dir_sdi>
		dp->dir = 0;
 8006ed4:	2385      	movs	r3, #133	; 0x85
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	50ec      	str	r4, [r5, r3]
 8006eda:	e7d3      	b.n	8006e84 <follow_path+0x94>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006edc:	2e08      	cmp	r6, #8
 8006ede:	d1d0      	bne.n	8006e82 <follow_path+0x92>
			i = 8; ni = 11;
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	260b      	movs	r6, #11
			b <<= 2; continue;
 8006ee4:	0089      	lsls	r1, r1, #2
 8006ee6:	b2c9      	uxtb	r1, r1
		c = (BYTE)p[si++];
 8006ee8:	4642      	mov	r2, r8
 8006eea:	3001      	adds	r0, #1
 8006eec:	5c12      	ldrb	r2, [r2, r0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006eee:	2a20      	cmp	r2, #32
 8006ef0:	d8bf      	bhi.n	8006e72 <follow_path+0x82>
 8006ef2:	4663      	mov	r3, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006ef4:	2204      	movs	r2, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8006ef6:	4482      	add	sl, r0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006ef8:	e01a      	b.n	8006f30 <follow_path+0x140>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006efa:	0014      	movs	r4, r2
 8006efc:	3c41      	subs	r4, #65	; 0x41
 8006efe:	2c19      	cmp	r4, #25
 8006f00:	d806      	bhi.n	8006f10 <follow_path+0x120>
				b |= 2;
 8006f02:	465c      	mov	r4, fp
 8006f04:	4321      	orrs	r1, r4
 8006f06:	b2c9      	uxtb	r1, r1
			sfn[i++] = c;
 8006f08:	4664      	mov	r4, ip
 8006f0a:	54e2      	strb	r2, [r4, r3]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	e7eb      	b.n	8006ee8 <follow_path+0xf8>
				if (IsLower(c)) {		/* ASCII small capital? */
 8006f10:	0014      	movs	r4, r2
 8006f12:	3c61      	subs	r4, #97	; 0x61
 8006f14:	2c19      	cmp	r4, #25
 8006f16:	d8f7      	bhi.n	8006f08 <follow_path+0x118>
					b |= 1; c -= 0x20;
 8006f18:	2401      	movs	r4, #1
 8006f1a:	3a20      	subs	r2, #32
 8006f1c:	4321      	orrs	r1, r4
 8006f1e:	b2c9      	uxtb	r1, r1
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	e7f1      	b.n	8006f08 <follow_path+0x118>
 8006f24:	001c      	movs	r4, r3
	*path = &p[si];						/* Return pointer to the next segment */
 8006f26:	4482      	add	sl, r0
 8006f28:	4663      	mov	r3, ip
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006f2a:	2c00      	cmp	r4, #0
 8006f2c:	d0a9      	beq.n	8006e82 <follow_path+0x92>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006f2e:	2200      	movs	r2, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006f30:	7818      	ldrb	r0, [r3, #0]
 8006f32:	28e5      	cmp	r0, #229	; 0xe5
 8006f34:	d101      	bne.n	8006f3a <follow_path+0x14a>
 8006f36:	38e0      	subs	r0, #224	; 0xe0
 8006f38:	7018      	strb	r0, [r3, #0]
	if (ni == 8) b <<= 2;
 8006f3a:	2e08      	cmp	r6, #8
 8006f3c:	d100      	bne.n	8006f40 <follow_path+0x150>
 8006f3e:	e125      	b.n	800718c <follow_path+0x39c>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006f40:	2003      	movs	r0, #3
 8006f42:	4008      	ands	r0, r1
 8006f44:	2801      	cmp	r0, #1
 8006f46:	d101      	bne.n	8006f4c <follow_path+0x15c>
 8006f48:	300f      	adds	r0, #15
 8006f4a:	4302      	orrs	r2, r0
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006f4c:	200c      	movs	r0, #12
 8006f4e:	4001      	ands	r1, r0
 8006f50:	2904      	cmp	r1, #4
 8006f52:	d101      	bne.n	8006f58 <follow_path+0x168>
 8006f54:	3104      	adds	r1, #4
 8006f56:	430a      	orrs	r2, r1
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f58:	2100      	movs	r1, #0
 8006f5a:	0028      	movs	r0, r5
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006f5c:	72da      	strb	r2, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f5e:	f7ff fe59 	bl	8006c14 <dir_sdi>
	if (res != FR_OK) return res;
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d000      	beq.n	8006f68 <follow_path+0x178>
 8006f66:	e116      	b.n	8007196 <follow_path+0x3a6>
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	58ec      	ldr	r4, [r5, r3]
 8006f6e:	3310      	adds	r3, #16
 8006f70:	58ee      	ldr	r6, [r5, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f72:	238b      	movs	r3, #139	; 0x8b
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	58e7      	ldr	r7, [r4, r3]
 8006f78:	42b7      	cmp	r7, r6
 8006f7a:	d015      	beq.n	8006fa8 <follow_path+0x1b8>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f7c:	3b28      	subs	r3, #40	; 0x28
 8006f7e:	469b      	mov	fp, r3
 8006f80:	5ce3      	ldrb	r3, [r4, r3]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d138      	bne.n	8006ff8 <follow_path+0x208>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006f86:	4b8a      	ldr	r3, [pc, #552]	; (80071b0 <follow_path+0x3c0>)
 8006f88:	0032      	movs	r2, r6
 8006f8a:	5ce0      	ldrb	r0, [r4, r3]
 8006f8c:	0021      	movs	r1, r4
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f7fe ff56 	bl	8005e40 <disk_read>
			fs->winsect = sector;
 8006f94:	238b      	movs	r3, #139	; 0x8b
 8006f96:	009b      	lsls	r3, r3, #2
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d004      	beq.n	8006fa6 <follow_path+0x1b6>
			fs->winsect = sector;
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4252      	negs	r2, r2
				res = FR_DISK_ERR;
 8006fa0:	2001      	movs	r0, #1
			fs->winsect = sector;
 8006fa2:	50e2      	str	r2, [r4, r3]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006fa4:	e76e      	b.n	8006e84 <follow_path+0x94>
			fs->winsect = sector;
 8006fa6:	50e6      	str	r6, [r4, r3]
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006fa8:	2385      	movs	r3, #133	; 0x85
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	58ea      	ldr	r2, [r5, r3]
		c = dir[DIR_Name];
 8006fae:	7814      	ldrb	r4, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006fb0:	2c00      	cmp	r4, #0
 8006fb2:	d05c      	beq.n	800706e <follow_path+0x27e>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	7ad1      	ldrb	r1, [r2, #11]
 8006fba:	4008      	ands	r0, r1
 8006fbc:	420b      	tst	r3, r1
 8006fbe:	d100      	bne.n	8006fc2 <follow_path+0x1d2>
 8006fc0:	e08d      	b.n	80070de <follow_path+0x2ee>
	i = dp->index + 1;
 8006fc2:	4b7c      	ldr	r3, [pc, #496]	; (80071b4 <follow_path+0x3c4>)
 8006fc4:	5aef      	ldrh	r7, [r5, r3]
 8006fc6:	3701      	adds	r7, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006fc8:	043b      	lsls	r3, r7, #16
 8006fca:	d050      	beq.n	800706e <follow_path+0x27e>
 8006fcc:	2384      	movs	r3, #132	; 0x84
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	58ee      	ldr	r6, [r5, r3]
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	d04b      	beq.n	800706e <follow_path+0x27e>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006fd6:	220f      	movs	r2, #15
 8006fd8:	0011      	movs	r1, r2
 8006fda:	4039      	ands	r1, r7
 8006fdc:	4688      	mov	r8, r1
 8006fde:	423a      	tst	r2, r7
 8006fe0:	d038      	beq.n	8007054 <follow_path+0x264>
 8006fe2:	3b10      	subs	r3, #16
 8006fe4:	58ec      	ldr	r4, [r5, r3]
	dp->index = (WORD)i;	/* Current index */
 8006fe6:	4b73      	ldr	r3, [pc, #460]	; (80071b4 <follow_path+0x3c4>)
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006fe8:	2285      	movs	r2, #133	; 0x85
	dp->index = (WORD)i;	/* Current index */
 8006fea:	52ef      	strh	r7, [r5, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006fec:	4643      	mov	r3, r8
 8006fee:	015b      	lsls	r3, r3, #5
 8006ff0:	18e3      	adds	r3, r4, r3
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	50ab      	str	r3, [r5, r2]
	} while (res == FR_OK);
 8006ff6:	e7bc      	b.n	8006f72 <follow_path+0x182>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006ff8:	4b6d      	ldr	r3, [pc, #436]	; (80071b0 <follow_path+0x3c0>)
 8006ffa:	003a      	movs	r2, r7
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	5ce0      	ldrb	r0, [r4, r3]
 8007000:	0021      	movs	r1, r4
 8007002:	2301      	movs	r3, #1
 8007004:	f7fe ff2a 	bl	8005e5c <disk_write>
 8007008:	2800      	cmp	r0, #0
 800700a:	d000      	beq.n	800700e <follow_path+0x21e>
 800700c:	e0ba      	b.n	8007184 <follow_path+0x394>
			fs->wflag = 0;
 800700e:	465b      	mov	r3, fp
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007010:	2288      	movs	r2, #136	; 0x88
			fs->wflag = 0;
 8007012:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007014:	0092      	lsls	r2, r2, #2
 8007016:	3314      	adds	r3, #20
 8007018:	58a2      	ldr	r2, [r4, r2]
 800701a:	58e3      	ldr	r3, [r4, r3]
 800701c:	1aba      	subs	r2, r7, r2
 800701e:	429a      	cmp	r2, r3
 8007020:	d2b1      	bcs.n	8006f86 <follow_path+0x196>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007022:	4a65      	ldr	r2, [pc, #404]	; (80071b8 <follow_path+0x3c8>)
 8007024:	5ca2      	ldrb	r2, [r4, r2]
 8007026:	4693      	mov	fp, r2
 8007028:	2a01      	cmp	r2, #1
 800702a:	d9ac      	bls.n	8006f86 <follow_path+0x196>
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800702c:	002a      	movs	r2, r5
 800702e:	465d      	mov	r5, fp
 8007030:	4693      	mov	fp, r2
 8007032:	e002      	b.n	800703a <follow_path+0x24a>
 8007034:	2386      	movs	r3, #134	; 0x86
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	58e3      	ldr	r3, [r4, r3]
					wsect += fs->fsize;
 800703a:	18ff      	adds	r7, r7, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800703c:	4643      	mov	r3, r8
 800703e:	003a      	movs	r2, r7
 8007040:	5ce0      	ldrb	r0, [r4, r3]
 8007042:	0021      	movs	r1, r4
 8007044:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007046:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007048:	f7fe ff08 	bl	8005e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800704c:	2d01      	cmp	r5, #1
 800704e:	d1f1      	bne.n	8007034 <follow_path+0x244>
 8007050:	465d      	mov	r5, fp
 8007052:	e798      	b.n	8006f86 <follow_path+0x196>
		dp->sect++;					/* Next sector */
 8007054:	3601      	adds	r6, #1
 8007056:	50ee      	str	r6, [r5, r3]
		if (!dp->clust) {		/* Static table */
 8007058:	2383      	movs	r3, #131	; 0x83
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	58e9      	ldr	r1, [r5, r3]
 800705e:	2900      	cmp	r1, #0
 8007060:	d10f      	bne.n	8007082 <follow_path+0x292>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007062:	3b0c      	subs	r3, #12
 8007064:	58ec      	ldr	r4, [r5, r3]
 8007066:	3308      	adds	r3, #8
 8007068:	5ae3      	ldrh	r3, [r4, r3]
 800706a:	429f      	cmp	r7, r3
 800706c:	d3bb      	bcc.n	8006fe6 <follow_path+0x1f6>
			ns = dp->fn[NSFLAG];
 800706e:	2386      	movs	r3, #134	; 0x86
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	58eb      	ldr	r3, [r5, r3]
 8007074:	7adb      	ldrb	r3, [r3, #11]
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007076:	2004      	movs	r0, #4
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007078:	075b      	lsls	r3, r3, #29
 800707a:	d500      	bpl.n	800707e <follow_path+0x28e>
 800707c:	e702      	b.n	8006e84 <follow_path+0x94>
 800707e:	2005      	movs	r0, #5
 8007080:	e700      	b.n	8006e84 <follow_path+0x94>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007082:	2380      	movs	r3, #128	; 0x80
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	58ec      	ldr	r4, [r5, r3]
 8007088:	469b      	mov	fp, r3
 800708a:	4b4c      	ldr	r3, [pc, #304]	; (80071bc <follow_path+0x3cc>)
 800708c:	093a      	lsrs	r2, r7, #4
 800708e:	5ce3      	ldrb	r3, [r4, r3]
 8007090:	3b01      	subs	r3, #1
 8007092:	421a      	tst	r2, r3
 8007094:	d1a7      	bne.n	8006fe6 <follow_path+0x1f6>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007096:	2901      	cmp	r1, #1
 8007098:	d976      	bls.n	8007188 <follow_path+0x398>
 800709a:	2685      	movs	r6, #133	; 0x85
 800709c:	00b6      	lsls	r6, r6, #2
 800709e:	59a3      	ldr	r3, [r4, r6]
 80070a0:	4299      	cmp	r1, r3
 80070a2:	d271      	bcs.n	8007188 <follow_path+0x398>
 80070a4:	0020      	movs	r0, r4
 80070a6:	f7fe ff45 	bl	8005f34 <get_fat.part.0>
				if (clst <= 1) return FR_INT_ERR;
 80070aa:	2801      	cmp	r0, #1
 80070ac:	d96c      	bls.n	8007188 <follow_path+0x398>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d068      	beq.n	8007184 <follow_path+0x394>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80070b2:	465b      	mov	r3, fp
 80070b4:	58ec      	ldr	r4, [r5, r3]
 80070b6:	59a3      	ldr	r3, [r4, r6]
 80070b8:	4298      	cmp	r0, r3
 80070ba:	d2d8      	bcs.n	800706e <follow_path+0x27e>
				dp->clust = clst;				/* Initialize data for new cluster */
 80070bc:	2283      	movs	r2, #131	; 0x83
 80070be:	0092      	lsls	r2, r2, #2
 80070c0:	50a8      	str	r0, [r5, r2]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070c2:	3b02      	subs	r3, #2
	clst -= 2;
 80070c4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070c6:	4298      	cmp	r0, r3
 80070c8:	d263      	bcs.n	8007192 <follow_path+0x3a2>
	return clst * fs->csize + fs->database;
 80070ca:	4b3c      	ldr	r3, [pc, #240]	; (80071bc <follow_path+0x3cc>)
 80070cc:	5ce6      	ldrb	r6, [r4, r3]
 80070ce:	3326      	adds	r3, #38	; 0x26
 80070d0:	4370      	muls	r0, r6
 80070d2:	58e6      	ldr	r6, [r4, r3]
 80070d4:	1986      	adds	r6, r0, r6
				dp->sect = clust2sect(dp->fs, clst);
 80070d6:	2384      	movs	r3, #132	; 0x84
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	50ee      	str	r6, [r5, r3]
 80070dc:	e783      	b.n	8006fe6 <follow_path+0x1f6>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80070de:	2386      	movs	r3, #134	; 0x86
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	58eb      	ldr	r3, [r5, r3]
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80070e4:	781e      	ldrb	r6, [r3, #0]
 80070e6:	42a6      	cmp	r6, r4
 80070e8:	d000      	beq.n	80070ec <follow_path+0x2fc>
 80070ea:	e76a      	b.n	8006fc2 <follow_path+0x1d2>
 80070ec:	785e      	ldrb	r6, [r3, #1]
 80070ee:	7854      	ldrb	r4, [r2, #1]
 80070f0:	42a6      	cmp	r6, r4
 80070f2:	d000      	beq.n	80070f6 <follow_path+0x306>
 80070f4:	e765      	b.n	8006fc2 <follow_path+0x1d2>
 80070f6:	789e      	ldrb	r6, [r3, #2]
 80070f8:	7894      	ldrb	r4, [r2, #2]
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	d000      	beq.n	8007100 <follow_path+0x310>
 80070fe:	e760      	b.n	8006fc2 <follow_path+0x1d2>
 8007100:	78d6      	ldrb	r6, [r2, #3]
 8007102:	78dc      	ldrb	r4, [r3, #3]
 8007104:	42a6      	cmp	r6, r4
 8007106:	d000      	beq.n	800710a <follow_path+0x31a>
 8007108:	e75b      	b.n	8006fc2 <follow_path+0x1d2>
 800710a:	7916      	ldrb	r6, [r2, #4]
 800710c:	791c      	ldrb	r4, [r3, #4]
 800710e:	42a6      	cmp	r6, r4
 8007110:	d000      	beq.n	8007114 <follow_path+0x324>
 8007112:	e756      	b.n	8006fc2 <follow_path+0x1d2>
 8007114:	7956      	ldrb	r6, [r2, #5]
 8007116:	795c      	ldrb	r4, [r3, #5]
 8007118:	42a6      	cmp	r6, r4
 800711a:	d000      	beq.n	800711e <follow_path+0x32e>
 800711c:	e751      	b.n	8006fc2 <follow_path+0x1d2>
 800711e:	7996      	ldrb	r6, [r2, #6]
 8007120:	799c      	ldrb	r4, [r3, #6]
 8007122:	42a6      	cmp	r6, r4
 8007124:	d000      	beq.n	8007128 <follow_path+0x338>
 8007126:	e74c      	b.n	8006fc2 <follow_path+0x1d2>
 8007128:	79d6      	ldrb	r6, [r2, #7]
 800712a:	79dc      	ldrb	r4, [r3, #7]
 800712c:	42a6      	cmp	r6, r4
 800712e:	d000      	beq.n	8007132 <follow_path+0x342>
 8007130:	e747      	b.n	8006fc2 <follow_path+0x1d2>
 8007132:	7a16      	ldrb	r6, [r2, #8]
 8007134:	7a1c      	ldrb	r4, [r3, #8]
 8007136:	42a6      	cmp	r6, r4
 8007138:	d000      	beq.n	800713c <follow_path+0x34c>
 800713a:	e742      	b.n	8006fc2 <follow_path+0x1d2>
 800713c:	7a56      	ldrb	r6, [r2, #9]
 800713e:	7a5c      	ldrb	r4, [r3, #9]
 8007140:	42a6      	cmp	r6, r4
 8007142:	d000      	beq.n	8007146 <follow_path+0x356>
 8007144:	e73d      	b.n	8006fc2 <follow_path+0x1d2>
 8007146:	7a96      	ldrb	r6, [r2, #10]
 8007148:	7a9c      	ldrb	r4, [r3, #10]
 800714a:	42a6      	cmp	r6, r4
 800714c:	d000      	beq.n	8007150 <follow_path+0x360>
 800714e:	e738      	b.n	8006fc2 <follow_path+0x1d2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007150:	7adc      	ldrb	r4, [r3, #11]
 8007152:	0764      	lsls	r4, r4, #29
 8007154:	d500      	bpl.n	8007158 <follow_path+0x368>
 8007156:	e695      	b.n	8006e84 <follow_path+0x94>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007158:	06c9      	lsls	r1, r1, #27
 800715a:	d590      	bpl.n	800707e <follow_path+0x28e>
	cl = LD_WORD(dir + DIR_FstClusLO);
 800715c:	7ed1      	ldrb	r1, [r2, #27]
 800715e:	7e90      	ldrb	r0, [r2, #26]
 8007160:	0209      	lsls	r1, r1, #8
 8007162:	4301      	orrs	r1, r0
			dp->sclust = ld_clust(dp->fs, dir);
 8007164:	2080      	movs	r0, #128	; 0x80
 8007166:	0080      	lsls	r0, r0, #2
	if (fs->fs_type == FS_FAT32)
 8007168:	582c      	ldr	r4, [r5, r0]
 800716a:	5c20      	ldrb	r0, [r4, r0]
 800716c:	2803      	cmp	r0, #3
 800716e:	d105      	bne.n	800717c <follow_path+0x38c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007170:	7d50      	ldrb	r0, [r2, #21]
 8007172:	7d12      	ldrb	r2, [r2, #20]
 8007174:	0200      	lsls	r0, r0, #8
 8007176:	4302      	orrs	r2, r0
 8007178:	0412      	lsls	r2, r2, #16
 800717a:	4311      	orrs	r1, r2
			dp->sclust = ld_clust(dp->fs, dir);
 800717c:	2282      	movs	r2, #130	; 0x82
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	50a9      	str	r1, [r5, r2]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007182:	e654      	b.n	8006e2e <follow_path+0x3e>
			res = FR_DISK_ERR;
 8007184:	2001      	movs	r0, #1
	return res;
 8007186:	e67d      	b.n	8006e84 <follow_path+0x94>
				if (clst <= 1) return FR_INT_ERR;
 8007188:	2002      	movs	r0, #2
 800718a:	e67b      	b.n	8006e84 <follow_path+0x94>
	if (ni == 8) b <<= 2;
 800718c:	0089      	lsls	r1, r1, #2
 800718e:	b2c9      	uxtb	r1, r1
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007190:	e6dc      	b.n	8006f4c <follow_path+0x15c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007192:	2600      	movs	r6, #0
 8007194:	e79f      	b.n	80070d6 <follow_path+0x2e6>
			ns = dp->fn[NSFLAG];
 8007196:	2386      	movs	r3, #134	; 0x86
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	58eb      	ldr	r3, [r5, r3]
 800719c:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 800719e:	2804      	cmp	r0, #4
 80071a0:	d000      	beq.n	80071a4 <follow_path+0x3b4>
 80071a2:	e66f      	b.n	8006e84 <follow_path+0x94>
 80071a4:	e767      	b.n	8007076 <follow_path+0x286>
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	08008978 	.word	0x08008978
 80071ac:	08008968 	.word	0x08008968
 80071b0:	00000201 	.word	0x00000201
 80071b4:	00000206 	.word	0x00000206
 80071b8:	00000203 	.word	0x00000203
 80071bc:	00000202 	.word	0x00000202

080071c0 <remove_chain.part.0>:
FRESULT remove_chain (
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80071c2:	2385      	movs	r3, #133	; 0x85
FRESULT remove_chain (
 80071c4:	4645      	mov	r5, r8
 80071c6:	46de      	mov	lr, fp
 80071c8:	4657      	mov	r7, sl
 80071ca:	464e      	mov	r6, r9
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	58c3      	ldr	r3, [r0, r3]
FRESULT remove_chain (
 80071d0:	b5e0      	push	{r5, r6, r7, lr}
 80071d2:	0004      	movs	r4, r0
 80071d4:	000d      	movs	r5, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80071d6:	4299      	cmp	r1, r3
 80071d8:	d300      	bcc.n	80071dc <remove_chain.part.0+0x1c>
 80071da:	e105      	b.n	80073e8 <remove_chain.part.0+0x228>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80071dc:	2901      	cmp	r1, #1
 80071de:	d90d      	bls.n	80071fc <remove_chain.part.0+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071e0:	2388      	movs	r3, #136	; 0x88
 80071e2:	009b      	lsls	r3, r3, #2
		switch (fs->fs_type) {
 80071e4:	2780      	movs	r7, #128	; 0x80
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071e6:	4699      	mov	r9, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 80071e8:	330c      	adds	r3, #12
 80071ea:	4698      	mov	r8, r3
		switch (fs->fs_type) {
 80071ec:	00bf      	lsls	r7, r7, #2
 80071ee:	5de3      	ldrb	r3, [r4, r7]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d059      	beq.n	80072a8 <remove_chain.part.0+0xe8>
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d037      	beq.n	8007268 <remove_chain.part.0+0xa8>
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d006      	beq.n	800720a <remove_chain.part.0+0x4a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80071fc:	2002      	movs	r0, #2
}
 80071fe:	bcf0      	pop	{r4, r5, r6, r7}
 8007200:	46bb      	mov	fp, r7
 8007202:	46b2      	mov	sl, r6
 8007204:	46a9      	mov	r9, r5
 8007206:	46a0      	mov	r8, r4
 8007208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800720a:	464b      	mov	r3, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800720c:	4642      	mov	r2, r8
			bc = (UINT)clst; bc += bc / 2;
 800720e:	086e      	lsrs	r6, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007210:	58e3      	ldr	r3, [r4, r3]
			bc = (UINT)clst; bc += bc / 2;
 8007212:	1976      	adds	r6, r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007214:	0a71      	lsrs	r1, r6, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007216:	58a2      	ldr	r2, [r4, r2]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007218:	18c9      	adds	r1, r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800721a:	4291      	cmp	r1, r2
 800721c:	d009      	beq.n	8007232 <remove_chain.part.0+0x72>
 800721e:	0020      	movs	r0, r4
 8007220:	f7fe fe38 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007224:	2800      	cmp	r0, #0
 8007226:	d000      	beq.n	800722a <remove_chain.part.0+0x6a>
 8007228:	e0a4      	b.n	8007374 <remove_chain.part.0+0x1b4>
 800722a:	464b      	mov	r3, r9
 800722c:	4642      	mov	r2, r8
 800722e:	58e3      	ldr	r3, [r4, r3]
 8007230:	58a2      	ldr	r2, [r4, r2]
			wc = fs->win.d8[bc++ % SS(fs)];
 8007232:	1c71      	adds	r1, r6, #1
 8007234:	468a      	mov	sl, r1
 8007236:	05f6      	lsls	r6, r6, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007238:	0a49      	lsrs	r1, r1, #9
			wc = fs->win.d8[bc++ % SS(fs)];
 800723a:	0df6      	lsrs	r6, r6, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800723c:	18c9      	adds	r1, r1, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 800723e:	5da6      	ldrb	r6, [r4, r6]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007240:	4291      	cmp	r1, r2
 8007242:	d005      	beq.n	8007250 <remove_chain.part.0+0x90>
 8007244:	0020      	movs	r0, r4
 8007246:	f7fe fe25 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800724a:	2800      	cmp	r0, #0
 800724c:	d000      	beq.n	8007250 <remove_chain.part.0+0x90>
 800724e:	e091      	b.n	8007374 <remove_chain.part.0+0x1b4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007250:	4653      	mov	r3, sl
 8007252:	05db      	lsls	r3, r3, #23
 8007254:	0ddb      	lsrs	r3, r3, #23
 8007256:	5ce3      	ldrb	r3, [r4, r3]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	4333      	orrs	r3, r6
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800725c:	091e      	lsrs	r6, r3, #4
 800725e:	07ea      	lsls	r2, r5, #31
 8007260:	d439      	bmi.n	80072d6 <remove_chain.part.0+0x116>
 8007262:	051e      	lsls	r6, r3, #20
 8007264:	0d36      	lsrs	r6, r6, #20
 8007266:	e036      	b.n	80072d6 <remove_chain.part.0+0x116>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007268:	464b      	mov	r3, r9
 800726a:	58e3      	ldr	r3, [r4, r3]
 800726c:	09e9      	lsrs	r1, r5, #7
 800726e:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007270:	4643      	mov	r3, r8
 8007272:	58e3      	ldr	r3, [r4, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007274:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007276:	4299      	cmp	r1, r3
 8007278:	d004      	beq.n	8007284 <remove_chain.part.0+0xc4>
 800727a:	0020      	movs	r0, r4
 800727c:	f7fe fe0a 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007280:	2800      	cmp	r0, #0
 8007282:	d177      	bne.n	8007374 <remove_chain.part.0+0x1b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007284:	22fe      	movs	r2, #254	; 0xfe
 8007286:	00ab      	lsls	r3, r5, #2
 8007288:	0052      	lsls	r2, r2, #1
 800728a:	4013      	ands	r3, r2
 800728c:	18e2      	adds	r2, r4, r3
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800728e:	78d6      	ldrb	r6, [r2, #3]
 8007290:	7891      	ldrb	r1, [r2, #2]
 8007292:	5ce3      	ldrb	r3, [r4, r3]
 8007294:	0636      	lsls	r6, r6, #24
 8007296:	0409      	lsls	r1, r1, #16
 8007298:	430e      	orrs	r6, r1
 800729a:	431e      	orrs	r6, r3
 800729c:	7853      	ldrb	r3, [r2, #1]
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	431e      	orrs	r6, r3
 80072a2:	0136      	lsls	r6, r6, #4
 80072a4:	0936      	lsrs	r6, r6, #4
			break;
 80072a6:	e016      	b.n	80072d6 <remove_chain.part.0+0x116>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072a8:	464b      	mov	r3, r9
 80072aa:	58e3      	ldr	r3, [r4, r3]
 80072ac:	0a29      	lsrs	r1, r5, #8
 80072ae:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 80072b0:	4643      	mov	r3, r8
 80072b2:	58e3      	ldr	r3, [r4, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072b4:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 80072b6:	4299      	cmp	r1, r3
 80072b8:	d004      	beq.n	80072c4 <remove_chain.part.0+0x104>
 80072ba:	0020      	movs	r0, r4
 80072bc:	f7fe fdea 	bl	8005e94 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d157      	bne.n	8007374 <remove_chain.part.0+0x1b4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	006b      	lsls	r3, r5, #1
 80072c8:	0052      	lsls	r2, r2, #1
 80072ca:	4013      	ands	r3, r2
			val = LD_WORD(p);
 80072cc:	18e2      	adds	r2, r4, r3
 80072ce:	7856      	ldrb	r6, [r2, #1]
 80072d0:	5ce3      	ldrb	r3, [r4, r3]
 80072d2:	0236      	lsls	r6, r6, #8
 80072d4:	431e      	orrs	r6, r3
			if (nxt == 0) break;				/* Empty cluster? */
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	d100      	bne.n	80072dc <remove_chain.part.0+0x11c>
 80072da:	e085      	b.n	80073e8 <remove_chain.part.0+0x228>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80072dc:	2e01      	cmp	r6, #1
 80072de:	d100      	bne.n	80072e2 <remove_chain.part.0+0x122>
 80072e0:	e78c      	b.n	80071fc <remove_chain.part.0+0x3c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80072e2:	2385      	movs	r3, #133	; 0x85
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	58e3      	ldr	r3, [r4, r3]
 80072e8:	42ab      	cmp	r3, r5
 80072ea:	d800      	bhi.n	80072ee <remove_chain.part.0+0x12e>
 80072ec:	e786      	b.n	80071fc <remove_chain.part.0+0x3c>
		switch (fs->fs_type) {
 80072ee:	5de3      	ldrb	r3, [r4, r7]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d07b      	beq.n	80073ec <remove_chain.part.0+0x22c>
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d03f      	beq.n	8007378 <remove_chain.part.0+0x1b8>
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d000      	beq.n	80072fe <remove_chain.part.0+0x13e>
 80072fc:	e77e      	b.n	80071fc <remove_chain.part.0+0x3c>
			bc = (UINT)clst; bc += bc / 2;
 80072fe:	086b      	lsrs	r3, r5, #1
 8007300:	469a      	mov	sl, r3
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007302:	464b      	mov	r3, r9
			bc = (UINT)clst; bc += bc / 2;
 8007304:	44aa      	add	sl, r5
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007306:	58e2      	ldr	r2, [r4, r3]
 8007308:	4653      	mov	r3, sl
 800730a:	0a59      	lsrs	r1, r3, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800730c:	4643      	mov	r3, r8
 800730e:	58e0      	ldr	r0, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007310:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007312:	4281      	cmp	r1, r0
 8007314:	d009      	beq.n	800732a <remove_chain.part.0+0x16a>
 8007316:	0020      	movs	r0, r4
 8007318:	f7fe fdbc 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 800731c:	2800      	cmp	r0, #0
 800731e:	d000      	beq.n	8007322 <remove_chain.part.0+0x162>
 8007320:	e76d      	b.n	80071fe <remove_chain.part.0+0x3e>
 8007322:	464b      	mov	r3, r9
 8007324:	58e2      	ldr	r2, [r4, r3]
 8007326:	4643      	mov	r3, r8
 8007328:	58e0      	ldr	r0, [r4, r3]
			p = &fs->win.d8[bc++ % SS(fs)];
 800732a:	2301      	movs	r3, #1
 800732c:	4453      	add	r3, sl
 800732e:	469b      	mov	fp, r3
 8007330:	4653      	mov	r3, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007332:	2101      	movs	r1, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 8007334:	05db      	lsls	r3, r3, #23
 8007336:	0ddb      	lsrs	r3, r3, #23
 8007338:	469a      	mov	sl, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800733a:	000b      	movs	r3, r1
 800733c:	402b      	ands	r3, r5
 800733e:	4229      	tst	r1, r5
 8007340:	d075      	beq.n	800742e <remove_chain.part.0+0x26e>
 8007342:	4653      	mov	r3, sl
 8007344:	250f      	movs	r5, #15
 8007346:	5ce3      	ldrb	r3, [r4, r3]
 8007348:	401d      	ands	r5, r3
 800734a:	4653      	mov	r3, sl
 800734c:	54e5      	strb	r5, [r4, r3]
			fs->wflag = 1;
 800734e:	2381      	movs	r3, #129	; 0x81
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	54e1      	strb	r1, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007354:	465b      	mov	r3, fp
 8007356:	0a59      	lsrs	r1, r3, #9
 8007358:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800735a:	4281      	cmp	r1, r0
 800735c:	d100      	bne.n	8007360 <remove_chain.part.0+0x1a0>
 800735e:	e082      	b.n	8007466 <remove_chain.part.0+0x2a6>
 8007360:	0020      	movs	r0, r4
 8007362:	f7fe fd97 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 8007366:	2800      	cmp	r0, #0
 8007368:	d000      	beq.n	800736c <remove_chain.part.0+0x1ac>
 800736a:	e748      	b.n	80071fe <remove_chain.part.0+0x3e>
			p = &fs->win.d8[bc % SS(fs)];
 800736c:	465b      	mov	r3, fp
 800736e:	05db      	lsls	r3, r3, #23
 8007370:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007372:	e072      	b.n	800745a <remove_chain.part.0+0x29a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007374:	2001      	movs	r0, #1
 8007376:	e742      	b.n	80071fe <remove_chain.part.0+0x3e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007378:	464b      	mov	r3, r9
 800737a:	58e3      	ldr	r3, [r4, r3]
 800737c:	09e9      	lsrs	r1, r5, #7
 800737e:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007380:	4643      	mov	r3, r8
 8007382:	58e3      	ldr	r3, [r4, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007384:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007386:	4299      	cmp	r1, r3
 8007388:	d005      	beq.n	8007396 <remove_chain.part.0+0x1d6>
 800738a:	0020      	movs	r0, r4
 800738c:	f7fe fd82 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 8007390:	2800      	cmp	r0, #0
 8007392:	d000      	beq.n	8007396 <remove_chain.part.0+0x1d6>
 8007394:	e733      	b.n	80071fe <remove_chain.part.0+0x3e>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007396:	21fe      	movs	r1, #254	; 0xfe
			ST_DWORD(p, val);
 8007398:	22f0      	movs	r2, #240	; 0xf0
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800739a:	0049      	lsls	r1, r1, #1
 800739c:	00ad      	lsls	r5, r5, #2
 800739e:	400d      	ands	r5, r1
			ST_DWORD(p, val);
 80073a0:	2100      	movs	r1, #0
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80073a2:	1963      	adds	r3, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 80073a4:	78d8      	ldrb	r0, [r3, #3]
			ST_DWORD(p, val);
 80073a6:	5561      	strb	r1, [r4, r5]
 80073a8:	4002      	ands	r2, r0
 80073aa:	70da      	strb	r2, [r3, #3]
 80073ac:	7059      	strb	r1, [r3, #1]
 80073ae:	7099      	strb	r1, [r3, #2]
			fs->wflag = 1;
 80073b0:	2381      	movs	r3, #129	; 0x81
 80073b2:	2201      	movs	r2, #1
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	54e2      	strb	r2, [r4, r3]
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80073b8:	2284      	movs	r2, #132	; 0x84
 80073ba:	0092      	lsls	r2, r2, #2
 80073bc:	58a3      	ldr	r3, [r4, r2]
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	d00d      	beq.n	80073de <remove_chain.part.0+0x21e>
				fs->fsi_flag |= 1;
 80073c2:	2101      	movs	r1, #1
				fs->free_clust++;
 80073c4:	3301      	adds	r3, #1
 80073c6:	50a3      	str	r3, [r4, r2]
				fs->fsi_flag |= 1;
 80073c8:	4a29      	ldr	r2, [pc, #164]	; (8007470 <remove_chain.part.0+0x2b0>)
 80073ca:	5ca3      	ldrb	r3, [r4, r2]
 80073cc:	430b      	orrs	r3, r1
 80073ce:	54a3      	strb	r3, [r4, r2]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80073d0:	2385      	movs	r3, #133	; 0x85
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	58e3      	ldr	r3, [r4, r3]
 80073d6:	429e      	cmp	r6, r3
 80073d8:	d206      	bcs.n	80073e8 <remove_chain.part.0+0x228>
FRESULT remove_chain (
 80073da:	0035      	movs	r5, r6
 80073dc:	e707      	b.n	80071ee <remove_chain.part.0+0x2e>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80073de:	2385      	movs	r3, #133	; 0x85
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	58e3      	ldr	r3, [r4, r3]
 80073e4:	42b3      	cmp	r3, r6
 80073e6:	d8f8      	bhi.n	80073da <remove_chain.part.0+0x21a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80073e8:	2000      	movs	r0, #0
 80073ea:	e708      	b.n	80071fe <remove_chain.part.0+0x3e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80073ec:	464b      	mov	r3, r9
 80073ee:	58e3      	ldr	r3, [r4, r3]
 80073f0:	0a29      	lsrs	r1, r5, #8
 80073f2:	469c      	mov	ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 80073f4:	4643      	mov	r3, r8
 80073f6:	58e3      	ldr	r3, [r4, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80073f8:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 80073fa:	4299      	cmp	r1, r3
 80073fc:	d011      	beq.n	8007422 <remove_chain.part.0+0x262>
 80073fe:	0020      	movs	r0, r4
 8007400:	f7fe fd48 	bl	8005e94 <move_window.part.0>
 8007404:	1e03      	subs	r3, r0, #0
			if (res != FR_OK) break;
 8007406:	d000      	beq.n	800740a <remove_chain.part.0+0x24a>
 8007408:	e6f9      	b.n	80071fe <remove_chain.part.0+0x3e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800740a:	21ff      	movs	r1, #255	; 0xff
 800740c:	006d      	lsls	r5, r5, #1
 800740e:	0049      	lsls	r1, r1, #1
 8007410:	400d      	ands	r5, r1
			ST_WORD(p, (WORD)val);
 8007412:	5563      	strb	r3, [r4, r5]
 8007414:	1965      	adds	r5, r4, r5
 8007416:	706b      	strb	r3, [r5, #1]
			fs->wflag = 1;
 8007418:	2381      	movs	r3, #129	; 0x81
 800741a:	2201      	movs	r2, #1
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	54e2      	strb	r2, [r4, r3]
			break;
 8007420:	e7ca      	b.n	80073b8 <remove_chain.part.0+0x1f8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007422:	21ff      	movs	r1, #255	; 0xff
 8007424:	006d      	lsls	r5, r5, #1
 8007426:	0049      	lsls	r1, r1, #1
			ST_WORD(p, (WORD)val);
 8007428:	2300      	movs	r3, #0
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800742a:	400d      	ands	r5, r1
			ST_WORD(p, (WORD)val);
 800742c:	e7f1      	b.n	8007412 <remove_chain.part.0+0x252>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800742e:	4655      	mov	r5, sl
 8007430:	5563      	strb	r3, [r4, r5]
			fs->wflag = 1;
 8007432:	2381      	movs	r3, #129	; 0x81
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	54e1      	strb	r1, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007438:	465b      	mov	r3, fp
 800743a:	0a59      	lsrs	r1, r3, #9
 800743c:	1889      	adds	r1, r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800743e:	4281      	cmp	r1, r0
 8007440:	d005      	beq.n	800744e <remove_chain.part.0+0x28e>
 8007442:	0020      	movs	r0, r4
 8007444:	f7fe fd26 	bl	8005e94 <move_window.part.0>
			if (res != FR_OK) break;
 8007448:	2800      	cmp	r0, #0
 800744a:	d000      	beq.n	800744e <remove_chain.part.0+0x28e>
 800744c:	e6d7      	b.n	80071fe <remove_chain.part.0+0x3e>
			p = &fs->win.d8[bc % SS(fs)];
 800744e:	465b      	mov	r3, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007450:	220f      	movs	r2, #15
			p = &fs->win.d8[bc % SS(fs)];
 8007452:	05db      	lsls	r3, r3, #23
 8007454:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007456:	5ce0      	ldrb	r0, [r4, r3]
 8007458:	4390      	bics	r0, r2
 800745a:	54e0      	strb	r0, [r4, r3]
			fs->wflag = 1;
 800745c:	2381      	movs	r3, #129	; 0x81
 800745e:	2201      	movs	r2, #1
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	54e2      	strb	r2, [r4, r3]
			break;
 8007464:	e7a8      	b.n	80073b8 <remove_chain.part.0+0x1f8>
			p = &fs->win.d8[bc % SS(fs)];
 8007466:	05db      	lsls	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007468:	2000      	movs	r0, #0
			p = &fs->win.d8[bc % SS(fs)];
 800746a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800746c:	e7f5      	b.n	800745a <remove_chain.part.0+0x29a>
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	00000205 	.word	0x00000205

08007474 <dir_register>:
{
 8007474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007476:	46de      	mov	lr, fp
 8007478:	4657      	mov	r7, sl
 800747a:	4645      	mov	r5, r8
 800747c:	464e      	mov	r6, r9
 800747e:	b5e0      	push	{r5, r6, r7, lr}
	res = dir_sdi(dp, 0);
 8007480:	2100      	movs	r1, #0
{
 8007482:	b085      	sub	sp, #20
 8007484:	0005      	movs	r5, r0
	res = dir_sdi(dp, 0);
 8007486:	f7ff fbc5 	bl	8006c14 <dir_sdi>
 800748a:	4682      	mov	sl, r0
	if (res == FR_OK) {
 800748c:	2800      	cmp	r0, #0
 800748e:	d00b      	beq.n	80074a8 <dir_register+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007490:	2804      	cmp	r0, #4
 8007492:	d101      	bne.n	8007498 <dir_register+0x24>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007494:	2307      	movs	r3, #7
 8007496:	469a      	mov	sl, r3
}
 8007498:	4650      	mov	r0, sl
 800749a:	b005      	add	sp, #20
 800749c:	bcf0      	pop	{r4, r5, r6, r7}
 800749e:	46bb      	mov	fp, r7
 80074a0:	46b2      	mov	sl, r6
 80074a2:	46a9      	mov	r9, r5
 80074a4:	46a0      	mov	r8, r4
 80074a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	58ec      	ldr	r4, [r5, r3]
 80074ae:	3310      	adds	r3, #16
 80074b0:	58eb      	ldr	r3, [r5, r3]
 80074b2:	4698      	mov	r8, r3
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80074b4:	2386      	movs	r3, #134	; 0x86
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	469b      	mov	fp, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074ba:	238b      	movs	r3, #139	; 0x8b
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	58e6      	ldr	r6, [r4, r3]
 80074c0:	4546      	cmp	r6, r8
 80074c2:	d018      	beq.n	80074f6 <dir_register+0x82>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80074c4:	2781      	movs	r7, #129	; 0x81
 80074c6:	00bf      	lsls	r7, r7, #2
 80074c8:	5de3      	ldrb	r3, [r4, r7]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d000      	beq.n	80074d0 <dir_register+0x5c>
 80074ce:	e080      	b.n	80075d2 <dir_register+0x15e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80074d0:	4bc5      	ldr	r3, [pc, #788]	; (80077e8 <dir_register+0x374>)
 80074d2:	4642      	mov	r2, r8
 80074d4:	5ce0      	ldrb	r0, [r4, r3]
 80074d6:	0021      	movs	r1, r4
 80074d8:	2301      	movs	r3, #1
 80074da:	f7fe fcb1 	bl	8005e40 <disk_read>
			fs->winsect = sector;
 80074de:	238b      	movs	r3, #139	; 0x8b
 80074e0:	009b      	lsls	r3, r3, #2
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d005      	beq.n	80074f2 <dir_register+0x7e>
			fs->winsect = sector;
 80074e6:	2201      	movs	r2, #1
 80074e8:	4252      	negs	r2, r2
 80074ea:	50e2      	str	r2, [r4, r3]
				res = FR_DISK_ERR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	469a      	mov	sl, r3
 80074f0:	e7d2      	b.n	8007498 <dir_register+0x24>
			fs->winsect = sector;
 80074f2:	4642      	mov	r2, r8
 80074f4:	50e2      	str	r2, [r4, r3]
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80074f6:	2185      	movs	r1, #133	; 0x85
 80074f8:	0089      	lsls	r1, r1, #2
 80074fa:	5868      	ldr	r0, [r5, r1]
 80074fc:	7803      	ldrb	r3, [r0, #0]
 80074fe:	2be5      	cmp	r3, #229	; 0xe5
 8007500:	d001      	beq.n	8007506 <dir_register+0x92>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d137      	bne.n	8007576 <dir_register+0x102>
		res = move_window(dp->fs, dp->sect);
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	2284      	movs	r2, #132	; 0x84
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	58eb      	ldr	r3, [r5, r3]
 8007510:	58a9      	ldr	r1, [r5, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007512:	321c      	adds	r2, #28
 8007514:	589a      	ldr	r2, [r3, r2]
 8007516:	4291      	cmp	r1, r2
 8007518:	d008      	beq.n	800752c <dir_register+0xb8>
 800751a:	0018      	movs	r0, r3
 800751c:	f7fe fcba 	bl	8005e94 <move_window.part.0>
		if (res == FR_OK) {
 8007520:	2800      	cmp	r0, #0
 8007522:	d000      	beq.n	8007526 <dir_register+0xb2>
 8007524:	e120      	b.n	8007768 <dir_register+0x2f4>
 8007526:	2385      	movs	r3, #133	; 0x85
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	58e8      	ldr	r0, [r5, r3]
	while (cnt--)
 800752c:	2220      	movs	r2, #32
 800752e:	2100      	movs	r1, #0
 8007530:	f000 fd3c 	bl	8007fac <memset>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007534:	2385      	movs	r3, #133	; 0x85
 8007536:	2286      	movs	r2, #134	; 0x86
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	58eb      	ldr	r3, [r5, r3]
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	0019      	movs	r1, r3
 8007540:	58aa      	ldr	r2, [r5, r2]
	while (cnt--)
 8007542:	4311      	orrs	r1, r2
 8007544:	0789      	lsls	r1, r1, #30
 8007546:	d000      	beq.n	800754a <dir_register+0xd6>
 8007548:	e110      	b.n	800776c <dir_register+0x2f8>
 800754a:	1cd9      	adds	r1, r3, #3
 800754c:	1a89      	subs	r1, r1, r2
 800754e:	2906      	cmp	r1, #6
 8007550:	d800      	bhi.n	8007554 <dir_register+0xe0>
 8007552:	e10b      	b.n	800776c <dir_register+0x2f8>
		*d++ = *s++;
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	6019      	str	r1, [r3, #0]
 8007558:	6851      	ldr	r1, [r2, #4]
 800755a:	6059      	str	r1, [r3, #4]
 800755c:	7a11      	ldrb	r1, [r2, #8]
 800755e:	7219      	strb	r1, [r3, #8]
 8007560:	7a51      	ldrb	r1, [r2, #9]
 8007562:	7259      	strb	r1, [r3, #9]
 8007564:	7a92      	ldrb	r2, [r2, #10]
			dp->fs->wflag = 1;
 8007566:	2101      	movs	r1, #1
		*d++ = *s++;
 8007568:	729a      	strb	r2, [r3, #10]
			dp->fs->wflag = 1;
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	58ea      	ldr	r2, [r5, r3]
 8007570:	3304      	adds	r3, #4
 8007572:	54d1      	strb	r1, [r2, r3]
 8007574:	e790      	b.n	8007498 <dir_register+0x24>
	i = dp->index + 1;
 8007576:	4b9d      	ldr	r3, [pc, #628]	; (80077ec <dir_register+0x378>)
 8007578:	5aee      	ldrh	r6, [r5, r3]
 800757a:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800757c:	0433      	lsls	r3, r6, #16
 800757e:	d100      	bne.n	8007582 <dir_register+0x10e>
 8007580:	e788      	b.n	8007494 <dir_register+0x20>
 8007582:	2284      	movs	r2, #132	; 0x84
 8007584:	0092      	lsls	r2, r2, #2
 8007586:	58ab      	ldr	r3, [r5, r2]
 8007588:	4698      	mov	r8, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d100      	bne.n	8007590 <dir_register+0x11c>
 800758e:	e781      	b.n	8007494 <dir_register+0x20>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007590:	230f      	movs	r3, #15
 8007592:	001f      	movs	r7, r3
 8007594:	4037      	ands	r7, r6
 8007596:	4233      	tst	r3, r6
 8007598:	d009      	beq.n	80075ae <dir_register+0x13a>
 800759a:	33f2      	adds	r3, #242	; 0xf2
 800759c:	33ff      	adds	r3, #255	; 0xff
 800759e:	58ec      	ldr	r4, [r5, r3]
	dp->index = (WORD)i;	/* Current index */
 80075a0:	4b92      	ldr	r3, [pc, #584]	; (80077ec <dir_register+0x378>)
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80075a2:	017f      	lsls	r7, r7, #5
	dp->index = (WORD)i;	/* Current index */
 80075a4:	52ee      	strh	r6, [r5, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80075a6:	19e7      	adds	r7, r4, r7
 80075a8:	330e      	adds	r3, #14
 80075aa:	50ef      	str	r7, [r5, r3]
		} while (res == FR_OK);
 80075ac:	e785      	b.n	80074ba <dir_register+0x46>
		dp->sect++;					/* Next sector */
 80075ae:	2301      	movs	r3, #1
 80075b0:	469c      	mov	ip, r3
 80075b2:	44e0      	add	r8, ip
 80075b4:	4643      	mov	r3, r8
 80075b6:	50ab      	str	r3, [r5, r2]
		if (!dp->clust) {		/* Static table */
 80075b8:	2383      	movs	r3, #131	; 0x83
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	58eb      	ldr	r3, [r5, r3]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d12f      	bne.n	8007622 <dir_register+0x1ae>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80075c2:	2380      	movs	r3, #128	; 0x80
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	58ec      	ldr	r4, [r5, r3]
 80075c8:	3308      	adds	r3, #8
 80075ca:	5ae3      	ldrh	r3, [r4, r3]
 80075cc:	429e      	cmp	r6, r3
 80075ce:	d3e7      	bcc.n	80075a0 <dir_register+0x12c>
 80075d0:	e760      	b.n	8007494 <dir_register+0x20>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80075d2:	4b85      	ldr	r3, [pc, #532]	; (80077e8 <dir_register+0x374>)
 80075d4:	0032      	movs	r2, r6
 80075d6:	4699      	mov	r9, r3
 80075d8:	5ce0      	ldrb	r0, [r4, r3]
 80075da:	0021      	movs	r1, r4
 80075dc:	2301      	movs	r3, #1
 80075de:	f7fe fc3d 	bl	8005e5c <disk_write>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d000      	beq.n	80075e8 <dir_register+0x174>
 80075e6:	e0b9      	b.n	800775c <dir_register+0x2e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075e8:	2288      	movs	r2, #136	; 0x88
 80075ea:	465b      	mov	r3, fp
			fs->wflag = 0;
 80075ec:	55e0      	strb	r0, [r4, r7]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075ee:	0092      	lsls	r2, r2, #2
 80075f0:	58a2      	ldr	r2, [r4, r2]
 80075f2:	58e3      	ldr	r3, [r4, r3]
 80075f4:	1ab2      	subs	r2, r6, r2
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d300      	bcc.n	80075fc <dir_register+0x188>
 80075fa:	e769      	b.n	80074d0 <dir_register+0x5c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075fc:	4a7c      	ldr	r2, [pc, #496]	; (80077f0 <dir_register+0x37c>)
 80075fe:	5ca7      	ldrb	r7, [r4, r2]
 8007600:	2f01      	cmp	r7, #1
 8007602:	d802      	bhi.n	800760a <dir_register+0x196>
 8007604:	e764      	b.n	80074d0 <dir_register+0x5c>
 8007606:	465b      	mov	r3, fp
 8007608:	58e3      	ldr	r3, [r4, r3]
					wsect += fs->fsize;
 800760a:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800760c:	464b      	mov	r3, r9
 800760e:	0032      	movs	r2, r6
 8007610:	5ce0      	ldrb	r0, [r4, r3]
 8007612:	0021      	movs	r1, r4
 8007614:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007616:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007618:	f7fe fc20 	bl	8005e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800761c:	2f01      	cmp	r7, #1
 800761e:	d1f2      	bne.n	8007606 <dir_register+0x192>
 8007620:	e756      	b.n	80074d0 <dir_register+0x5c>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	0092      	lsls	r2, r2, #2
 8007626:	58ac      	ldr	r4, [r5, r2]
 8007628:	4a72      	ldr	r2, [pc, #456]	; (80077f4 <dir_register+0x380>)
 800762a:	0930      	lsrs	r0, r6, #4
 800762c:	5ca2      	ldrb	r2, [r4, r2]
 800762e:	3a01      	subs	r2, #1
 8007630:	4210      	tst	r0, r2
 8007632:	d1b5      	bne.n	80075a0 <dir_register+0x12c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007634:	2b01      	cmp	r3, #1
 8007636:	d800      	bhi.n	800763a <dir_register+0x1c6>
 8007638:	e093      	b.n	8007762 <dir_register+0x2ee>
 800763a:	5862      	ldr	r2, [r4, r1]
 800763c:	4293      	cmp	r3, r2
 800763e:	d300      	bcc.n	8007642 <dir_register+0x1ce>
 8007640:	e08f      	b.n	8007762 <dir_register+0x2ee>
 8007642:	0019      	movs	r1, r3
 8007644:	0020      	movs	r0, r4
 8007646:	f7fe fc75 	bl	8005f34 <get_fat.part.0>
 800764a:	0002      	movs	r2, r0
 800764c:	9000      	str	r0, [sp, #0]
				if (clst <= 1) return FR_INT_ERR;
 800764e:	2801      	cmp	r0, #1
 8007650:	d800      	bhi.n	8007654 <dir_register+0x1e0>
 8007652:	e086      	b.n	8007762 <dir_register+0x2ee>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d100      	bne.n	800765a <dir_register+0x1e6>
 8007658:	e080      	b.n	800775c <dir_register+0x2e8>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800765a:	2380      	movs	r3, #128	; 0x80
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	58ec      	ldr	r4, [r5, r3]
 8007660:	4698      	mov	r8, r3
 8007662:	3314      	adds	r3, #20
 8007664:	58e3      	ldr	r3, [r4, r3]
 8007666:	4298      	cmp	r0, r3
 8007668:	d200      	bcs.n	800766c <dir_register+0x1f8>
 800766a:	e090      	b.n	800778e <dir_register+0x31a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800766c:	2383      	movs	r3, #131	; 0x83
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	58e9      	ldr	r1, [r5, r3]
 8007672:	0020      	movs	r0, r4
 8007674:	f7ff f9cc 	bl	8006a10 <create_chain>
 8007678:	1e03      	subs	r3, r0, #0
 800767a:	9000      	str	r0, [sp, #0]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800767c:	d100      	bne.n	8007680 <dir_register+0x20c>
 800767e:	e709      	b.n	8007494 <dir_register+0x20>
					if (clst == 1) return FR_INT_ERR;
 8007680:	2801      	cmp	r0, #1
 8007682:	d06e      	beq.n	8007762 <dir_register+0x2ee>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007684:	3301      	adds	r3, #1
 8007686:	d069      	beq.n	800775c <dir_register+0x2e8>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007688:	4643      	mov	r3, r8
 800768a:	58ec      	ldr	r4, [r5, r3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800768c:	2381      	movs	r3, #129	; 0x81
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4698      	mov	r8, r3
 8007692:	5ce3      	ldrb	r3, [r4, r3]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d000      	beq.n	800769a <dir_register+0x226>
 8007698:	e0ae      	b.n	80077f8 <dir_register+0x384>
	while (cnt--)
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4698      	mov	r8, r3
 80076a0:	001a      	movs	r2, r3
 80076a2:	0020      	movs	r0, r4
 80076a4:	2100      	movs	r1, #0
 80076a6:	f000 fc81 	bl	8007fac <memset>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80076aa:	4643      	mov	r3, r8
 80076ac:	58ec      	ldr	r4, [r5, r3]
	clst -= 2;
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076b2:	2385      	movs	r3, #133	; 0x85
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	58e3      	ldr	r3, [r4, r3]
	clst -= 2;
 80076b8:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076ba:	3b02      	subs	r3, #2
 80076bc:	429a      	cmp	r2, r3
 80076be:	d300      	bcc.n	80076c2 <dir_register+0x24e>
 80076c0:	e0d4      	b.n	800786c <dir_register+0x3f8>
 80076c2:	0010      	movs	r0, r2
	return clst * fs->csize + fs->database;
 80076c4:	4a4b      	ldr	r2, [pc, #300]	; (80077f4 <dir_register+0x380>)
 80076c6:	218a      	movs	r1, #138	; 0x8a
 80076c8:	5ca2      	ldrb	r2, [r4, r2]
 80076ca:	0089      	lsls	r1, r1, #2
 80076cc:	4350      	muls	r0, r2
 80076ce:	4681      	mov	r9, r0
 80076d0:	5861      	ldr	r1, [r4, r1]
 80076d2:	4489      	add	r9, r1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80076d4:	218b      	movs	r1, #139	; 0x8b
 80076d6:	4648      	mov	r0, r9
 80076d8:	0089      	lsls	r1, r1, #2
 80076da:	5060      	str	r0, [r4, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80076dc:	2a00      	cmp	r2, #0
 80076de:	d07d      	beq.n	80077dc <dir_register+0x368>
 80076e0:	2300      	movs	r3, #0
 80076e2:	4698      	mov	r8, r3
 80076e4:	4653      	mov	r3, sl
 80076e6:	9702      	str	r7, [sp, #8]
 80076e8:	46b2      	mov	sl, r6
 80076ea:	464f      	mov	r7, r9
 80076ec:	46a9      	mov	r9, r5
 80076ee:	9303      	str	r3, [sp, #12]
						dp->fs->wflag = 1;
 80076f0:	2581      	movs	r5, #129	; 0x81
 80076f2:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80076f4:	4e3c      	ldr	r6, [pc, #240]	; (80077e8 <dir_register+0x374>)
						dp->fs->wflag = 1;
 80076f6:	00ad      	lsls	r5, r5, #2
 80076f8:	5563      	strb	r3, [r4, r5]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80076fa:	003a      	movs	r2, r7
 80076fc:	0021      	movs	r1, r4
 80076fe:	5da0      	ldrb	r0, [r4, r6]
 8007700:	f7fe fbac 	bl	8005e5c <disk_write>
 8007704:	2800      	cmp	r0, #0
 8007706:	d129      	bne.n	800775c <dir_register+0x2e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007708:	2288      	movs	r2, #136	; 0x88
 800770a:	465b      	mov	r3, fp
			fs->wflag = 0;
 800770c:	5560      	strb	r0, [r4, r5]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800770e:	0092      	lsls	r2, r2, #2
 8007710:	58a2      	ldr	r2, [r4, r2]
 8007712:	58e3      	ldr	r3, [r4, r3]
 8007714:	1aba      	subs	r2, r7, r2
 8007716:	429a      	cmp	r2, r3
 8007718:	d210      	bcs.n	800773c <dir_register+0x2c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800771a:	4a35      	ldr	r2, [pc, #212]	; (80077f0 <dir_register+0x37c>)
 800771c:	5ca5      	ldrb	r5, [r4, r2]
 800771e:	2d01      	cmp	r5, #1
 8007720:	d802      	bhi.n	8007728 <dir_register+0x2b4>
 8007722:	e00b      	b.n	800773c <dir_register+0x2c8>
 8007724:	465b      	mov	r3, fp
 8007726:	58e3      	ldr	r3, [r4, r3]
					wsect += fs->fsize;
 8007728:	18ff      	adds	r7, r7, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800772a:	003a      	movs	r2, r7
 800772c:	2301      	movs	r3, #1
 800772e:	0021      	movs	r1, r4
 8007730:	5da0      	ldrb	r0, [r4, r6]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007732:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007734:	f7fe fb92 	bl	8005e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007738:	2d01      	cmp	r5, #1
 800773a:	d1f3      	bne.n	8007724 <dir_register+0x2b0>
						dp->fs->winsect++;
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	464a      	mov	r2, r9
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	58d4      	ldr	r4, [r2, r3]
 8007744:	332c      	adds	r3, #44	; 0x2c
 8007746:	58e2      	ldr	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007748:	492a      	ldr	r1, [pc, #168]	; (80077f4 <dir_register+0x380>)
						dp->fs->winsect++;
 800774a:	1c57      	adds	r7, r2, #1
 800774c:	50e7      	str	r7, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800774e:	4643      	mov	r3, r8
 8007750:	5c61      	ldrb	r1, [r4, r1]
 8007752:	3301      	adds	r3, #1
 8007754:	428b      	cmp	r3, r1
 8007756:	d235      	bcs.n	80077c4 <dir_register+0x350>
 8007758:	4698      	mov	r8, r3
 800775a:	e7c9      	b.n	80076f0 <dir_register+0x27c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800775c:	2301      	movs	r3, #1
 800775e:	469a      	mov	sl, r3
 8007760:	e69a      	b.n	8007498 <dir_register+0x24>
				if (clst <= 1) return FR_INT_ERR;
 8007762:	2302      	movs	r3, #2
 8007764:	469a      	mov	sl, r3
 8007766:	e697      	b.n	8007498 <dir_register+0x24>
 8007768:	4682      	mov	sl, r0
 800776a:	e695      	b.n	8007498 <dir_register+0x24>
		*d++ = *s++;
 800776c:	7811      	ldrb	r1, [r2, #0]
 800776e:	7019      	strb	r1, [r3, #0]
 8007770:	7851      	ldrb	r1, [r2, #1]
 8007772:	7059      	strb	r1, [r3, #1]
 8007774:	7891      	ldrb	r1, [r2, #2]
 8007776:	7099      	strb	r1, [r3, #2]
 8007778:	78d1      	ldrb	r1, [r2, #3]
 800777a:	70d9      	strb	r1, [r3, #3]
 800777c:	7911      	ldrb	r1, [r2, #4]
 800777e:	7119      	strb	r1, [r3, #4]
 8007780:	7951      	ldrb	r1, [r2, #5]
 8007782:	7159      	strb	r1, [r3, #5]
 8007784:	7991      	ldrb	r1, [r2, #6]
 8007786:	7199      	strb	r1, [r3, #6]
 8007788:	79d1      	ldrb	r1, [r2, #7]
 800778a:	71d9      	strb	r1, [r3, #7]
 800778c:	e6e6      	b.n	800755c <dir_register+0xe8>
 800778e:	3a02      	subs	r2, #2
 8007790:	9201      	str	r2, [sp, #4]
 8007792:	3b02      	subs	r3, #2
				dp->clust = clst;				/* Initialize data for new cluster */
 8007794:	2283      	movs	r2, #131	; 0x83
 8007796:	9900      	ldr	r1, [sp, #0]
 8007798:	0092      	lsls	r2, r2, #2
 800779a:	50a9      	str	r1, [r5, r2]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800779c:	9a01      	ldr	r2, [sp, #4]
 800779e:	4293      	cmp	r3, r2
 80077a0:	d90d      	bls.n	80077be <dir_register+0x34a>
	return clst * fs->csize + fs->database;
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <dir_register+0x380>)
 80077a4:	5ce3      	ldrb	r3, [r4, r3]
 80077a6:	435a      	muls	r2, r3
 80077a8:	0013      	movs	r3, r2
 80077aa:	228a      	movs	r2, #138	; 0x8a
 80077ac:	4698      	mov	r8, r3
 80077ae:	0092      	lsls	r2, r2, #2
 80077b0:	58a2      	ldr	r2, [r4, r2]
 80077b2:	4490      	add	r8, r2
				dp->sect = clust2sect(dp->fs, clst);
 80077b4:	2384      	movs	r3, #132	; 0x84
 80077b6:	4642      	mov	r2, r8
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	50ea      	str	r2, [r5, r3]
 80077bc:	e6f0      	b.n	80075a0 <dir_register+0x12c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80077be:	2300      	movs	r3, #0
 80077c0:	4698      	mov	r8, r3
 80077c2:	e7f7      	b.n	80077b4 <dir_register+0x340>
 80077c4:	4643      	mov	r3, r8
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	464d      	mov	r5, r9
 80077ca:	4699      	mov	r9, r3
 80077cc:	2385      	movs	r3, #133	; 0x85
 80077ce:	9903      	ldr	r1, [sp, #12]
 80077d0:	4656      	mov	r6, sl
 80077d2:	468a      	mov	sl, r1
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	58e3      	ldr	r3, [r4, r3]
 80077d8:	9f02      	ldr	r7, [sp, #8]
 80077da:	3b02      	subs	r3, #2
					dp->fs->winsect -= c;						/* Rewind window offset */
 80077dc:	228b      	movs	r2, #139	; 0x8b
 80077de:	4649      	mov	r1, r9
 80077e0:	0092      	lsls	r2, r2, #2
 80077e2:	50a1      	str	r1, [r4, r2]
 80077e4:	e7d6      	b.n	8007794 <dir_register+0x320>
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	00000201 	.word	0x00000201
 80077ec:	00000206 	.word	0x00000206
 80077f0:	00000203 	.word	0x00000203
 80077f4:	00000202 	.word	0x00000202
		wsect = fs->winsect;	/* Current sector number */
 80077f8:	238b      	movs	r3, #139	; 0x8b
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	58e3      	ldr	r3, [r4, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80077fe:	0021      	movs	r1, r4
		wsect = fs->winsect;	/* Current sector number */
 8007800:	4699      	mov	r9, r3
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007802:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <dir_register+0x404>)
 8007804:	464a      	mov	r2, r9
 8007806:	5ce0      	ldrb	r0, [r4, r3]
 8007808:	2301      	movs	r3, #1
 800780a:	f7fe fb27 	bl	8005e5c <disk_write>
 800780e:	2800      	cmp	r0, #0
 8007810:	d1a4      	bne.n	800775c <dir_register+0x2e8>
			fs->wflag = 0;
 8007812:	4643      	mov	r3, r8
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007814:	2288      	movs	r2, #136	; 0x88
			fs->wflag = 0;
 8007816:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007818:	465b      	mov	r3, fp
 800781a:	4649      	mov	r1, r9
 800781c:	0092      	lsls	r2, r2, #2
 800781e:	58a2      	ldr	r2, [r4, r2]
 8007820:	58e3      	ldr	r3, [r4, r3]
 8007822:	1a8a      	subs	r2, r1, r2
 8007824:	429a      	cmp	r2, r3
 8007826:	d21d      	bcs.n	8007864 <dir_register+0x3f0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007828:	4a14      	ldr	r2, [pc, #80]	; (800787c <dir_register+0x408>)
 800782a:	5ca2      	ldrb	r2, [r4, r2]
 800782c:	4690      	mov	r8, r2
 800782e:	2a01      	cmp	r2, #1
 8007830:	d918      	bls.n	8007864 <dir_register+0x3f0>
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007832:	4a11      	ldr	r2, [pc, #68]	; (8007878 <dir_register+0x404>)
 8007834:	0029      	movs	r1, r5
 8007836:	9201      	str	r2, [sp, #4]
 8007838:	0032      	movs	r2, r6
 800783a:	4645      	mov	r5, r8
 800783c:	0026      	movs	r6, r4
 800783e:	4688      	mov	r8, r1
 8007840:	464c      	mov	r4, r9
 8007842:	4691      	mov	r9, r2
 8007844:	e001      	b.n	800784a <dir_register+0x3d6>
 8007846:	465b      	mov	r3, fp
 8007848:	58f3      	ldr	r3, [r6, r3]
					wsect += fs->fsize;
 800784a:	18e4      	adds	r4, r4, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	0022      	movs	r2, r4
 8007850:	5cf0      	ldrb	r0, [r6, r3]
 8007852:	0031      	movs	r1, r6
 8007854:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007856:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007858:	f7fe fb00 	bl	8005e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800785c:	2d01      	cmp	r5, #1
 800785e:	d1f2      	bne.n	8007846 <dir_register+0x3d2>
 8007860:	4645      	mov	r5, r8
 8007862:	464e      	mov	r6, r9
 8007864:	2380      	movs	r3, #128	; 0x80
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	58ec      	ldr	r4, [r5, r3]
 800786a:	e716      	b.n	800769a <dir_register+0x226>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800786c:	2100      	movs	r1, #0
 800786e:	4a04      	ldr	r2, [pc, #16]	; (8007880 <dir_register+0x40c>)
 8007870:	4689      	mov	r9, r1
 8007872:	5ca2      	ldrb	r2, [r4, r2]
 8007874:	e72e      	b.n	80076d4 <dir_register+0x260>
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	00000201 	.word	0x00000201
 800787c:	00000203 	.word	0x00000203
 8007880:	00000202 	.word	0x00000202

08007884 <f_mount>:
{
 8007884:	b510      	push	{r4, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	9001      	str	r0, [sp, #4]
 800788a:	9100      	str	r1, [sp, #0]
	if (*path) {	/* If the pointer is not a null */
 800788c:	2900      	cmp	r1, #0
 800788e:	d03f      	beq.n	8007910 <f_mount+0x8c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007890:	780c      	ldrb	r4, [r1, #0]
 8007892:	000b      	movs	r3, r1
 8007894:	0020      	movs	r0, r4
 8007896:	2c20      	cmp	r4, #32
 8007898:	d804      	bhi.n	80078a4 <f_mount+0x20>
 800789a:	e00d      	b.n	80078b8 <f_mount+0x34>
 800789c:	7858      	ldrb	r0, [r3, #1]
 800789e:	3301      	adds	r3, #1
 80078a0:	2820      	cmp	r0, #32
 80078a2:	d909      	bls.n	80078b8 <f_mount+0x34>
 80078a4:	283a      	cmp	r0, #58	; 0x3a
 80078a6:	d1f9      	bne.n	800789c <f_mount+0x18>
			i = *tp++ - '0'; 
 80078a8:	3101      	adds	r1, #1
	if (vol < 0) return FR_INVALID_DRIVE;
 80078aa:	200b      	movs	r0, #11
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078ac:	428b      	cmp	r3, r1
 80078ae:	d001      	beq.n	80078b4 <f_mount+0x30>
}
 80078b0:	b002      	add	sp, #8
 80078b2:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078b4:	2c30      	cmp	r4, #48	; 0x30
 80078b6:	d1fb      	bne.n	80078b0 <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078b8:	4916      	ldr	r1, [pc, #88]	; (8007914 <f_mount+0x90>)
 80078ba:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078c0:	4815      	ldr	r0, [pc, #84]	; (8007918 <f_mount+0x94>)
 80078c2:	6804      	ldr	r4, [r0, #0]
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d01a      	beq.n	80078fe <f_mount+0x7a>
 80078c8:	68c4      	ldr	r4, [r0, #12]
 80078ca:	429c      	cmp	r4, r3
 80078cc:	d014      	beq.n	80078f8 <f_mount+0x74>
		cfs->fs_type = 0;				/* Clear old fs object */
 80078ce:	2080      	movs	r0, #128	; 0x80
 80078d0:	2400      	movs	r4, #0
 80078d2:	0080      	lsls	r0, r0, #2
 80078d4:	541c      	strb	r4, [r3, r0]
	if (fs) {
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d016      	beq.n	800790a <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 80078dc:	2080      	movs	r0, #128	; 0x80
 80078de:	2400      	movs	r4, #0
 80078e0:	0080      	lsls	r0, r0, #2
 80078e2:	541c      	strb	r4, [r3, r0]
	FatFs[vol] = fs;					/* Register new fs object */
 80078e4:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078e6:	2000      	movs	r0, #0
 80078e8:	2a01      	cmp	r2, #1
 80078ea:	d1e1      	bne.n	80078b0 <f_mount+0x2c>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80078ec:	2200      	movs	r2, #0
 80078ee:	4669      	mov	r1, sp
 80078f0:	a801      	add	r0, sp, #4
 80078f2:	f7fe fe5b 	bl	80065ac <find_volume>
	LEAVE_FF(fs, res);
 80078f6:	e7db      	b.n	80078b0 <f_mount+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078f8:	2400      	movs	r4, #0
 80078fa:	60c4      	str	r4, [r0, #12]
 80078fc:	e7e7      	b.n	80078ce <f_mount+0x4a>
 80078fe:	2400      	movs	r4, #0
 8007900:	6004      	str	r4, [r0, #0]
 8007902:	68c4      	ldr	r4, [r0, #12]
 8007904:	429c      	cmp	r4, r3
 8007906:	d1e2      	bne.n	80078ce <f_mount+0x4a>
 8007908:	e7f6      	b.n	80078f8 <f_mount+0x74>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800790a:	2000      	movs	r0, #0
	FatFs[vol] = fs;					/* Register new fs object */
 800790c:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800790e:	e7cf      	b.n	80078b0 <f_mount+0x2c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007910:	200b      	movs	r0, #11
 8007912:	e7cd      	b.n	80078b0 <f_mount+0x2c>
 8007914:	20000050 	.word	0x20000050
 8007918:	20000054 	.word	0x20000054

0800791c <f_open>:
{
 800791c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791e:	4657      	mov	r7, sl
 8007920:	46de      	mov	lr, fp
 8007922:	464e      	mov	r6, r9
 8007924:	4645      	mov	r5, r8
 8007926:	b5e0      	push	{r5, r6, r7, lr}
 8007928:	4ca8      	ldr	r4, [pc, #672]	; (8007bcc <f_open+0x2b0>)
 800792a:	4692      	mov	sl, r2
 800792c:	44a5      	add	sp, r4
 800792e:	9103      	str	r1, [sp, #12]
 8007930:	1e04      	subs	r4, r0, #0
	if (!fp) return FR_INVALID_OBJECT;
 8007932:	d100      	bne.n	8007936 <f_open+0x1a>
 8007934:	e0eb      	b.n	8007b0e <f_open+0x1f2>
	fp->fs = 0;			/* Clear file object */
 8007936:	2380      	movs	r3, #128	; 0x80
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4699      	mov	r9, r3
 800793c:	2300      	movs	r3, #0
 800793e:	464a      	mov	r2, r9
 8007940:	5083      	str	r3, [r0, r2]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007942:	4653      	mov	r3, sl
 8007944:	3ae3      	subs	r2, #227	; 0xe3
 8007946:	3aff      	subs	r2, #255	; 0xff
 8007948:	401a      	ands	r2, r3
 800794a:	a903      	add	r1, sp, #12
 800794c:	a888      	add	r0, sp, #544	; 0x220
 800794e:	f7fe fe2d 	bl	80065ac <find_volume>
 8007952:	ae08      	add	r6, sp, #32
 8007954:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8007956:	d009      	beq.n	800796c <f_open+0x50>
}
 8007958:	0028      	movs	r0, r5
 800795a:	2391      	movs	r3, #145	; 0x91
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	449d      	add	sp, r3
 8007960:	bcf0      	pop	{r4, r5, r6, r7}
 8007962:	46bb      	mov	fp, r7
 8007964:	46b2      	mov	sl, r6
 8007966:	46a9      	mov	r9, r5
 8007968:	46a0      	mov	r8, r4
 800796a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800796c:	231f      	movs	r3, #31
 800796e:	4652      	mov	r2, sl
 8007970:	401a      	ands	r2, r3
		INIT_BUF(dj);
 8007972:	33fa      	adds	r3, #250	; 0xfa
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007974:	4690      	mov	r8, r2
		INIT_BUF(dj);
 8007976:	33ff      	adds	r3, #255	; 0xff
 8007978:	aa05      	add	r2, sp, #20
		res = follow_path(&dj, path);	/* Follow the file path */
 800797a:	0030      	movs	r0, r6
 800797c:	9903      	ldr	r1, [sp, #12]
		INIT_BUF(dj);
 800797e:	50f2      	str	r2, [r6, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007980:	f7ff fa36 	bl	8006df0 <follow_path>
		if (res == FR_OK) {
 8007984:	2800      	cmp	r0, #0
 8007986:	d123      	bne.n	80079d0 <f_open+0xb4>
		dir = dj.dir;
 8007988:	2385      	movs	r3, #133	; 0x85
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	58f7      	ldr	r7, [r6, r3]
			if (!dir)	/* Default directory itself */
 800798e:	2f00      	cmp	r7, #0
 8007990:	d100      	bne.n	8007994 <f_open+0x78>
 8007992:	e18a      	b.n	8007caa <f_open+0x38e>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007994:	2301      	movs	r3, #1
 8007996:	4642      	mov	r2, r8
 8007998:	439a      	bics	r2, r3
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800799a:	464b      	mov	r3, r9
 800799c:	58f0      	ldr	r0, [r6, r3]
				Files[i].clu == dp->sclust &&
 800799e:	3308      	adds	r3, #8
 80079a0:	58f3      	ldr	r3, [r6, r3]
 80079a2:	469c      	mov	ip, r3
				Files[i].idx == dp->index) break;
 80079a4:	4b8a      	ldr	r3, [pc, #552]	; (8007bd0 <f_open+0x2b4>)
 80079a6:	5af3      	ldrh	r3, [r6, r3]
 80079a8:	469b      	mov	fp, r3
		if (Files[i].fs) {	/* Existing entry */
 80079aa:	4b8a      	ldr	r3, [pc, #552]	; (8007bd4 <f_open+0x2b8>)
 80079ac:	4699      	mov	r9, r3
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d100      	bne.n	80079b6 <f_open+0x9a>
 80079b4:	e0bf      	b.n	8007b36 <f_open+0x21a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80079b6:	4298      	cmp	r0, r3
 80079b8:	d100      	bne.n	80079bc <f_open+0xa0>
 80079ba:	e0aa      	b.n	8007b12 <f_open+0x1f6>
		if (Files[i].fs) {	/* Existing entry */
 80079bc:	464b      	mov	r3, r9
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d100      	bne.n	80079c6 <f_open+0xaa>
 80079c4:	e0c5      	b.n	8007b52 <f_open+0x236>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80079c6:	4298      	cmp	r0, r3
 80079c8:	d100      	bne.n	80079cc <f_open+0xb0>
 80079ca:	e0d0      	b.n	8007b6e <f_open+0x252>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079cc:	2512      	movs	r5, #18
 80079ce:	e7c3      	b.n	8007958 <f_open+0x3c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80079d0:	231c      	movs	r3, #28
 80079d2:	4652      	mov	r2, sl
 80079d4:	4213      	tst	r3, r2
 80079d6:	d100      	bne.n	80079da <f_open+0xbe>
 80079d8:	e097      	b.n	8007b0a <f_open+0x1ee>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80079da:	2804      	cmp	r0, #4
 80079dc:	d000      	beq.n	80079e0 <f_open+0xc4>
 80079de:	e094      	b.n	8007b0a <f_open+0x1ee>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079e0:	4b7c      	ldr	r3, [pc, #496]	; (8007bd4 <f_open+0x2b8>)
 80079e2:	4699      	mov	r9, r3
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <f_open+0xd6>
 80079ea:	464b      	mov	r3, r9
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1ec      	bne.n	80079cc <f_open+0xb0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079f2:	0030      	movs	r0, r6
 80079f4:	f7ff fd3e 	bl	8007474 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80079f8:	4642      	mov	r2, r8
 80079fa:	2308      	movs	r3, #8
 80079fc:	431a      	orrs	r2, r3
 80079fe:	4690      	mov	r8, r2
				dir = dj.dir;					/* New entry */
 8007a00:	9f8d      	ldr	r7, [sp, #564]	; 0x234
 8007a02:	ae08      	add	r6, sp, #32
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d000      	beq.n	8007a0a <f_open+0xee>
 8007a08:	e07f      	b.n	8007b0a <f_open+0x1ee>
				dw = GET_FATTIME();				/* Created time */
 8007a0a:	f7fe f9d7 	bl	8005dbc <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007a0e:	b283      	uxth	r3, r0
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	73fb      	strb	r3, [r7, #15]
 8007a14:	0c03      	lsrs	r3, r0, #16
 8007a16:	743b      	strb	r3, [r7, #16]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007a18:	2300      	movs	r3, #0
 8007a1a:	72fb      	strb	r3, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007a1c:	773b      	strb	r3, [r7, #28]
 8007a1e:	777b      	strb	r3, [r7, #29]
 8007a20:	77bb      	strb	r3, [r7, #30]
 8007a22:	77fb      	strb	r3, [r7, #31]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007a24:	7efb      	ldrb	r3, [r7, #27]
 8007a26:	7eba      	ldrb	r2, [r7, #26]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	431a      	orrs	r2, r3
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007a2c:	2380      	movs	r3, #128	; 0x80
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007a2e:	73b8      	strb	r0, [r7, #14]
 8007a30:	0e00      	lsrs	r0, r0, #24
 8007a32:	7478      	strb	r0, [r7, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007a34:	009b      	lsls	r3, r3, #2
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007a36:	9201      	str	r2, [sp, #4]
	if (fs->fs_type == FS_FAT32)
 8007a38:	58f2      	ldr	r2, [r6, r3]
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d107      	bne.n	8007a50 <f_open+0x134>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007a40:	7d7a      	ldrb	r2, [r7, #21]
 8007a42:	7d3b      	ldrb	r3, [r7, #20]
 8007a44:	0212      	lsls	r2, r2, #8
 8007a46:	4313      	orrs	r3, r2
 8007a48:	9a01      	ldr	r2, [sp, #4]
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	9201      	str	r2, [sp, #4]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007a50:	2300      	movs	r3, #0
 8007a52:	76bb      	strb	r3, [r7, #26]
 8007a54:	76fb      	strb	r3, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007a56:	753b      	strb	r3, [r7, #20]
 8007a58:	757b      	strb	r3, [r7, #21]
				dj.fs->wflag = 1;
 8007a5a:	2380      	movs	r3, #128	; 0x80
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	58f0      	ldr	r0, [r6, r3]
 8007a62:	469a      	mov	sl, r3
 8007a64:	3304      	adds	r3, #4
 8007a66:	54c2      	strb	r2, [r0, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8007a68:	9b01      	ldr	r3, [sp, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d024      	beq.n	8007ab8 <f_open+0x19c>
 8007a6e:	001a      	movs	r2, r3
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d100      	bne.n	8007a76 <f_open+0x15a>
 8007a74:	e144      	b.n	8007d00 <f_open+0x3e4>
 8007a76:	2385      	movs	r3, #133	; 0x85
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	58c3      	ldr	r3, [r0, r3]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d800      	bhi.n	8007a82 <f_open+0x166>
 8007a80:	e13e      	b.n	8007d00 <f_open+0x3e4>
					dw = dj.fs->winsect;
 8007a82:	238b      	movs	r3, #139	; 0x8b
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	58c1      	ldr	r1, [r0, r3]
 8007a88:	468b      	mov	fp, r1
 8007a8a:	0011      	movs	r1, r2
 8007a8c:	f7ff fb98 	bl	80071c0 <remove_chain.part.0>
					if (res == FR_OK) {
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d13a      	bne.n	8007b0a <f_open+0x1ee>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007a94:	4650      	mov	r0, sl
 8007a96:	2383      	movs	r3, #131	; 0x83
 8007a98:	9a01      	ldr	r2, [sp, #4]
 8007a9a:	5830      	ldr	r0, [r6, r0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	3a01      	subs	r2, #1
 8007aa0:	50c2      	str	r2, [r0, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007aa2:	3320      	adds	r3, #32
 8007aa4:	58c3      	ldr	r3, [r0, r3]
 8007aa6:	459b      	cmp	fp, r3
 8007aa8:	d006      	beq.n	8007ab8 <f_open+0x19c>
 8007aaa:	4659      	mov	r1, fp
 8007aac:	f7fe f9f2 	bl	8005e94 <move_window.part.0>
		if (res == FR_OK) {
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d12a      	bne.n	8007b0a <f_open+0x1ee>
 8007ab4:	4653      	mov	r3, sl
 8007ab6:	58f0      	ldr	r0, [r6, r3]
 8007ab8:	2382      	movs	r3, #130	; 0x82
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	58f3      	ldr	r3, [r6, r3]
 8007abe:	469c      	mov	ip, r3
 8007ac0:	4b43      	ldr	r3, [pc, #268]	; (8007bd0 <f_open+0x2b4>)
 8007ac2:	5af3      	ldrh	r3, [r6, r3]
 8007ac4:	469b      	mov	fp, r3
				mode |= FA__WRITTEN;
 8007ac6:	2320      	movs	r3, #32
 8007ac8:	4642      	mov	r2, r8
 8007aca:	431a      	orrs	r2, r3
 8007acc:	3b1f      	subs	r3, #31
 8007ace:	4690      	mov	r8, r2
 8007ad0:	439a      	bics	r2, r3
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007ad2:	238b      	movs	r3, #139	; 0x8b
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	58c1      	ldr	r1, [r0, r3]
 8007ad8:	3b10      	subs	r3, #16
 8007ada:	50e1      	str	r1, [r4, r3]
			fp->dir_ptr = dir;
 8007adc:	3304      	adds	r3, #4
 8007ade:	50e7      	str	r7, [r4, r3]
		if (Files[i].fs == dp->fs &&
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	4283      	cmp	r3, r0
 8007ae8:	d076      	beq.n	8007bd8 <f_open+0x2bc>
 8007aea:	68c9      	ldr	r1, [r1, #12]
 8007aec:	4281      	cmp	r1, r0
 8007aee:	d100      	bne.n	8007af2 <f_open+0x1d6>
 8007af0:	e07a      	b.n	8007be8 <f_open+0x2cc>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d100      	bne.n	8007af8 <f_open+0x1dc>
 8007af6:	e105      	b.n	8007d04 <f_open+0x3e8>
 8007af8:	2900      	cmp	r1, #0
 8007afa:	d100      	bne.n	8007afe <f_open+0x1e2>
 8007afc:	e106      	b.n	8007d0c <f_open+0x3f0>
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007afe:	238a      	movs	r3, #138	; 0x8a
 8007b00:	2200      	movs	r2, #0
 8007b02:	009b      	lsls	r3, r3, #2
			if (!fp->lockid) res = FR_INT_ERR;
 8007b04:	2502      	movs	r5, #2
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b06:	50e2      	str	r2, [r4, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8007b08:	e726      	b.n	8007958 <f_open+0x3c>
 8007b0a:	0005      	movs	r5, r0
 8007b0c:	e724      	b.n	8007958 <f_open+0x3c>
	if (!fp) return FR_INVALID_OBJECT;
 8007b0e:	2509      	movs	r5, #9
 8007b10:	e722      	b.n	8007958 <f_open+0x3c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007b12:	464b      	mov	r3, r9
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	459c      	cmp	ip, r3
 8007b18:	d000      	beq.n	8007b1c <f_open+0x200>
 8007b1a:	e74f      	b.n	80079bc <f_open+0xa0>
				Files[i].clu == dp->sclust &&
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	891b      	ldrh	r3, [r3, #8]
 8007b20:	455b      	cmp	r3, fp
 8007b22:	d100      	bne.n	8007b26 <f_open+0x20a>
 8007b24:	e0f6      	b.n	8007d14 <f_open+0x3f8>
		if (Files[i].fs) {	/* Existing entry */
 8007b26:	464b      	mov	r3, r9
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d011      	beq.n	8007b52 <f_open+0x236>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007b2e:	4283      	cmp	r3, r0
 8007b30:	d01d      	beq.n	8007b6e <f_open+0x252>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b32:	3512      	adds	r5, #18
 8007b34:	e710      	b.n	8007958 <f_open+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8007b36:	464b      	mov	r3, r9
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <f_open+0x236>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	d107      	bne.n	8007b52 <f_open+0x236>
 8007b42:	464b      	mov	r3, r9
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	4563      	cmp	r3, ip
 8007b48:	d103      	bne.n	8007b52 <f_open+0x236>
				Files[i].clu == dp->sclust &&
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	8a9b      	ldrh	r3, [r3, #20]
 8007b4e:	455b      	cmp	r3, fp
 8007b50:	d017      	beq.n	8007b82 <f_open+0x266>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b52:	231c      	movs	r3, #28
 8007b54:	4651      	mov	r1, sl
 8007b56:	420b      	tst	r3, r1
 8007b58:	d021      	beq.n	8007b9e <f_open+0x282>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b5a:	2111      	movs	r1, #17
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	4219      	tst	r1, r3
 8007b60:	d000      	beq.n	8007b64 <f_open+0x248>
 8007b62:	e0a4      	b.n	8007cae <f_open+0x392>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007b64:	4653      	mov	r3, sl
 8007b66:	075b      	lsls	r3, r3, #29
 8007b68:	d52b      	bpl.n	8007bc2 <f_open+0x2a6>
						res = FR_EXIST;
 8007b6a:	2508      	movs	r5, #8
 8007b6c:	e6f4      	b.n	8007958 <f_open+0x3c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007b6e:	464b      	mov	r3, r9
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	459c      	cmp	ip, r3
 8007b74:	d000      	beq.n	8007b78 <f_open+0x25c>
 8007b76:	e729      	b.n	80079cc <f_open+0xb0>
				Files[i].clu == dp->sclust &&
 8007b78:	464b      	mov	r3, r9
 8007b7a:	8a9b      	ldrh	r3, [r3, #20]
 8007b7c:	455b      	cmp	r3, fp
 8007b7e:	d000      	beq.n	8007b82 <f_open+0x266>
 8007b80:	e724      	b.n	80079cc <f_open+0xb0>
 8007b82:	2101      	movs	r1, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d108      	bne.n	8007b9a <f_open+0x27e>
 8007b88:	004b      	lsls	r3, r1, #1
 8007b8a:	185b      	adds	r3, r3, r1
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	444b      	add	r3, r9
 8007b92:	895b      	ldrh	r3, [r3, #10]
 8007b94:	0049      	lsls	r1, r1, #1
 8007b96:	428b      	cmp	r3, r1
 8007b98:	d1db      	bne.n	8007b52 <f_open+0x236>
 8007b9a:	2510      	movs	r5, #16
 8007b9c:	e6dc      	b.n	8007958 <f_open+0x3c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	06da      	lsls	r2, r3, #27
 8007ba2:	d500      	bpl.n	8007ba6 <f_open+0x28a>
 8007ba4:	e085      	b.n	8007cb2 <f_open+0x396>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	0792      	lsls	r2, r2, #30
 8007baa:	d502      	bpl.n	8007bb2 <f_open+0x296>
 8007bac:	07db      	lsls	r3, r3, #31
 8007bae:	d500      	bpl.n	8007bb2 <f_open+0x296>
 8007bb0:	e07d      	b.n	8007cae <f_open+0x392>
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	4653      	mov	r3, sl
 8007bb6:	401a      	ands	r2, r3
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007bb8:	d185      	bne.n	8007ac6 <f_open+0x1aa>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	439a      	bics	r2, r3
 8007bc0:	e787      	b.n	8007ad2 <f_open+0x1b6>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bc2:	4653      	mov	r3, sl
 8007bc4:	071b      	lsls	r3, r3, #28
 8007bc6:	d400      	bmi.n	8007bca <f_open+0x2ae>
 8007bc8:	e783      	b.n	8007ad2 <f_open+0x1b6>
 8007bca:	e71e      	b.n	8007a0a <f_open+0xee>
 8007bcc:	fffffdbc 	.word	0xfffffdbc
 8007bd0:	00000206 	.word	0x00000206
 8007bd4:	20000054 	.word	0x20000054
		if (Files[i].fs == dp->fs &&
 8007bd8:	6849      	ldr	r1, [r1, #4]
 8007bda:	4561      	cmp	r1, ip
 8007bdc:	d06b      	beq.n	8007cb6 <f_open+0x39a>
 8007bde:	4649      	mov	r1, r9
 8007be0:	68c9      	ldr	r1, [r1, #12]
 8007be2:	4288      	cmp	r0, r1
 8007be4:	d000      	beq.n	8007be8 <f_open+0x2cc>
 8007be6:	e787      	b.n	8007af8 <f_open+0x1dc>
 8007be8:	4649      	mov	r1, r9
 8007bea:	6909      	ldr	r1, [r1, #16]
 8007bec:	4561      	cmp	r1, ip
 8007bee:	d100      	bne.n	8007bf2 <f_open+0x2d6>
 8007bf0:	e07f      	b.n	8007cf2 <f_open+0x3d6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d000      	beq.n	8007bf8 <f_open+0x2dc>
 8007bf6:	e782      	b.n	8007afe <f_open+0x1e2>
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	9302      	str	r3, [sp, #8]
		Files[i].fs = dp->fs;
 8007bfe:	0073      	lsls	r3, r6, #1
 8007c00:	1999      	adds	r1, r3, r6
 8007c02:	0089      	lsls	r1, r1, #2
 8007c04:	468a      	mov	sl, r1
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4653      	mov	r3, sl
		Files[i].clu = dp->sclust;
 8007c0c:	44ca      	add	sl, r9
		Files[i].fs = dp->fs;
 8007c0e:	50c8      	str	r0, [r1, r3]
		Files[i].clu = dp->sclust;
 8007c10:	4653      	mov	r3, sl
 8007c12:	4661      	mov	r1, ip
 8007c14:	6059      	str	r1, [r3, #4]
		Files[i].idx = dp->index;
 8007c16:	4659      	mov	r1, fp
 8007c18:	8119      	strh	r1, [r3, #8]
		Files[i].ctr = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	469c      	mov	ip, r3
 8007c1e:	4653      	mov	r3, sl
 8007c20:	4661      	mov	r1, ip
 8007c22:	8159      	strh	r1, [r3, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c24:	1e53      	subs	r3, r2, #1
 8007c26:	419a      	sbcs	r2, r3
 8007c28:	4253      	negs	r3, r2
 8007c2a:	22ff      	movs	r2, #255	; 0xff
 8007c2c:	401a      	ands	r2, r3
 8007c2e:	3201      	adds	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	199b      	adds	r3, r3, r6
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	444b      	add	r3, r9
 8007c38:	815a      	strh	r2, [r3, #10]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c3a:	238a      	movs	r3, #138	; 0x8a
 8007c3c:	9a02      	ldr	r2, [sp, #8]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	50e2      	str	r2, [r4, r3]
			fp->flag = mode;					/* File access mode */
 8007c42:	4642      	mov	r2, r8
 8007c44:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <f_open+0x3fc>)
 8007c46:	54e2      	strb	r2, [r4, r3]
			fp->err = 0;						/* Clear error flag */
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4b34      	ldr	r3, [pc, #208]	; (8007d1c <f_open+0x400>)
 8007c4c:	54e2      	strb	r2, [r4, r3]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007c4e:	7efa      	ldrb	r2, [r7, #27]
 8007c50:	7ebb      	ldrb	r3, [r7, #26]
 8007c52:	0212      	lsls	r2, r2, #8
 8007c54:	4313      	orrs	r3, r2
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007c56:	2280      	movs	r2, #128	; 0x80
 8007c58:	0092      	lsls	r2, r2, #2
	if (fs->fs_type == FS_FAT32)
 8007c5a:	5c82      	ldrb	r2, [r0, r2]
 8007c5c:	2a03      	cmp	r2, #3
 8007c5e:	d105      	bne.n	8007c6c <f_open+0x350>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007c60:	7d79      	ldrb	r1, [r7, #21]
 8007c62:	7d3a      	ldrb	r2, [r7, #20]
 8007c64:	0209      	lsls	r1, r1, #8
 8007c66:	430a      	orrs	r2, r1
 8007c68:	0412      	lsls	r2, r2, #16
 8007c6a:	4313      	orrs	r3, r2
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007c6c:	2284      	movs	r2, #132	; 0x84
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	50a3      	str	r3, [r4, r2]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007c72:	7f7a      	ldrb	r2, [r7, #29]
 8007c74:	7f3b      	ldrb	r3, [r7, #28]
 8007c76:	0212      	lsls	r2, r2, #8
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	7fbb      	ldrb	r3, [r7, #30]
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	7ffb      	ldrb	r3, [r7, #31]
 8007c82:	061b      	lsls	r3, r3, #24
 8007c84:	4313      	orrs	r3, r2
 8007c86:	2283      	movs	r2, #131	; 0x83
 8007c88:	0092      	lsls	r2, r2, #2
 8007c8a:	50a3      	str	r3, [r4, r2]
			fp->fptr = 0;						/* File pointer */
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	3a04      	subs	r2, #4
 8007c90:	50a3      	str	r3, [r4, r2]
			fp->dsect = 0;
 8007c92:	3210      	adds	r2, #16
 8007c94:	50a3      	str	r3, [r4, r2]
			fp->cltbl = 0;						/* Normal seek mode */
 8007c96:	320c      	adds	r2, #12
 8007c98:	50a3      	str	r3, [r4, r2]
			fp->fs = dj.fs;	 					/* Validate file object */
 8007c9a:	2380      	movs	r3, #128	; 0x80
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	50e0      	str	r0, [r4, r3]
			fp->id = fp->fs->id;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <f_open+0x3fc>)
 8007ca2:	5ac2      	ldrh	r2, [r0, r3]
 8007ca4:	3b02      	subs	r3, #2
 8007ca6:	52e2      	strh	r2, [r4, r3]
 8007ca8:	e656      	b.n	8007958 <f_open+0x3c>
				res = FR_INVALID_NAME;
 8007caa:	2506      	movs	r5, #6
 8007cac:	e654      	b.n	8007958 <f_open+0x3c>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007cae:	2507      	movs	r5, #7
 8007cb0:	e652      	b.n	8007958 <f_open+0x3c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007cb2:	2504      	movs	r5, #4
 8007cb4:	e650      	b.n	8007958 <f_open+0x3c>
			Files[i].clu == dp->sclust &&
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	8909      	ldrh	r1, [r1, #8]
 8007cba:	4559      	cmp	r1, fp
 8007cbc:	d18f      	bne.n	8007bde <f_open+0x2c2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cbe:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007cc0:	0073      	lsls	r3, r6, #1
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	d108      	bne.n	8007cda <f_open+0x3be>
 8007cc8:	199a      	adds	r2, r3, r6
 8007cca:	0092      	lsls	r2, r2, #2
 8007ccc:	444a      	add	r2, r9
 8007cce:	8952      	ldrh	r2, [r2, #10]
 8007cd0:	1c73      	adds	r3, r6, #1
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	b292      	uxth	r2, r2
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	e7aa      	b.n	8007c30 <f_open+0x314>
 8007cda:	199a      	adds	r2, r3, r6
 8007cdc:	0092      	lsls	r2, r2, #2
 8007cde:	444a      	add	r2, r9
 8007ce0:	8952      	ldrh	r2, [r2, #10]
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d000      	beq.n	8007ce8 <f_open+0x3cc>
 8007ce6:	e70a      	b.n	8007afe <f_open+0x1e2>
 8007ce8:	1c73      	adds	r3, r6, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007cea:	3201      	adds	r2, #1
 8007cec:	9302      	str	r3, [sp, #8]
 8007cee:	32ff      	adds	r2, #255	; 0xff
 8007cf0:	e79e      	b.n	8007c30 <f_open+0x314>
			Files[i].clu == dp->sclust &&
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	8a89      	ldrh	r1, [r1, #20]
 8007cf6:	4559      	cmp	r1, fp
 8007cf8:	d000      	beq.n	8007cfc <f_open+0x3e0>
 8007cfa:	e77a      	b.n	8007bf2 <f_open+0x2d6>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cfc:	2601      	movs	r6, #1
 8007cfe:	e7df      	b.n	8007cc0 <f_open+0x3a4>
		res = FR_INT_ERR;
 8007d00:	2502      	movs	r5, #2
 8007d02:	e629      	b.n	8007958 <f_open+0x3c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d04:	2301      	movs	r3, #1
 8007d06:	2600      	movs	r6, #0
 8007d08:	9302      	str	r3, [sp, #8]
 8007d0a:	e778      	b.n	8007bfe <f_open+0x2e2>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	2601      	movs	r6, #1
 8007d10:	9302      	str	r3, [sp, #8]
 8007d12:	e774      	b.n	8007bfe <f_open+0x2e2>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d14:	2100      	movs	r1, #0
 8007d16:	e735      	b.n	8007b84 <f_open+0x268>
 8007d18:	00000206 	.word	0x00000206
 8007d1c:	00000207 	.word	0x00000207

08007d20 <f_read>:
{
 8007d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d22:	001d      	movs	r5, r3
 8007d24:	46c6      	mov	lr, r8
	*br = 0;	/* Clear read byte counter */
 8007d26:	2300      	movs	r3, #0
{
 8007d28:	0004      	movs	r4, r0
 8007d2a:	000e      	movs	r6, r1
 8007d2c:	0017      	movs	r7, r2
 8007d2e:	b500      	push	{lr}
	*br = 0;	/* Clear read byte counter */
 8007d30:	602b      	str	r3, [r5, #0]
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d00e      	beq.n	8007d54 <f_read+0x34>
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	0092      	lsls	r2, r2, #2
 8007d3a:	5883      	ldr	r3, [r0, r2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <f_read+0x34>
 8007d40:	5c9a      	ldrb	r2, [r3, r2]
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	d006      	beq.n	8007d54 <f_read+0x34>
 8007d46:	4a11      	ldr	r2, [pc, #68]	; (8007d8c <f_read+0x6c>)
 8007d48:	4690      	mov	r8, r2
 8007d4a:	5a99      	ldrh	r1, [r3, r2]
 8007d4c:	3a02      	subs	r2, #2
 8007d4e:	5a82      	ldrh	r2, [r0, r2]
 8007d50:	4291      	cmp	r1, r2
 8007d52:	d003      	beq.n	8007d5c <f_read+0x3c>
		return FR_INVALID_OBJECT;
 8007d54:	2009      	movs	r0, #9
}
 8007d56:	bc80      	pop	{r7}
 8007d58:	46b8      	mov	r8, r7
 8007d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007d5c:	4a0c      	ldr	r2, [pc, #48]	; (8007d90 <f_read+0x70>)
 8007d5e:	5c98      	ldrb	r0, [r3, r2]
 8007d60:	f7fe f84c 	bl	8005dfc <disk_status>
 8007d64:	2201      	movs	r2, #1
 8007d66:	4202      	tst	r2, r0
 8007d68:	d1f4      	bne.n	8007d54 <f_read+0x34>
	if (fp->err)								/* Check error */
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <f_read+0x74>)
 8007d6c:	5ce0      	ldrb	r0, [r4, r3]
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d1f1      	bne.n	8007d56 <f_read+0x36>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007d72:	4643      	mov	r3, r8
 8007d74:	5ce3      	ldrb	r3, [r4, r3]
 8007d76:	421a      	tst	r2, r3
 8007d78:	d006      	beq.n	8007d88 <f_read+0x68>
 8007d7a:	002b      	movs	r3, r5
 8007d7c:	003a      	movs	r2, r7
 8007d7e:	0031      	movs	r1, r6
 8007d80:	0020      	movs	r0, r4
 8007d82:	f7fe f951 	bl	8006028 <f_read.part.0>
 8007d86:	e7e6      	b.n	8007d56 <f_read+0x36>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007d88:	2007      	movs	r0, #7
 8007d8a:	e7e4      	b.n	8007d56 <f_read+0x36>
 8007d8c:	00000206 	.word	0x00000206
 8007d90:	00000201 	.word	0x00000201
 8007d94:	00000207 	.word	0x00000207

08007d98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9a:	46c6      	mov	lr, r8
 8007d9c:	0004      	movs	r4, r0
 8007d9e:	b500      	push	{lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d00e      	beq.n	8007dc2 <f_close+0x2a>
 8007da4:	2580      	movs	r5, #128	; 0x80
 8007da6:	00ad      	lsls	r5, r5, #2
 8007da8:	5943      	ldr	r3, [r0, r5]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d009      	beq.n	8007dc2 <f_close+0x2a>
 8007dae:	5d5a      	ldrb	r2, [r3, r5]
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d006      	beq.n	8007dc2 <f_close+0x2a>
 8007db4:	2281      	movs	r2, #129	; 0x81
 8007db6:	4e57      	ldr	r6, [pc, #348]	; (8007f14 <f_close+0x17c>)
 8007db8:	0092      	lsls	r2, r2, #2
 8007dba:	5b99      	ldrh	r1, [r3, r6]
 8007dbc:	5a82      	ldrh	r2, [r0, r2]
 8007dbe:	4291      	cmp	r1, r2
 8007dc0:	d003      	beq.n	8007dca <f_close+0x32>
		return FR_INVALID_OBJECT;
 8007dc2:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	46b8      	mov	r8, r7
 8007dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007dca:	4f53      	ldr	r7, [pc, #332]	; (8007f18 <f_close+0x180>)
 8007dcc:	5dd8      	ldrb	r0, [r3, r7]
 8007dce:	f7fe f815 	bl	8005dfc <disk_status>
 8007dd2:	07c3      	lsls	r3, r0, #31
 8007dd4:	d4f5      	bmi.n	8007dc2 <f_close+0x2a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007dd6:	5da3      	ldrb	r3, [r4, r6]
 8007dd8:	069a      	lsls	r2, r3, #26
 8007dda:	d54b      	bpl.n	8007e74 <f_close+0xdc>
			if (fp->flag & FA__DIRTY) {
 8007ddc:	2240      	movs	r2, #64	; 0x40
 8007dde:	4690      	mov	r8, r2
 8007de0:	421a      	tst	r2, r3
 8007de2:	d17b      	bne.n	8007edc <f_close+0x144>
			res = move_window(fp->fs, fp->dir_sect);
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	58e0      	ldr	r0, [r4, r3]
 8007dea:	331c      	adds	r3, #28
 8007dec:	58e1      	ldr	r1, [r4, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007dee:	3310      	adds	r3, #16
 8007df0:	58c3      	ldr	r3, [r0, r3]
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d003      	beq.n	8007dfe <f_close+0x66>
 8007df6:	f7fe f84d 	bl	8005e94 <move_window.part.0>
			if (res == FR_OK) {
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d1e2      	bne.n	8007dc4 <f_close+0x2c>
				dir = fp->dir_ptr;
 8007dfe:	2388      	movs	r3, #136	; 0x88
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007e00:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	58e5      	ldr	r5, [r4, r3]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007e06:	7aeb      	ldrb	r3, [r5, #11]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007e0c:	2383      	movs	r3, #131	; 0x83
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	58e2      	ldr	r2, [r4, r3]
 8007e12:	772a      	strb	r2, [r5, #28]
 8007e14:	5ae2      	ldrh	r2, [r4, r3]
 8007e16:	0a12      	lsrs	r2, r2, #8
 8007e18:	776a      	strb	r2, [r5, #29]
 8007e1a:	58e2      	ldr	r2, [r4, r3]
 8007e1c:	0c12      	lsrs	r2, r2, #16
 8007e1e:	77aa      	strb	r2, [r5, #30]
 8007e20:	58e3      	ldr	r3, [r4, r3]
 8007e22:	0e1b      	lsrs	r3, r3, #24
 8007e24:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007e26:	2384      	movs	r3, #132	; 0x84
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	58e3      	ldr	r3, [r4, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007e2c:	76ab      	strb	r3, [r5, #26]
 8007e2e:	b29a      	uxth	r2, r3
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007e30:	0c1b      	lsrs	r3, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007e32:	0a12      	lsrs	r2, r2, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007e34:	752b      	strb	r3, [r5, #20]
 8007e36:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007e38:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007e3a:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8007e3c:	f7fd ffbe 	bl	8005dbc <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007e40:	b283      	uxth	r3, r0
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	75eb      	strb	r3, [r5, #23]
 8007e46:	0c03      	lsrs	r3, r0, #16
 8007e48:	762b      	strb	r3, [r5, #24]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007e4a:	2300      	movs	r3, #0
				fp->flag &= ~FA__WRITTEN;
 8007e4c:	2120      	movs	r1, #32
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007e4e:	75a8      	strb	r0, [r5, #22]
				fp->flag &= ~FA__WRITTEN;
 8007e50:	4a30      	ldr	r2, [pc, #192]	; (8007f14 <f_close+0x17c>)
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007e52:	0e00      	lsrs	r0, r0, #24
 8007e54:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007e56:	74ab      	strb	r3, [r5, #18]
 8007e58:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8007e5a:	5ca3      	ldrb	r3, [r4, r2]
 8007e5c:	438b      	bics	r3, r1
 8007e5e:	54a3      	strb	r3, [r4, r2]
				fp->fs->wflag = 1;
 8007e60:	2380      	movs	r3, #128	; 0x80
 8007e62:	2201      	movs	r2, #1
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	58e0      	ldr	r0, [r4, r3]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	54c2      	strb	r2, [r0, r3]
				res = sync_fs(fp->fs);
 8007e6c:	f7fe fada 	bl	8006424 <sync_fs>
	if (res == FR_OK)
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1a7      	bne.n	8007dc4 <f_close+0x2c>
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007e74:	2280      	movs	r2, #128	; 0x80
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	58a3      	ldr	r3, [r4, r2]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0a1      	beq.n	8007dc2 <f_close+0x2a>
 8007e7e:	5c9a      	ldrb	r2, [r3, r2]
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d09e      	beq.n	8007dc2 <f_close+0x2a>
 8007e84:	4a23      	ldr	r2, [pc, #140]	; (8007f14 <f_close+0x17c>)
 8007e86:	5a99      	ldrh	r1, [r3, r2]
 8007e88:	3a02      	subs	r2, #2
 8007e8a:	5aa2      	ldrh	r2, [r4, r2]
 8007e8c:	4291      	cmp	r1, r2
 8007e8e:	d198      	bne.n	8007dc2 <f_close+0x2a>
 8007e90:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <f_close+0x180>)
 8007e92:	5c98      	ldrb	r0, [r3, r2]
 8007e94:	f7fd ffb2 	bl	8005dfc <disk_status>
 8007e98:	2201      	movs	r2, #1
 8007e9a:	0003      	movs	r3, r0
 8007e9c:	0010      	movs	r0, r2
 8007e9e:	4018      	ands	r0, r3
 8007ea0:	421a      	tst	r2, r3
 8007ea2:	d000      	beq.n	8007ea6 <f_close+0x10e>
 8007ea4:	e78d      	b.n	8007dc2 <f_close+0x2a>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007ea6:	238a      	movs	r3, #138	; 0x8a
 8007ea8:	009b      	lsls	r3, r3, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007eaa:	58e3      	ldr	r3, [r4, r3]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d824      	bhi.n	8007efc <f_close+0x164>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007eb2:	2780      	movs	r7, #128	; 0x80
		n = Files[i].ctr;
 8007eb4:	0059      	lsls	r1, r3, #1
 8007eb6:	4e19      	ldr	r6, [pc, #100]	; (8007f1c <f_close+0x184>)
 8007eb8:	18ca      	adds	r2, r1, r3
 8007eba:	0092      	lsls	r2, r2, #2
 8007ebc:	18b2      	adds	r2, r6, r2
 8007ebe:	8955      	ldrh	r5, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007ec0:	007f      	lsls	r7, r7, #1
 8007ec2:	42bd      	cmp	r5, r7
 8007ec4:	d022      	beq.n	8007f0c <f_close+0x174>
		if (n) n--;					/* Decrement read mode open count */
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	d11a      	bne.n	8007f00 <f_close+0x168>
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007eca:	18c9      	adds	r1, r1, r3
 8007ecc:	2300      	movs	r3, #0
 8007ece:	0089      	lsls	r1, r1, #2
 8007ed0:	5073      	str	r3, [r6, r1]
				fp->fs = 0;				/* Invalidate file object */
 8007ed2:	2380      	movs	r3, #128	; 0x80
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	50e2      	str	r2, [r4, r3]
 8007eda:	e773      	b.n	8007dc4 <f_close+0x2c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007edc:	2386      	movs	r3, #134	; 0x86
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	58e2      	ldr	r2, [r4, r3]
 8007ee2:	5963      	ldr	r3, [r4, r5]
 8007ee4:	0021      	movs	r1, r4
 8007ee6:	5dd8      	ldrb	r0, [r3, r7]
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f7fd ffb7 	bl	8005e5c <disk_write>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d10e      	bne.n	8007f10 <f_close+0x178>
				fp->flag &= ~FA__DIRTY;
 8007ef2:	4642      	mov	r2, r8
 8007ef4:	5da3      	ldrb	r3, [r4, r6]
 8007ef6:	4393      	bics	r3, r2
 8007ef8:	55a3      	strb	r3, [r4, r6]
 8007efa:	e773      	b.n	8007de4 <f_close+0x4c>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007efc:	2002      	movs	r0, #2
	return res;
 8007efe:	e761      	b.n	8007dc4 <f_close+0x2c>
		if (n) n--;					/* Decrement read mode open count */
 8007f00:	3d01      	subs	r5, #1
 8007f02:	b2ad      	uxth	r5, r5
		Files[i].ctr = n;
 8007f04:	8155      	strh	r5, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	d1e3      	bne.n	8007ed2 <f_close+0x13a>
 8007f0a:	e7de      	b.n	8007eca <f_close+0x132>
		Files[i].ctr = n;
 8007f0c:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007f0e:	e7dc      	b.n	8007eca <f_close+0x132>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007f10:	2001      	movs	r0, #1
 8007f12:	e757      	b.n	8007dc4 <f_close+0x2c>
 8007f14:	00000206 	.word	0x00000206
 8007f18:	00000201 	.word	0x00000201
 8007f1c:	20000054 	.word	0x20000054

08007f20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007f20:	b510      	push	{r4, lr}
  if(disk.nbr <= _VOLUMES)
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <FATFS_LinkDriver+0x40>)
{
 8007f24:	0002      	movs	r2, r0
  if(disk.nbr <= _VOLUMES)
 8007f26:	7a5c      	ldrb	r4, [r3, #9]
  uint8_t ret = 1;
 8007f28:	2001      	movs	r0, #1
  if(disk.nbr <= _VOLUMES)
 8007f2a:	2c01      	cmp	r4, #1
 8007f2c:	d816      	bhi.n	8007f5c <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 8007f2e:	2400      	movs	r4, #0
 8007f30:	7a58      	ldrb	r0, [r3, #9]
 8007f32:	b2c0      	uxtb	r0, r0
 8007f34:	541c      	strb	r4, [r3, r0]
    disk.drv[disk.nbr] = drv;  
 8007f36:	7a58      	ldrb	r0, [r3, #9]
 8007f38:	0080      	lsls	r0, r0, #2
 8007f3a:	1818      	adds	r0, r3, r0
 8007f3c:	6042      	str	r2, [r0, #4]
    disk.lun[disk.nbr] = lun;  
 8007f3e:	7a5a      	ldrb	r2, [r3, #9]
 8007f40:	189a      	adds	r2, r3, r2
 8007f42:	7214      	strb	r4, [r2, #8]
    DiskNum = disk.nbr++;
 8007f44:	7a5a      	ldrb	r2, [r3, #9]
 8007f46:	1c50      	adds	r0, r2, #1
 8007f48:	b2c0      	uxtb	r0, r0
 8007f4a:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8007f4c:	233a      	movs	r3, #58	; 0x3a
    path[3] = 0;
 8007f4e:	2000      	movs	r0, #0
    path[0] = DiskNum + '0';
 8007f50:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007f52:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007f54:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8007f56:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8007f58:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007f5a:	70cc      	strb	r4, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	20000070 	.word	0x20000070

08007f64 <__libc_init_array>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	2600      	movs	r6, #0
 8007f68:	4d0c      	ldr	r5, [pc, #48]	; (8007f9c <__libc_init_array+0x38>)
 8007f6a:	4c0d      	ldr	r4, [pc, #52]	; (8007fa0 <__libc_init_array+0x3c>)
 8007f6c:	1b64      	subs	r4, r4, r5
 8007f6e:	10a4      	asrs	r4, r4, #2
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	d109      	bne.n	8007f88 <__libc_init_array+0x24>
 8007f74:	2600      	movs	r6, #0
 8007f76:	f000 f821 	bl	8007fbc <_init>
 8007f7a:	4d0a      	ldr	r5, [pc, #40]	; (8007fa4 <__libc_init_array+0x40>)
 8007f7c:	4c0a      	ldr	r4, [pc, #40]	; (8007fa8 <__libc_init_array+0x44>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	d105      	bne.n	8007f92 <__libc_init_array+0x2e>
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	00b3      	lsls	r3, r6, #2
 8007f8a:	58eb      	ldr	r3, [r5, r3]
 8007f8c:	4798      	blx	r3
 8007f8e:	3601      	adds	r6, #1
 8007f90:	e7ee      	b.n	8007f70 <__libc_init_array+0xc>
 8007f92:	00b3      	lsls	r3, r6, #2
 8007f94:	58eb      	ldr	r3, [r5, r3]
 8007f96:	4798      	blx	r3
 8007f98:	3601      	adds	r6, #1
 8007f9a:	e7f2      	b.n	8007f82 <__libc_init_array+0x1e>
 8007f9c:	080089f8 	.word	0x080089f8
 8007fa0:	080089f8 	.word	0x080089f8
 8007fa4:	080089f8 	.word	0x080089f8
 8007fa8:	080089fc 	.word	0x080089fc

08007fac <memset>:
 8007fac:	0003      	movs	r3, r0
 8007fae:	1882      	adds	r2, r0, r2
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d100      	bne.n	8007fb6 <memset+0xa>
 8007fb4:	4770      	bx	lr
 8007fb6:	7019      	strb	r1, [r3, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	e7f9      	b.n	8007fb0 <memset+0x4>

08007fbc <_init>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr

08007fc8 <_fini>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr
